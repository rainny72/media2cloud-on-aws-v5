// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const {
  AccessDeniedException,
  ResourceNotFoundException,
  InternalServerException,
  ModelErrorException,
  ModelNotReadyException,
  ModelTimeoutException,
  ServiceQuotaExceededException,
  ThrottlingException,
  ServiceUnavailableException,
  ValidationException,
} = require('@aws-sdk/client-bedrock-runtime');
const {
  M2CException,
} = require('./error');

const UNAVAILABLE_EXCEPTIONS = [
  'AccessDeniedException',
  'ResourceNotFoundException',
];
const RETRYABLE_EXCEPTIONS = [
  'InternalServerException',
  'ModelErrorException',
  'ModelNotReadyException',
  'ModelTimeoutException',
  'ServiceQuotaExceededException',
  'ThrottlingException',
  'ServiceUnavailableException',
];
const INVALID_REQUEST_EXCEPTIONS = [
  'ValidationException',
];

class ExceptionHelper {
  static retryableExceptions(exception) {
    return RETRYABLE_EXCEPTIONS.includes((exception || {}).name);
  }

  static unavailableExceptions(exception) {
    return UNAVAILABLE_EXCEPTIONS.includes((exception || {}).name);
  }

  static invalidRequestExceptions(exception) {
    return INVALID_REQUEST_EXCEPTIONS.includes((exception || {}).name);
  }

  static nameToException(name = 'Unknown') {
    if (name === 'AccessDeniedException') {
      return new AccessDeniedException();
    }
    if (name === 'ResourceNotFoundException') {
      return new ResourceNotFoundException();
    }
    if (name === 'InternalServerException') {
      return new InternalServerException();
    }
    if (name === 'ModelErrorException') {
      return new ModelErrorException();
    }
    if (name === 'ModelNotReadyException') {
      return new ModelNotReadyException();
    }
    if (name === 'ModelTimeoutException') {
      return new ModelTimeoutException();
    }
    if (name === 'ServiceQuotaExceededException') {
      return new ServiceQuotaExceededException();
    }
    if (name === 'ThrottlingException') {
      return new ThrottlingException();
    }
    if (name === 'ServiceUnavailableException') {
      return new ServiceUnavailableException();
    }
    if (name === 'ValidationException') {
      return new ValidationException();
    }
    return new M2CException(name);
  }
}

module.exports = ExceptionHelper;
