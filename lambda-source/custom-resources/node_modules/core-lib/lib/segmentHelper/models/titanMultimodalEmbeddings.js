// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const {
  ModelErrorException,
} = require('@aws-sdk/client-bedrock-runtime');
const {
  retryableExceptions,
} = require('../../exceptionHelper');
const BaseModel = require('./base');

// Reference: https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-titan-embed-mm.html
class TitanMultimodalEmbeddings extends BaseModel {
  constructor(config) {
    super(config);
    this.$inferenceConfig = {
      ...super.$inferenceConfig,
      embeddingConfig: {
        outputEmbeddingLength: this.embeddingSize,
      },
    };
  }

  static canSupport(modelString = '') {
    return modelString.indexOf('titan-embed-image') >= 0;
  }

  get embeddingSize() {
    return this.config.embeddingSize;
  }

  async inference(system, inputs = []) {
    system;
    const content = {};
    for (const { text, image } of inputs) {
      if (text !== undefined) {
        content.inputText = text;
      } else if (image !== undefined) {
        content.inputImage = image;
      } else {
        throw new Error('Only support either text or image');
      }
    }
    const params = {
      ...this.inferenceConfig,
      ...content,
    };

    let region = this.modelRegion;
    const otherRegions = this.supportedRegions
      .filter((x) => x !== region);

    let response;
    do {
      try {
        response = await this.invokeEndpoint(params, region);

        const { inputPerImageCost, inputPerTokenCost } = this.modelPricing;
        const { embedding, message, inputTextTokenCount = 0 } = response;

        let inputImageCount = 0;
        if (params.inputImage) {
          inputImageCount = 1;
          params.inputImage = '[Image]';
        }
        const estimatedCost = (inputImageCount * inputPerImageCost) + (inputTextTokenCount * inputPerTokenCost);

        const usage = { inputTextTokenCount, inputImageCount, estimatedCost };
        response = { usage, embedding, message };

        return { request: params, response };
      } catch (e) {
        if (retryableExceptions(e) && otherRegions.length > 0) {
          response = undefined;
          region = otherRegions.shift();
          console.log(`[WARN]: TitanMultimodalEmbeddings.inference exception: ${e.name}. Retry on ${region} region.`);
        } else {
          throw e;
        }
      }
    } while (response === undefined);

    // should never be here!!!
    console.log(`[FATAL]: LOGIC ERROR: ${JSON.stringify(response)}`);
    throw new ModelErrorException();
  }
}

module.exports = TitanMultimodalEmbeddings;
