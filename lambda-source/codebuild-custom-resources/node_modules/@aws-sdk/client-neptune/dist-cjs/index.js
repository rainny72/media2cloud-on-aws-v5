"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  AddRoleToDBClusterCommand: () => AddRoleToDBClusterCommand,
  AddSourceIdentifierToSubscriptionCommand: () => AddSourceIdentifierToSubscriptionCommand,
  AddTagsToResourceCommand: () => AddTagsToResourceCommand,
  ApplyMethod: () => ApplyMethod,
  ApplyPendingMaintenanceActionCommand: () => ApplyPendingMaintenanceActionCommand,
  AuthorizationNotFoundFault: () => AuthorizationNotFoundFault,
  CertificateNotFoundFault: () => CertificateNotFoundFault,
  CopyDBClusterParameterGroupCommand: () => CopyDBClusterParameterGroupCommand,
  CopyDBClusterSnapshotCommand: () => CopyDBClusterSnapshotCommand,
  CopyDBParameterGroupCommand: () => CopyDBParameterGroupCommand,
  CreateDBClusterCommand: () => CreateDBClusterCommand,
  CreateDBClusterEndpointCommand: () => CreateDBClusterEndpointCommand,
  CreateDBClusterParameterGroupCommand: () => CreateDBClusterParameterGroupCommand,
  CreateDBClusterSnapshotCommand: () => CreateDBClusterSnapshotCommand,
  CreateDBInstanceCommand: () => CreateDBInstanceCommand,
  CreateDBInstanceMessageFilterSensitiveLog: () => CreateDBInstanceMessageFilterSensitiveLog,
  CreateDBParameterGroupCommand: () => CreateDBParameterGroupCommand,
  CreateDBSubnetGroupCommand: () => CreateDBSubnetGroupCommand,
  CreateEventSubscriptionCommand: () => CreateEventSubscriptionCommand,
  CreateGlobalClusterCommand: () => CreateGlobalClusterCommand,
  DBClusterAlreadyExistsFault: () => DBClusterAlreadyExistsFault,
  DBClusterEndpointAlreadyExistsFault: () => DBClusterEndpointAlreadyExistsFault,
  DBClusterEndpointNotFoundFault: () => DBClusterEndpointNotFoundFault,
  DBClusterEndpointQuotaExceededFault: () => DBClusterEndpointQuotaExceededFault,
  DBClusterNotFoundFault: () => DBClusterNotFoundFault,
  DBClusterParameterGroupNotFoundFault: () => DBClusterParameterGroupNotFoundFault,
  DBClusterQuotaExceededFault: () => DBClusterQuotaExceededFault,
  DBClusterRoleAlreadyExistsFault: () => DBClusterRoleAlreadyExistsFault,
  DBClusterRoleNotFoundFault: () => DBClusterRoleNotFoundFault,
  DBClusterRoleQuotaExceededFault: () => DBClusterRoleQuotaExceededFault,
  DBClusterSnapshotAlreadyExistsFault: () => DBClusterSnapshotAlreadyExistsFault,
  DBClusterSnapshotNotFoundFault: () => DBClusterSnapshotNotFoundFault,
  DBInstanceAlreadyExistsFault: () => DBInstanceAlreadyExistsFault,
  DBInstanceNotFoundFault: () => DBInstanceNotFoundFault,
  DBParameterGroupAlreadyExistsFault: () => DBParameterGroupAlreadyExistsFault,
  DBParameterGroupNotFoundFault: () => DBParameterGroupNotFoundFault,
  DBParameterGroupQuotaExceededFault: () => DBParameterGroupQuotaExceededFault,
  DBSecurityGroupNotFoundFault: () => DBSecurityGroupNotFoundFault,
  DBSnapshotAlreadyExistsFault: () => DBSnapshotAlreadyExistsFault,
  DBSnapshotNotFoundFault: () => DBSnapshotNotFoundFault,
  DBSubnetGroupAlreadyExistsFault: () => DBSubnetGroupAlreadyExistsFault,
  DBSubnetGroupDoesNotCoverEnoughAZs: () => DBSubnetGroupDoesNotCoverEnoughAZs,
  DBSubnetGroupNotFoundFault: () => DBSubnetGroupNotFoundFault,
  DBSubnetGroupQuotaExceededFault: () => DBSubnetGroupQuotaExceededFault,
  DBSubnetQuotaExceededFault: () => DBSubnetQuotaExceededFault,
  DBUpgradeDependencyFailureFault: () => DBUpgradeDependencyFailureFault,
  DeleteDBClusterCommand: () => DeleteDBClusterCommand,
  DeleteDBClusterEndpointCommand: () => DeleteDBClusterEndpointCommand,
  DeleteDBClusterParameterGroupCommand: () => DeleteDBClusterParameterGroupCommand,
  DeleteDBClusterSnapshotCommand: () => DeleteDBClusterSnapshotCommand,
  DeleteDBInstanceCommand: () => DeleteDBInstanceCommand,
  DeleteDBParameterGroupCommand: () => DeleteDBParameterGroupCommand,
  DeleteDBSubnetGroupCommand: () => DeleteDBSubnetGroupCommand,
  DeleteEventSubscriptionCommand: () => DeleteEventSubscriptionCommand,
  DeleteGlobalClusterCommand: () => DeleteGlobalClusterCommand,
  DescribeDBClusterEndpointsCommand: () => DescribeDBClusterEndpointsCommand,
  DescribeDBClusterParameterGroupsCommand: () => DescribeDBClusterParameterGroupsCommand,
  DescribeDBClusterParametersCommand: () => DescribeDBClusterParametersCommand,
  DescribeDBClusterSnapshotAttributesCommand: () => DescribeDBClusterSnapshotAttributesCommand,
  DescribeDBClusterSnapshotsCommand: () => DescribeDBClusterSnapshotsCommand,
  DescribeDBClustersCommand: () => DescribeDBClustersCommand,
  DescribeDBEngineVersionsCommand: () => DescribeDBEngineVersionsCommand,
  DescribeDBInstancesCommand: () => DescribeDBInstancesCommand,
  DescribeDBParameterGroupsCommand: () => DescribeDBParameterGroupsCommand,
  DescribeDBParametersCommand: () => DescribeDBParametersCommand,
  DescribeDBSubnetGroupsCommand: () => DescribeDBSubnetGroupsCommand,
  DescribeEngineDefaultClusterParametersCommand: () => DescribeEngineDefaultClusterParametersCommand,
  DescribeEngineDefaultParametersCommand: () => DescribeEngineDefaultParametersCommand,
  DescribeEventCategoriesCommand: () => DescribeEventCategoriesCommand,
  DescribeEventSubscriptionsCommand: () => DescribeEventSubscriptionsCommand,
  DescribeEventsCommand: () => DescribeEventsCommand,
  DescribeGlobalClustersCommand: () => DescribeGlobalClustersCommand,
  DescribeOrderableDBInstanceOptionsCommand: () => DescribeOrderableDBInstanceOptionsCommand,
  DescribePendingMaintenanceActionsCommand: () => DescribePendingMaintenanceActionsCommand,
  DescribeValidDBInstanceModificationsCommand: () => DescribeValidDBInstanceModificationsCommand,
  DomainNotFoundFault: () => DomainNotFoundFault,
  EventSubscriptionQuotaExceededFault: () => EventSubscriptionQuotaExceededFault,
  FailoverDBClusterCommand: () => FailoverDBClusterCommand,
  FailoverGlobalClusterCommand: () => FailoverGlobalClusterCommand,
  FailoverStatus: () => FailoverStatus,
  GlobalClusterAlreadyExistsFault: () => GlobalClusterAlreadyExistsFault,
  GlobalClusterNotFoundFault: () => GlobalClusterNotFoundFault,
  GlobalClusterQuotaExceededFault: () => GlobalClusterQuotaExceededFault,
  InstanceQuotaExceededFault: () => InstanceQuotaExceededFault,
  InsufficientDBClusterCapacityFault: () => InsufficientDBClusterCapacityFault,
  InsufficientDBInstanceCapacityFault: () => InsufficientDBInstanceCapacityFault,
  InsufficientStorageClusterCapacityFault: () => InsufficientStorageClusterCapacityFault,
  InvalidDBClusterEndpointStateFault: () => InvalidDBClusterEndpointStateFault,
  InvalidDBClusterSnapshotStateFault: () => InvalidDBClusterSnapshotStateFault,
  InvalidDBClusterStateFault: () => InvalidDBClusterStateFault,
  InvalidDBInstanceStateFault: () => InvalidDBInstanceStateFault,
  InvalidDBParameterGroupStateFault: () => InvalidDBParameterGroupStateFault,
  InvalidDBSecurityGroupStateFault: () => InvalidDBSecurityGroupStateFault,
  InvalidDBSnapshotStateFault: () => InvalidDBSnapshotStateFault,
  InvalidDBSubnetGroupStateFault: () => InvalidDBSubnetGroupStateFault,
  InvalidDBSubnetStateFault: () => InvalidDBSubnetStateFault,
  InvalidEventSubscriptionStateFault: () => InvalidEventSubscriptionStateFault,
  InvalidGlobalClusterStateFault: () => InvalidGlobalClusterStateFault,
  InvalidRestoreFault: () => InvalidRestoreFault,
  InvalidSubnet: () => InvalidSubnet,
  InvalidVPCNetworkStateFault: () => InvalidVPCNetworkStateFault,
  KMSKeyNotAccessibleFault: () => KMSKeyNotAccessibleFault,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  ModifyDBClusterCommand: () => ModifyDBClusterCommand,
  ModifyDBClusterEndpointCommand: () => ModifyDBClusterEndpointCommand,
  ModifyDBClusterParameterGroupCommand: () => ModifyDBClusterParameterGroupCommand,
  ModifyDBClusterSnapshotAttributeCommand: () => ModifyDBClusterSnapshotAttributeCommand,
  ModifyDBInstanceCommand: () => ModifyDBInstanceCommand,
  ModifyDBInstanceMessageFilterSensitiveLog: () => ModifyDBInstanceMessageFilterSensitiveLog,
  ModifyDBParameterGroupCommand: () => ModifyDBParameterGroupCommand,
  ModifyDBSubnetGroupCommand: () => ModifyDBSubnetGroupCommand,
  ModifyEventSubscriptionCommand: () => ModifyEventSubscriptionCommand,
  ModifyGlobalClusterCommand: () => ModifyGlobalClusterCommand,
  Neptune: () => Neptune,
  NeptuneClient: () => NeptuneClient,
  NeptuneServiceException: () => NeptuneServiceException,
  OptionGroupNotFoundFault: () => OptionGroupNotFoundFault,
  PromoteReadReplicaDBClusterCommand: () => PromoteReadReplicaDBClusterCommand,
  ProvisionedIopsNotAvailableInAZFault: () => ProvisionedIopsNotAvailableInAZFault,
  RebootDBInstanceCommand: () => RebootDBInstanceCommand,
  RemoveFromGlobalClusterCommand: () => RemoveFromGlobalClusterCommand,
  RemoveRoleFromDBClusterCommand: () => RemoveRoleFromDBClusterCommand,
  RemoveSourceIdentifierFromSubscriptionCommand: () => RemoveSourceIdentifierFromSubscriptionCommand,
  RemoveTagsFromResourceCommand: () => RemoveTagsFromResourceCommand,
  ResetDBClusterParameterGroupCommand: () => ResetDBClusterParameterGroupCommand,
  ResetDBParameterGroupCommand: () => ResetDBParameterGroupCommand,
  ResourceNotFoundFault: () => ResourceNotFoundFault,
  RestoreDBClusterFromSnapshotCommand: () => RestoreDBClusterFromSnapshotCommand,
  RestoreDBClusterToPointInTimeCommand: () => RestoreDBClusterToPointInTimeCommand,
  SNSInvalidTopicFault: () => SNSInvalidTopicFault,
  SNSNoAuthorizationFault: () => SNSNoAuthorizationFault,
  SNSTopicArnNotFoundFault: () => SNSTopicArnNotFoundFault,
  SharedSnapshotQuotaExceededFault: () => SharedSnapshotQuotaExceededFault,
  SnapshotQuotaExceededFault: () => SnapshotQuotaExceededFault,
  SourceNotFoundFault: () => SourceNotFoundFault,
  SourceType: () => SourceType,
  StartDBClusterCommand: () => StartDBClusterCommand,
  StopDBClusterCommand: () => StopDBClusterCommand,
  StorageQuotaExceededFault: () => StorageQuotaExceededFault,
  StorageTypeNotSupportedFault: () => StorageTypeNotSupportedFault,
  SubnetAlreadyInUse: () => SubnetAlreadyInUse,
  SubscriptionAlreadyExistFault: () => SubscriptionAlreadyExistFault,
  SubscriptionCategoryNotFoundFault: () => SubscriptionCategoryNotFoundFault,
  SubscriptionNotFoundFault: () => SubscriptionNotFoundFault,
  SwitchoverGlobalClusterCommand: () => SwitchoverGlobalClusterCommand,
  __Client: () => import_smithy_client.Client,
  paginateDescribeDBClusterEndpoints: () => paginateDescribeDBClusterEndpoints,
  paginateDescribeDBClusterParameterGroups: () => paginateDescribeDBClusterParameterGroups,
  paginateDescribeDBClusterParameters: () => paginateDescribeDBClusterParameters,
  paginateDescribeDBClusterSnapshots: () => paginateDescribeDBClusterSnapshots,
  paginateDescribeDBClusters: () => paginateDescribeDBClusters,
  paginateDescribeDBEngineVersions: () => paginateDescribeDBEngineVersions,
  paginateDescribeDBInstances: () => paginateDescribeDBInstances,
  paginateDescribeDBParameterGroups: () => paginateDescribeDBParameterGroups,
  paginateDescribeDBParameters: () => paginateDescribeDBParameters,
  paginateDescribeDBSubnetGroups: () => paginateDescribeDBSubnetGroups,
  paginateDescribeEngineDefaultParameters: () => paginateDescribeEngineDefaultParameters,
  paginateDescribeEventSubscriptions: () => paginateDescribeEventSubscriptions,
  paginateDescribeEvents: () => paginateDescribeEvents,
  paginateDescribeGlobalClusters: () => paginateDescribeGlobalClusters,
  paginateDescribeOrderableDBInstanceOptions: () => paginateDescribeOrderableDBInstanceOptions,
  paginateDescribePendingMaintenanceActions: () => paginateDescribePendingMaintenanceActions,
  waitForDBInstanceAvailable: () => waitForDBInstanceAvailable,
  waitForDBInstanceDeleted: () => waitForDBInstanceDeleted,
  waitUntilDBInstanceAvailable: () => waitUntilDBInstanceAvailable,
  waitUntilDBInstanceDeleted: () => waitUntilDBInstanceDeleted
});
module.exports = __toCommonJS(index_exports);

// src/NeptuneClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "rds"
  });
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/NeptuneClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(
    (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig),
    (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig),
    (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig),
    getHttpAuthExtensionConfiguration(runtimeConfig)
  );
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(
    runtimeConfig,
    (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    resolveHttpAuthRuntimeConfig(extensionConfiguration)
  );
}, "resolveRuntimeExtensions");

// src/NeptuneClient.ts
var NeptuneClient = class extends import_smithy_client.Client {
  static {
    __name(this, "NeptuneClient");
  }
  /**
   * The resolved configuration of NeptuneClient class. This is resolved and normalized from the {@link NeptuneClientConfig | constructor configuration interface}.
   */
  config;
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    super(_config_0);
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultNeptuneHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};

// src/Neptune.ts


// src/commands/AddRoleToDBClusterCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/protocols/Aws_query.ts
var import_core2 = require("@aws-sdk/core");



// src/models/models_0.ts


// src/models/NeptuneServiceException.ts

var NeptuneServiceException = class _NeptuneServiceException extends import_smithy_client.ServiceException {
  static {
    __name(this, "NeptuneServiceException");
  }
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _NeptuneServiceException.prototype);
  }
};

// src/models/models_0.ts
var DBClusterNotFoundFault = class _DBClusterNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterNotFoundFault");
  }
  name = "DBClusterNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterNotFoundFault.prototype);
  }
};
var DBClusterRoleAlreadyExistsFault = class _DBClusterRoleAlreadyExistsFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterRoleAlreadyExistsFault");
  }
  name = "DBClusterRoleAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterRoleAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterRoleAlreadyExistsFault.prototype);
  }
};
var DBClusterRoleQuotaExceededFault = class _DBClusterRoleQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterRoleQuotaExceededFault");
  }
  name = "DBClusterRoleQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterRoleQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterRoleQuotaExceededFault.prototype);
  }
};
var InvalidDBClusterStateFault = class _InvalidDBClusterStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidDBClusterStateFault");
  }
  name = "InvalidDBClusterStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidDBClusterStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidDBClusterStateFault.prototype);
  }
};
var SourceNotFoundFault = class _SourceNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "SourceNotFoundFault");
  }
  name = "SourceNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SourceNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SourceNotFoundFault.prototype);
  }
};
var SubscriptionNotFoundFault = class _SubscriptionNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "SubscriptionNotFoundFault");
  }
  name = "SubscriptionNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SubscriptionNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SubscriptionNotFoundFault.prototype);
  }
};
var DBInstanceNotFoundFault = class _DBInstanceNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "DBInstanceNotFoundFault");
  }
  name = "DBInstanceNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBInstanceNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBInstanceNotFoundFault.prototype);
  }
};
var DBSnapshotNotFoundFault = class _DBSnapshotNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "DBSnapshotNotFoundFault");
  }
  name = "DBSnapshotNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBSnapshotNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBSnapshotNotFoundFault.prototype);
  }
};
var ResourceNotFoundFault = class _ResourceNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "ResourceNotFoundFault");
  }
  name = "ResourceNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ResourceNotFoundFault.prototype);
  }
};
var DBParameterGroupAlreadyExistsFault = class _DBParameterGroupAlreadyExistsFault extends NeptuneServiceException {
  static {
    __name(this, "DBParameterGroupAlreadyExistsFault");
  }
  name = "DBParameterGroupAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBParameterGroupAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBParameterGroupAlreadyExistsFault.prototype);
  }
};
var DBParameterGroupNotFoundFault = class _DBParameterGroupNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "DBParameterGroupNotFoundFault");
  }
  name = "DBParameterGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBParameterGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBParameterGroupNotFoundFault.prototype);
  }
};
var DBParameterGroupQuotaExceededFault = class _DBParameterGroupQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "DBParameterGroupQuotaExceededFault");
  }
  name = "DBParameterGroupQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBParameterGroupQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBParameterGroupQuotaExceededFault.prototype);
  }
};
var DBClusterSnapshotAlreadyExistsFault = class _DBClusterSnapshotAlreadyExistsFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterSnapshotAlreadyExistsFault");
  }
  name = "DBClusterSnapshotAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterSnapshotAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterSnapshotAlreadyExistsFault.prototype);
  }
};
var DBClusterSnapshotNotFoundFault = class _DBClusterSnapshotNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterSnapshotNotFoundFault");
  }
  name = "DBClusterSnapshotNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterSnapshotNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterSnapshotNotFoundFault.prototype);
  }
};
var InvalidDBClusterSnapshotStateFault = class _InvalidDBClusterSnapshotStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidDBClusterSnapshotStateFault");
  }
  name = "InvalidDBClusterSnapshotStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidDBClusterSnapshotStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidDBClusterSnapshotStateFault.prototype);
  }
};
var KMSKeyNotAccessibleFault = class _KMSKeyNotAccessibleFault extends NeptuneServiceException {
  static {
    __name(this, "KMSKeyNotAccessibleFault");
  }
  name = "KMSKeyNotAccessibleFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "KMSKeyNotAccessibleFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _KMSKeyNotAccessibleFault.prototype);
  }
};
var SnapshotQuotaExceededFault = class _SnapshotQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "SnapshotQuotaExceededFault");
  }
  name = "SnapshotQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SnapshotQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SnapshotQuotaExceededFault.prototype);
  }
};
var DBClusterAlreadyExistsFault = class _DBClusterAlreadyExistsFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterAlreadyExistsFault");
  }
  name = "DBClusterAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterAlreadyExistsFault.prototype);
  }
};
var DBClusterParameterGroupNotFoundFault = class _DBClusterParameterGroupNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterParameterGroupNotFoundFault");
  }
  name = "DBClusterParameterGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterParameterGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterParameterGroupNotFoundFault.prototype);
  }
};
var DBClusterQuotaExceededFault = class _DBClusterQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterQuotaExceededFault");
  }
  name = "DBClusterQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterQuotaExceededFault.prototype);
  }
};
var DBSubnetGroupDoesNotCoverEnoughAZs = class _DBSubnetGroupDoesNotCoverEnoughAZs extends NeptuneServiceException {
  static {
    __name(this, "DBSubnetGroupDoesNotCoverEnoughAZs");
  }
  name = "DBSubnetGroupDoesNotCoverEnoughAZs";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBSubnetGroupDoesNotCoverEnoughAZs",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBSubnetGroupDoesNotCoverEnoughAZs.prototype);
  }
};
var DBSubnetGroupNotFoundFault = class _DBSubnetGroupNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "DBSubnetGroupNotFoundFault");
  }
  name = "DBSubnetGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBSubnetGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBSubnetGroupNotFoundFault.prototype);
  }
};
var GlobalClusterNotFoundFault = class _GlobalClusterNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "GlobalClusterNotFoundFault");
  }
  name = "GlobalClusterNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "GlobalClusterNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _GlobalClusterNotFoundFault.prototype);
  }
};
var InsufficientStorageClusterCapacityFault = class _InsufficientStorageClusterCapacityFault extends NeptuneServiceException {
  static {
    __name(this, "InsufficientStorageClusterCapacityFault");
  }
  name = "InsufficientStorageClusterCapacityFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InsufficientStorageClusterCapacityFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InsufficientStorageClusterCapacityFault.prototype);
  }
};
var InvalidDBInstanceStateFault = class _InvalidDBInstanceStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidDBInstanceStateFault");
  }
  name = "InvalidDBInstanceStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidDBInstanceStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidDBInstanceStateFault.prototype);
  }
};
var InvalidDBSubnetGroupStateFault = class _InvalidDBSubnetGroupStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidDBSubnetGroupStateFault");
  }
  name = "InvalidDBSubnetGroupStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidDBSubnetGroupStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidDBSubnetGroupStateFault.prototype);
  }
};
var InvalidGlobalClusterStateFault = class _InvalidGlobalClusterStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidGlobalClusterStateFault");
  }
  name = "InvalidGlobalClusterStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidGlobalClusterStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidGlobalClusterStateFault.prototype);
  }
};
var InvalidSubnet = class _InvalidSubnet extends NeptuneServiceException {
  static {
    __name(this, "InvalidSubnet");
  }
  name = "InvalidSubnet";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidSubnet",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidSubnet.prototype);
  }
};
var InvalidVPCNetworkStateFault = class _InvalidVPCNetworkStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidVPCNetworkStateFault");
  }
  name = "InvalidVPCNetworkStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidVPCNetworkStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidVPCNetworkStateFault.prototype);
  }
};
var StorageQuotaExceededFault = class _StorageQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "StorageQuotaExceededFault");
  }
  name = "StorageQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "StorageQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _StorageQuotaExceededFault.prototype);
  }
};
var DBClusterEndpointAlreadyExistsFault = class _DBClusterEndpointAlreadyExistsFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterEndpointAlreadyExistsFault");
  }
  name = "DBClusterEndpointAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterEndpointAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterEndpointAlreadyExistsFault.prototype);
  }
};
var DBClusterEndpointQuotaExceededFault = class _DBClusterEndpointQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterEndpointQuotaExceededFault");
  }
  name = "DBClusterEndpointQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterEndpointQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterEndpointQuotaExceededFault.prototype);
  }
};
var AuthorizationNotFoundFault = class _AuthorizationNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "AuthorizationNotFoundFault");
  }
  name = "AuthorizationNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AuthorizationNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _AuthorizationNotFoundFault.prototype);
  }
};
var DBInstanceAlreadyExistsFault = class _DBInstanceAlreadyExistsFault extends NeptuneServiceException {
  static {
    __name(this, "DBInstanceAlreadyExistsFault");
  }
  name = "DBInstanceAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBInstanceAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBInstanceAlreadyExistsFault.prototype);
  }
};
var DBSecurityGroupNotFoundFault = class _DBSecurityGroupNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "DBSecurityGroupNotFoundFault");
  }
  name = "DBSecurityGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBSecurityGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBSecurityGroupNotFoundFault.prototype);
  }
};
var DomainNotFoundFault = class _DomainNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "DomainNotFoundFault");
  }
  name = "DomainNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DomainNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DomainNotFoundFault.prototype);
  }
};
var InstanceQuotaExceededFault = class _InstanceQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "InstanceQuotaExceededFault");
  }
  name = "InstanceQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InstanceQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InstanceQuotaExceededFault.prototype);
  }
};
var InsufficientDBInstanceCapacityFault = class _InsufficientDBInstanceCapacityFault extends NeptuneServiceException {
  static {
    __name(this, "InsufficientDBInstanceCapacityFault");
  }
  name = "InsufficientDBInstanceCapacityFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InsufficientDBInstanceCapacityFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InsufficientDBInstanceCapacityFault.prototype);
  }
};
var OptionGroupNotFoundFault = class _OptionGroupNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "OptionGroupNotFoundFault");
  }
  name = "OptionGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "OptionGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _OptionGroupNotFoundFault.prototype);
  }
};
var ProvisionedIopsNotAvailableInAZFault = class _ProvisionedIopsNotAvailableInAZFault extends NeptuneServiceException {
  static {
    __name(this, "ProvisionedIopsNotAvailableInAZFault");
  }
  name = "ProvisionedIopsNotAvailableInAZFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ProvisionedIopsNotAvailableInAZFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ProvisionedIopsNotAvailableInAZFault.prototype);
  }
};
var StorageTypeNotSupportedFault = class _StorageTypeNotSupportedFault extends NeptuneServiceException {
  static {
    __name(this, "StorageTypeNotSupportedFault");
  }
  name = "StorageTypeNotSupportedFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "StorageTypeNotSupportedFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _StorageTypeNotSupportedFault.prototype);
  }
};
var DBSubnetGroupAlreadyExistsFault = class _DBSubnetGroupAlreadyExistsFault extends NeptuneServiceException {
  static {
    __name(this, "DBSubnetGroupAlreadyExistsFault");
  }
  name = "DBSubnetGroupAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBSubnetGroupAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBSubnetGroupAlreadyExistsFault.prototype);
  }
};
var DBSubnetGroupQuotaExceededFault = class _DBSubnetGroupQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "DBSubnetGroupQuotaExceededFault");
  }
  name = "DBSubnetGroupQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBSubnetGroupQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBSubnetGroupQuotaExceededFault.prototype);
  }
};
var DBSubnetQuotaExceededFault = class _DBSubnetQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "DBSubnetQuotaExceededFault");
  }
  name = "DBSubnetQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBSubnetQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBSubnetQuotaExceededFault.prototype);
  }
};
var EventSubscriptionQuotaExceededFault = class _EventSubscriptionQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "EventSubscriptionQuotaExceededFault");
  }
  name = "EventSubscriptionQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "EventSubscriptionQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _EventSubscriptionQuotaExceededFault.prototype);
  }
};
var SNSInvalidTopicFault = class _SNSInvalidTopicFault extends NeptuneServiceException {
  static {
    __name(this, "SNSInvalidTopicFault");
  }
  name = "SNSInvalidTopicFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SNSInvalidTopicFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SNSInvalidTopicFault.prototype);
  }
};
var SNSNoAuthorizationFault = class _SNSNoAuthorizationFault extends NeptuneServiceException {
  static {
    __name(this, "SNSNoAuthorizationFault");
  }
  name = "SNSNoAuthorizationFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SNSNoAuthorizationFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SNSNoAuthorizationFault.prototype);
  }
};
var SNSTopicArnNotFoundFault = class _SNSTopicArnNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "SNSTopicArnNotFoundFault");
  }
  name = "SNSTopicArnNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SNSTopicArnNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SNSTopicArnNotFoundFault.prototype);
  }
};
var SubscriptionAlreadyExistFault = class _SubscriptionAlreadyExistFault extends NeptuneServiceException {
  static {
    __name(this, "SubscriptionAlreadyExistFault");
  }
  name = "SubscriptionAlreadyExistFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SubscriptionAlreadyExistFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SubscriptionAlreadyExistFault.prototype);
  }
};
var SubscriptionCategoryNotFoundFault = class _SubscriptionCategoryNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "SubscriptionCategoryNotFoundFault");
  }
  name = "SubscriptionCategoryNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SubscriptionCategoryNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SubscriptionCategoryNotFoundFault.prototype);
  }
};
var FailoverStatus = {
  CANCELLING: "cancelling",
  FAILING_OVER: "failing-over",
  PENDING: "pending"
};
var GlobalClusterAlreadyExistsFault = class _GlobalClusterAlreadyExistsFault extends NeptuneServiceException {
  static {
    __name(this, "GlobalClusterAlreadyExistsFault");
  }
  name = "GlobalClusterAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "GlobalClusterAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _GlobalClusterAlreadyExistsFault.prototype);
  }
};
var GlobalClusterQuotaExceededFault = class _GlobalClusterQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "GlobalClusterQuotaExceededFault");
  }
  name = "GlobalClusterQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "GlobalClusterQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _GlobalClusterQuotaExceededFault.prototype);
  }
};
var DBClusterEndpointNotFoundFault = class _DBClusterEndpointNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterEndpointNotFoundFault");
  }
  name = "DBClusterEndpointNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterEndpointNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterEndpointNotFoundFault.prototype);
  }
};
var InvalidDBClusterEndpointStateFault = class _InvalidDBClusterEndpointStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidDBClusterEndpointStateFault");
  }
  name = "InvalidDBClusterEndpointStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidDBClusterEndpointStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidDBClusterEndpointStateFault.prototype);
  }
};
var InvalidDBParameterGroupStateFault = class _InvalidDBParameterGroupStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidDBParameterGroupStateFault");
  }
  name = "InvalidDBParameterGroupStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidDBParameterGroupStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidDBParameterGroupStateFault.prototype);
  }
};
var DBSnapshotAlreadyExistsFault = class _DBSnapshotAlreadyExistsFault extends NeptuneServiceException {
  static {
    __name(this, "DBSnapshotAlreadyExistsFault");
  }
  name = "DBSnapshotAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBSnapshotAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBSnapshotAlreadyExistsFault.prototype);
  }
};
var InvalidDBSubnetStateFault = class _InvalidDBSubnetStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidDBSubnetStateFault");
  }
  name = "InvalidDBSubnetStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidDBSubnetStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidDBSubnetStateFault.prototype);
  }
};
var InvalidEventSubscriptionStateFault = class _InvalidEventSubscriptionStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidEventSubscriptionStateFault");
  }
  name = "InvalidEventSubscriptionStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidEventSubscriptionStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidEventSubscriptionStateFault.prototype);
  }
};
var ApplyMethod = {
  immediate: "immediate",
  pending_reboot: "pending-reboot"
};
var SourceType = {
  db_cluster: "db-cluster",
  db_cluster_snapshot: "db-cluster-snapshot",
  db_instance: "db-instance",
  db_parameter_group: "db-parameter-group",
  db_security_group: "db-security-group",
  db_snapshot: "db-snapshot"
};
var InvalidDBSecurityGroupStateFault = class _InvalidDBSecurityGroupStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidDBSecurityGroupStateFault");
  }
  name = "InvalidDBSecurityGroupStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidDBSecurityGroupStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidDBSecurityGroupStateFault.prototype);
  }
};
var SharedSnapshotQuotaExceededFault = class _SharedSnapshotQuotaExceededFault extends NeptuneServiceException {
  static {
    __name(this, "SharedSnapshotQuotaExceededFault");
  }
  name = "SharedSnapshotQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SharedSnapshotQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SharedSnapshotQuotaExceededFault.prototype);
  }
};
var CertificateNotFoundFault = class _CertificateNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "CertificateNotFoundFault");
  }
  name = "CertificateNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CertificateNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CertificateNotFoundFault.prototype);
  }
};
var DBUpgradeDependencyFailureFault = class _DBUpgradeDependencyFailureFault extends NeptuneServiceException {
  static {
    __name(this, "DBUpgradeDependencyFailureFault");
  }
  name = "DBUpgradeDependencyFailureFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBUpgradeDependencyFailureFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBUpgradeDependencyFailureFault.prototype);
  }
};
var SubnetAlreadyInUse = class _SubnetAlreadyInUse extends NeptuneServiceException {
  static {
    __name(this, "SubnetAlreadyInUse");
  }
  name = "SubnetAlreadyInUse";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SubnetAlreadyInUse",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SubnetAlreadyInUse.prototype);
  }
};
var DBClusterRoleNotFoundFault = class _DBClusterRoleNotFoundFault extends NeptuneServiceException {
  static {
    __name(this, "DBClusterRoleNotFoundFault");
  }
  name = "DBClusterRoleNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DBClusterRoleNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DBClusterRoleNotFoundFault.prototype);
  }
};
var InsufficientDBClusterCapacityFault = class _InsufficientDBClusterCapacityFault extends NeptuneServiceException {
  static {
    __name(this, "InsufficientDBClusterCapacityFault");
  }
  name = "InsufficientDBClusterCapacityFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InsufficientDBClusterCapacityFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InsufficientDBClusterCapacityFault.prototype);
  }
};
var InvalidDBSnapshotStateFault = class _InvalidDBSnapshotStateFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidDBSnapshotStateFault");
  }
  name = "InvalidDBSnapshotStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidDBSnapshotStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidDBSnapshotStateFault.prototype);
  }
};
var InvalidRestoreFault = class _InvalidRestoreFault extends NeptuneServiceException {
  static {
    __name(this, "InvalidRestoreFault");
  }
  name = "InvalidRestoreFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidRestoreFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidRestoreFault.prototype);
  }
};
var CreateDBInstanceMessageFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.TdeCredentialPassword && { TdeCredentialPassword: import_smithy_client.SENSITIVE_STRING }
}), "CreateDBInstanceMessageFilterSensitiveLog");
var ModifyDBInstanceMessageFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.TdeCredentialPassword && { TdeCredentialPassword: import_smithy_client.SENSITIVE_STRING }
}), "ModifyDBInstanceMessageFilterSensitiveLog");

// src/protocols/Aws_query.ts
var se_AddRoleToDBClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AddRoleToDBClusterMessage(input, context),
    [_A]: _ARTDBC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AddRoleToDBClusterCommand");
var se_AddSourceIdentifierToSubscriptionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AddSourceIdentifierToSubscriptionMessage(input, context),
    [_A]: _ASITS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AddSourceIdentifierToSubscriptionCommand");
var se_AddTagsToResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AddTagsToResourceMessage(input, context),
    [_A]: _ATTR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AddTagsToResourceCommand");
var se_ApplyPendingMaintenanceActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ApplyPendingMaintenanceActionMessage(input, context),
    [_A]: _APMA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ApplyPendingMaintenanceActionCommand");
var se_CopyDBClusterParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CopyDBClusterParameterGroupMessage(input, context),
    [_A]: _CDBCPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CopyDBClusterParameterGroupCommand");
var se_CopyDBClusterSnapshotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CopyDBClusterSnapshotMessage(input, context),
    [_A]: _CDBCS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CopyDBClusterSnapshotCommand");
var se_CopyDBParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CopyDBParameterGroupMessage(input, context),
    [_A]: _CDBPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CopyDBParameterGroupCommand");
var se_CreateDBClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateDBClusterMessage(input, context),
    [_A]: _CDBC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateDBClusterCommand");
var se_CreateDBClusterEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateDBClusterEndpointMessage(input, context),
    [_A]: _CDBCE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateDBClusterEndpointCommand");
var se_CreateDBClusterParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateDBClusterParameterGroupMessage(input, context),
    [_A]: _CDBCPGr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateDBClusterParameterGroupCommand");
var se_CreateDBClusterSnapshotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateDBClusterSnapshotMessage(input, context),
    [_A]: _CDBCSr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateDBClusterSnapshotCommand");
var se_CreateDBInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateDBInstanceMessage(input, context),
    [_A]: _CDBI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateDBInstanceCommand");
var se_CreateDBParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateDBParameterGroupMessage(input, context),
    [_A]: _CDBPGr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateDBParameterGroupCommand");
var se_CreateDBSubnetGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateDBSubnetGroupMessage(input, context),
    [_A]: _CDBSG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateDBSubnetGroupCommand");
var se_CreateEventSubscriptionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateEventSubscriptionMessage(input, context),
    [_A]: _CES,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateEventSubscriptionCommand");
var se_CreateGlobalClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateGlobalClusterMessage(input, context),
    [_A]: _CGC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateGlobalClusterCommand");
var se_DeleteDBClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteDBClusterMessage(input, context),
    [_A]: _DDBC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteDBClusterCommand");
var se_DeleteDBClusterEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteDBClusterEndpointMessage(input, context),
    [_A]: _DDBCE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteDBClusterEndpointCommand");
var se_DeleteDBClusterParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteDBClusterParameterGroupMessage(input, context),
    [_A]: _DDBCPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteDBClusterParameterGroupCommand");
var se_DeleteDBClusterSnapshotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteDBClusterSnapshotMessage(input, context),
    [_A]: _DDBCS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteDBClusterSnapshotCommand");
var se_DeleteDBInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteDBInstanceMessage(input, context),
    [_A]: _DDBI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteDBInstanceCommand");
var se_DeleteDBParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteDBParameterGroupMessage(input, context),
    [_A]: _DDBPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteDBParameterGroupCommand");
var se_DeleteDBSubnetGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteDBSubnetGroupMessage(input, context),
    [_A]: _DDBSG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteDBSubnetGroupCommand");
var se_DeleteEventSubscriptionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteEventSubscriptionMessage(input, context),
    [_A]: _DES,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteEventSubscriptionCommand");
var se_DeleteGlobalClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteGlobalClusterMessage(input, context),
    [_A]: _DGC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteGlobalClusterCommand");
var se_DescribeDBClusterEndpointsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDBClusterEndpointsMessage(input, context),
    [_A]: _DDBCEe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeDBClusterEndpointsCommand");
var se_DescribeDBClusterParameterGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDBClusterParameterGroupsMessage(input, context),
    [_A]: _DDBCPGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeDBClusterParameterGroupsCommand");
var se_DescribeDBClusterParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDBClusterParametersMessage(input, context),
    [_A]: _DDBCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeDBClusterParametersCommand");
var se_DescribeDBClustersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDBClustersMessage(input, context),
    [_A]: _DDBCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeDBClustersCommand");
var se_DescribeDBClusterSnapshotAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDBClusterSnapshotAttributesMessage(input, context),
    [_A]: _DDBCSA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeDBClusterSnapshotAttributesCommand");
var se_DescribeDBClusterSnapshotsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDBClusterSnapshotsMessage(input, context),
    [_A]: _DDBCSe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeDBClusterSnapshotsCommand");
var se_DescribeDBEngineVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDBEngineVersionsMessage(input, context),
    [_A]: _DDBEV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeDBEngineVersionsCommand");
var se_DescribeDBInstancesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDBInstancesMessage(input, context),
    [_A]: _DDBIe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeDBInstancesCommand");
var se_DescribeDBParameterGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDBParameterGroupsMessage(input, context),
    [_A]: _DDBPGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeDBParameterGroupsCommand");
var se_DescribeDBParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDBParametersMessage(input, context),
    [_A]: _DDBP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeDBParametersCommand");
var se_DescribeDBSubnetGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDBSubnetGroupsMessage(input, context),
    [_A]: _DDBSGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeDBSubnetGroupsCommand");
var se_DescribeEngineDefaultClusterParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeEngineDefaultClusterParametersMessage(input, context),
    [_A]: _DEDCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeEngineDefaultClusterParametersCommand");
var se_DescribeEngineDefaultParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeEngineDefaultParametersMessage(input, context),
    [_A]: _DEDP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeEngineDefaultParametersCommand");
var se_DescribeEventCategoriesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeEventCategoriesMessage(input, context),
    [_A]: _DEC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeEventCategoriesCommand");
var se_DescribeEventsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeEventsMessage(input, context),
    [_A]: _DE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeEventsCommand");
var se_DescribeEventSubscriptionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeEventSubscriptionsMessage(input, context),
    [_A]: _DESe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeEventSubscriptionsCommand");
var se_DescribeGlobalClustersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeGlobalClustersMessage(input, context),
    [_A]: _DGCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeGlobalClustersCommand");
var se_DescribeOrderableDBInstanceOptionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeOrderableDBInstanceOptionsMessage(input, context),
    [_A]: _DODBIO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeOrderableDBInstanceOptionsCommand");
var se_DescribePendingMaintenanceActionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribePendingMaintenanceActionsMessage(input, context),
    [_A]: _DPMA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribePendingMaintenanceActionsCommand");
var se_DescribeValidDBInstanceModificationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeValidDBInstanceModificationsMessage(input, context),
    [_A]: _DVDBIM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeValidDBInstanceModificationsCommand");
var se_FailoverDBClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_FailoverDBClusterMessage(input, context),
    [_A]: _FDBC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_FailoverDBClusterCommand");
var se_FailoverGlobalClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_FailoverGlobalClusterMessage(input, context),
    [_A]: _FGC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_FailoverGlobalClusterCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListTagsForResourceMessage(input, context),
    [_A]: _LTFR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ListTagsForResourceCommand");
var se_ModifyDBClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyDBClusterMessage(input, context),
    [_A]: _MDBC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyDBClusterCommand");
var se_ModifyDBClusterEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyDBClusterEndpointMessage(input, context),
    [_A]: _MDBCE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyDBClusterEndpointCommand");
var se_ModifyDBClusterParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyDBClusterParameterGroupMessage(input, context),
    [_A]: _MDBCPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyDBClusterParameterGroupCommand");
var se_ModifyDBClusterSnapshotAttributeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyDBClusterSnapshotAttributeMessage(input, context),
    [_A]: _MDBCSA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyDBClusterSnapshotAttributeCommand");
var se_ModifyDBInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyDBInstanceMessage(input, context),
    [_A]: _MDBI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyDBInstanceCommand");
var se_ModifyDBParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyDBParameterGroupMessage(input, context),
    [_A]: _MDBPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyDBParameterGroupCommand");
var se_ModifyDBSubnetGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyDBSubnetGroupMessage(input, context),
    [_A]: _MDBSG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyDBSubnetGroupCommand");
var se_ModifyEventSubscriptionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyEventSubscriptionMessage(input, context),
    [_A]: _MES,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyEventSubscriptionCommand");
var se_ModifyGlobalClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyGlobalClusterMessage(input, context),
    [_A]: _MGC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyGlobalClusterCommand");
var se_PromoteReadReplicaDBClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PromoteReadReplicaDBClusterMessage(input, context),
    [_A]: _PRRDBC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_PromoteReadReplicaDBClusterCommand");
var se_RebootDBInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RebootDBInstanceMessage(input, context),
    [_A]: _RDBI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RebootDBInstanceCommand");
var se_RemoveFromGlobalClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RemoveFromGlobalClusterMessage(input, context),
    [_A]: _RFGC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RemoveFromGlobalClusterCommand");
var se_RemoveRoleFromDBClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RemoveRoleFromDBClusterMessage(input, context),
    [_A]: _RRFDBC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RemoveRoleFromDBClusterCommand");
var se_RemoveSourceIdentifierFromSubscriptionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RemoveSourceIdentifierFromSubscriptionMessage(input, context),
    [_A]: _RSIFS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RemoveSourceIdentifierFromSubscriptionCommand");
var se_RemoveTagsFromResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RemoveTagsFromResourceMessage(input, context),
    [_A]: _RTFR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RemoveTagsFromResourceCommand");
var se_ResetDBClusterParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResetDBClusterParameterGroupMessage(input, context),
    [_A]: _RDBCPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ResetDBClusterParameterGroupCommand");
var se_ResetDBParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResetDBParameterGroupMessage(input, context),
    [_A]: _RDBPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ResetDBParameterGroupCommand");
var se_RestoreDBClusterFromSnapshotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RestoreDBClusterFromSnapshotMessage(input, context),
    [_A]: _RDBCFS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RestoreDBClusterFromSnapshotCommand");
var se_RestoreDBClusterToPointInTimeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RestoreDBClusterToPointInTimeMessage(input, context),
    [_A]: _RDBCTPIT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RestoreDBClusterToPointInTimeCommand");
var se_StartDBClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_StartDBClusterMessage(input, context),
    [_A]: _SDBC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_StartDBClusterCommand");
var se_StopDBClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_StopDBClusterMessage(input, context),
    [_A]: _SDBCt,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_StopDBClusterCommand");
var se_SwitchoverGlobalClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SwitchoverGlobalClusterMessage(input, context),
    [_A]: _SGC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SwitchoverGlobalClusterCommand");
var de_AddRoleToDBClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_AddRoleToDBClusterCommand");
var de_AddSourceIdentifierToSubscriptionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_AddSourceIdentifierToSubscriptionResult(data.AddSourceIdentifierToSubscriptionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_AddSourceIdentifierToSubscriptionCommand");
var de_AddTagsToResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_AddTagsToResourceCommand");
var de_ApplyPendingMaintenanceActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ApplyPendingMaintenanceActionResult(data.ApplyPendingMaintenanceActionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ApplyPendingMaintenanceActionCommand");
var de_CopyDBClusterParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CopyDBClusterParameterGroupResult(data.CopyDBClusterParameterGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CopyDBClusterParameterGroupCommand");
var de_CopyDBClusterSnapshotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CopyDBClusterSnapshotResult(data.CopyDBClusterSnapshotResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CopyDBClusterSnapshotCommand");
var de_CopyDBParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CopyDBParameterGroupResult(data.CopyDBParameterGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CopyDBParameterGroupCommand");
var de_CreateDBClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateDBClusterResult(data.CreateDBClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateDBClusterCommand");
var de_CreateDBClusterEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateDBClusterEndpointOutput(data.CreateDBClusterEndpointResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateDBClusterEndpointCommand");
var de_CreateDBClusterParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateDBClusterParameterGroupResult(data.CreateDBClusterParameterGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateDBClusterParameterGroupCommand");
var de_CreateDBClusterSnapshotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateDBClusterSnapshotResult(data.CreateDBClusterSnapshotResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateDBClusterSnapshotCommand");
var de_CreateDBInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateDBInstanceResult(data.CreateDBInstanceResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateDBInstanceCommand");
var de_CreateDBParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateDBParameterGroupResult(data.CreateDBParameterGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateDBParameterGroupCommand");
var de_CreateDBSubnetGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateDBSubnetGroupResult(data.CreateDBSubnetGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateDBSubnetGroupCommand");
var de_CreateEventSubscriptionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateEventSubscriptionResult(data.CreateEventSubscriptionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateEventSubscriptionCommand");
var de_CreateGlobalClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateGlobalClusterResult(data.CreateGlobalClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateGlobalClusterCommand");
var de_DeleteDBClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteDBClusterResult(data.DeleteDBClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteDBClusterCommand");
var de_DeleteDBClusterEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteDBClusterEndpointOutput(data.DeleteDBClusterEndpointResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteDBClusterEndpointCommand");
var de_DeleteDBClusterParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteDBClusterParameterGroupCommand");
var de_DeleteDBClusterSnapshotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteDBClusterSnapshotResult(data.DeleteDBClusterSnapshotResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteDBClusterSnapshotCommand");
var de_DeleteDBInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteDBInstanceResult(data.DeleteDBInstanceResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteDBInstanceCommand");
var de_DeleteDBParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteDBParameterGroupCommand");
var de_DeleteDBSubnetGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteDBSubnetGroupCommand");
var de_DeleteEventSubscriptionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteEventSubscriptionResult(data.DeleteEventSubscriptionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteEventSubscriptionCommand");
var de_DeleteGlobalClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteGlobalClusterResult(data.DeleteGlobalClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteGlobalClusterCommand");
var de_DescribeDBClusterEndpointsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBClusterEndpointMessage(data.DescribeDBClusterEndpointsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeDBClusterEndpointsCommand");
var de_DescribeDBClusterParameterGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBClusterParameterGroupsMessage(data.DescribeDBClusterParameterGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeDBClusterParameterGroupsCommand");
var de_DescribeDBClusterParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBClusterParameterGroupDetails(data.DescribeDBClusterParametersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeDBClusterParametersCommand");
var de_DescribeDBClustersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBClusterMessage(data.DescribeDBClustersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeDBClustersCommand");
var de_DescribeDBClusterSnapshotAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeDBClusterSnapshotAttributesResult(data.DescribeDBClusterSnapshotAttributesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeDBClusterSnapshotAttributesCommand");
var de_DescribeDBClusterSnapshotsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBClusterSnapshotMessage(data.DescribeDBClusterSnapshotsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeDBClusterSnapshotsCommand");
var de_DescribeDBEngineVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBEngineVersionMessage(data.DescribeDBEngineVersionsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeDBEngineVersionsCommand");
var de_DescribeDBInstancesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBInstanceMessage(data.DescribeDBInstancesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeDBInstancesCommand");
var de_DescribeDBParameterGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBParameterGroupsMessage(data.DescribeDBParameterGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeDBParameterGroupsCommand");
var de_DescribeDBParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBParameterGroupDetails(data.DescribeDBParametersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeDBParametersCommand");
var de_DescribeDBSubnetGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBSubnetGroupMessage(data.DescribeDBSubnetGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeDBSubnetGroupsCommand");
var de_DescribeEngineDefaultClusterParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeEngineDefaultClusterParametersResult(
    data.DescribeEngineDefaultClusterParametersResult,
    context
  );
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeEngineDefaultClusterParametersCommand");
var de_DescribeEngineDefaultParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeEngineDefaultParametersResult(data.DescribeEngineDefaultParametersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeEngineDefaultParametersCommand");
var de_DescribeEventCategoriesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_EventCategoriesMessage(data.DescribeEventCategoriesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeEventCategoriesCommand");
var de_DescribeEventsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_EventsMessage(data.DescribeEventsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeEventsCommand");
var de_DescribeEventSubscriptionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_EventSubscriptionsMessage(data.DescribeEventSubscriptionsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeEventSubscriptionsCommand");
var de_DescribeGlobalClustersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_GlobalClustersMessage(data.DescribeGlobalClustersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeGlobalClustersCommand");
var de_DescribeOrderableDBInstanceOptionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_OrderableDBInstanceOptionsMessage(data.DescribeOrderableDBInstanceOptionsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeOrderableDBInstanceOptionsCommand");
var de_DescribePendingMaintenanceActionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_PendingMaintenanceActionsMessage(data.DescribePendingMaintenanceActionsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribePendingMaintenanceActionsCommand");
var de_DescribeValidDBInstanceModificationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeValidDBInstanceModificationsResult(data.DescribeValidDBInstanceModificationsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeValidDBInstanceModificationsCommand");
var de_FailoverDBClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_FailoverDBClusterResult(data.FailoverDBClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_FailoverDBClusterCommand");
var de_FailoverGlobalClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_FailoverGlobalClusterResult(data.FailoverGlobalClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_FailoverGlobalClusterCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_TagListMessage(data.ListTagsForResourceResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ListTagsForResourceCommand");
var de_ModifyDBClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyDBClusterResult(data.ModifyDBClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyDBClusterCommand");
var de_ModifyDBClusterEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyDBClusterEndpointOutput(data.ModifyDBClusterEndpointResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyDBClusterEndpointCommand");
var de_ModifyDBClusterParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBClusterParameterGroupNameMessage(data.ModifyDBClusterParameterGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyDBClusterParameterGroupCommand");
var de_ModifyDBClusterSnapshotAttributeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyDBClusterSnapshotAttributeResult(data.ModifyDBClusterSnapshotAttributeResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyDBClusterSnapshotAttributeCommand");
var de_ModifyDBInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyDBInstanceResult(data.ModifyDBInstanceResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyDBInstanceCommand");
var de_ModifyDBParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBParameterGroupNameMessage(data.ModifyDBParameterGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyDBParameterGroupCommand");
var de_ModifyDBSubnetGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyDBSubnetGroupResult(data.ModifyDBSubnetGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyDBSubnetGroupCommand");
var de_ModifyEventSubscriptionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyEventSubscriptionResult(data.ModifyEventSubscriptionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyEventSubscriptionCommand");
var de_ModifyGlobalClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyGlobalClusterResult(data.ModifyGlobalClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyGlobalClusterCommand");
var de_PromoteReadReplicaDBClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_PromoteReadReplicaDBClusterResult(data.PromoteReadReplicaDBClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_PromoteReadReplicaDBClusterCommand");
var de_RebootDBInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RebootDBInstanceResult(data.RebootDBInstanceResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RebootDBInstanceCommand");
var de_RemoveFromGlobalClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RemoveFromGlobalClusterResult(data.RemoveFromGlobalClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RemoveFromGlobalClusterCommand");
var de_RemoveRoleFromDBClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_RemoveRoleFromDBClusterCommand");
var de_RemoveSourceIdentifierFromSubscriptionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RemoveSourceIdentifierFromSubscriptionResult(
    data.RemoveSourceIdentifierFromSubscriptionResult,
    context
  );
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RemoveSourceIdentifierFromSubscriptionCommand");
var de_RemoveTagsFromResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_RemoveTagsFromResourceCommand");
var de_ResetDBClusterParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBClusterParameterGroupNameMessage(data.ResetDBClusterParameterGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ResetDBClusterParameterGroupCommand");
var de_ResetDBParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DBParameterGroupNameMessage(data.ResetDBParameterGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ResetDBParameterGroupCommand");
var de_RestoreDBClusterFromSnapshotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RestoreDBClusterFromSnapshotResult(data.RestoreDBClusterFromSnapshotResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RestoreDBClusterFromSnapshotCommand");
var de_RestoreDBClusterToPointInTimeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RestoreDBClusterToPointInTimeResult(data.RestoreDBClusterToPointInTimeResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RestoreDBClusterToPointInTimeCommand");
var de_StartDBClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_StartDBClusterResult(data.StartDBClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_StartDBClusterCommand");
var de_StopDBClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_StopDBClusterResult(data.StopDBClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_StopDBClusterCommand");
var de_SwitchoverGlobalClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_SwitchoverGlobalClusterResult(data.SwitchoverGlobalClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_SwitchoverGlobalClusterCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseXmlErrorBody)(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DBClusterNotFoundFault":
    case "com.amazonaws.neptune#DBClusterNotFoundFault":
      throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
    case "DBClusterRoleAlreadyExists":
    case "com.amazonaws.neptune#DBClusterRoleAlreadyExistsFault":
      throw await de_DBClusterRoleAlreadyExistsFaultRes(parsedOutput, context);
    case "DBClusterRoleQuotaExceeded":
    case "com.amazonaws.neptune#DBClusterRoleQuotaExceededFault":
      throw await de_DBClusterRoleQuotaExceededFaultRes(parsedOutput, context);
    case "InvalidDBClusterStateFault":
    case "com.amazonaws.neptune#InvalidDBClusterStateFault":
      throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
    case "SourceNotFound":
    case "com.amazonaws.neptune#SourceNotFoundFault":
      throw await de_SourceNotFoundFaultRes(parsedOutput, context);
    case "SubscriptionNotFound":
    case "com.amazonaws.neptune#SubscriptionNotFoundFault":
      throw await de_SubscriptionNotFoundFaultRes(parsedOutput, context);
    case "DBInstanceNotFound":
    case "com.amazonaws.neptune#DBInstanceNotFoundFault":
      throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
    case "DBSnapshotNotFound":
    case "com.amazonaws.neptune#DBSnapshotNotFoundFault":
      throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
    case "ResourceNotFoundFault":
    case "com.amazonaws.neptune#ResourceNotFoundFault":
      throw await de_ResourceNotFoundFaultRes(parsedOutput, context);
    case "DBParameterGroupAlreadyExists":
    case "com.amazonaws.neptune#DBParameterGroupAlreadyExistsFault":
      throw await de_DBParameterGroupAlreadyExistsFaultRes(parsedOutput, context);
    case "DBParameterGroupNotFound":
    case "com.amazonaws.neptune#DBParameterGroupNotFoundFault":
      throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
    case "DBParameterGroupQuotaExceeded":
    case "com.amazonaws.neptune#DBParameterGroupQuotaExceededFault":
      throw await de_DBParameterGroupQuotaExceededFaultRes(parsedOutput, context);
    case "DBClusterSnapshotAlreadyExistsFault":
    case "com.amazonaws.neptune#DBClusterSnapshotAlreadyExistsFault":
      throw await de_DBClusterSnapshotAlreadyExistsFaultRes(parsedOutput, context);
    case "DBClusterSnapshotNotFoundFault":
    case "com.amazonaws.neptune#DBClusterSnapshotNotFoundFault":
      throw await de_DBClusterSnapshotNotFoundFaultRes(parsedOutput, context);
    case "InvalidDBClusterSnapshotStateFault":
    case "com.amazonaws.neptune#InvalidDBClusterSnapshotStateFault":
      throw await de_InvalidDBClusterSnapshotStateFaultRes(parsedOutput, context);
    case "KMSKeyNotAccessibleFault":
    case "com.amazonaws.neptune#KMSKeyNotAccessibleFault":
      throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
    case "SnapshotQuotaExceeded":
    case "com.amazonaws.neptune#SnapshotQuotaExceededFault":
      throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
    case "DBClusterAlreadyExistsFault":
    case "com.amazonaws.neptune#DBClusterAlreadyExistsFault":
      throw await de_DBClusterAlreadyExistsFaultRes(parsedOutput, context);
    case "DBClusterParameterGroupNotFound":
    case "com.amazonaws.neptune#DBClusterParameterGroupNotFoundFault":
      throw await de_DBClusterParameterGroupNotFoundFaultRes(parsedOutput, context);
    case "DBClusterQuotaExceededFault":
    case "com.amazonaws.neptune#DBClusterQuotaExceededFault":
      throw await de_DBClusterQuotaExceededFaultRes(parsedOutput, context);
    case "DBSubnetGroupDoesNotCoverEnoughAZs":
    case "com.amazonaws.neptune#DBSubnetGroupDoesNotCoverEnoughAZs":
      throw await de_DBSubnetGroupDoesNotCoverEnoughAZsRes(parsedOutput, context);
    case "DBSubnetGroupNotFoundFault":
    case "com.amazonaws.neptune#DBSubnetGroupNotFoundFault":
      throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
    case "GlobalClusterNotFoundFault":
    case "com.amazonaws.neptune#GlobalClusterNotFoundFault":
      throw await de_GlobalClusterNotFoundFaultRes(parsedOutput, context);
    case "InsufficientStorageClusterCapacity":
    case "com.amazonaws.neptune#InsufficientStorageClusterCapacityFault":
      throw await de_InsufficientStorageClusterCapacityFaultRes(parsedOutput, context);
    case "InvalidDBInstanceState":
    case "com.amazonaws.neptune#InvalidDBInstanceStateFault":
      throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
    case "InvalidDBSubnetGroupStateFault":
    case "com.amazonaws.neptune#InvalidDBSubnetGroupStateFault":
      throw await de_InvalidDBSubnetGroupStateFaultRes(parsedOutput, context);
    case "InvalidGlobalClusterStateFault":
    case "com.amazonaws.neptune#InvalidGlobalClusterStateFault":
      throw await de_InvalidGlobalClusterStateFaultRes(parsedOutput, context);
    case "InvalidSubnet":
    case "com.amazonaws.neptune#InvalidSubnet":
      throw await de_InvalidSubnetRes(parsedOutput, context);
    case "InvalidVPCNetworkStateFault":
    case "com.amazonaws.neptune#InvalidVPCNetworkStateFault":
      throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
    case "StorageQuotaExceeded":
    case "com.amazonaws.neptune#StorageQuotaExceededFault":
      throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
    case "DBClusterEndpointAlreadyExistsFault":
    case "com.amazonaws.neptune#DBClusterEndpointAlreadyExistsFault":
      throw await de_DBClusterEndpointAlreadyExistsFaultRes(parsedOutput, context);
    case "DBClusterEndpointQuotaExceededFault":
    case "com.amazonaws.neptune#DBClusterEndpointQuotaExceededFault":
      throw await de_DBClusterEndpointQuotaExceededFaultRes(parsedOutput, context);
    case "AuthorizationNotFound":
    case "com.amazonaws.neptune#AuthorizationNotFoundFault":
      throw await de_AuthorizationNotFoundFaultRes(parsedOutput, context);
    case "DBInstanceAlreadyExists":
    case "com.amazonaws.neptune#DBInstanceAlreadyExistsFault":
      throw await de_DBInstanceAlreadyExistsFaultRes(parsedOutput, context);
    case "DBSecurityGroupNotFound":
    case "com.amazonaws.neptune#DBSecurityGroupNotFoundFault":
      throw await de_DBSecurityGroupNotFoundFaultRes(parsedOutput, context);
    case "DomainNotFoundFault":
    case "com.amazonaws.neptune#DomainNotFoundFault":
      throw await de_DomainNotFoundFaultRes(parsedOutput, context);
    case "InstanceQuotaExceeded":
    case "com.amazonaws.neptune#InstanceQuotaExceededFault":
      throw await de_InstanceQuotaExceededFaultRes(parsedOutput, context);
    case "InsufficientDBInstanceCapacity":
    case "com.amazonaws.neptune#InsufficientDBInstanceCapacityFault":
      throw await de_InsufficientDBInstanceCapacityFaultRes(parsedOutput, context);
    case "OptionGroupNotFoundFault":
    case "com.amazonaws.neptune#OptionGroupNotFoundFault":
      throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
    case "ProvisionedIopsNotAvailableInAZFault":
    case "com.amazonaws.neptune#ProvisionedIopsNotAvailableInAZFault":
      throw await de_ProvisionedIopsNotAvailableInAZFaultRes(parsedOutput, context);
    case "StorageTypeNotSupported":
    case "com.amazonaws.neptune#StorageTypeNotSupportedFault":
      throw await de_StorageTypeNotSupportedFaultRes(parsedOutput, context);
    case "DBSubnetGroupAlreadyExists":
    case "com.amazonaws.neptune#DBSubnetGroupAlreadyExistsFault":
      throw await de_DBSubnetGroupAlreadyExistsFaultRes(parsedOutput, context);
    case "DBSubnetGroupQuotaExceeded":
    case "com.amazonaws.neptune#DBSubnetGroupQuotaExceededFault":
      throw await de_DBSubnetGroupQuotaExceededFaultRes(parsedOutput, context);
    case "DBSubnetQuotaExceededFault":
    case "com.amazonaws.neptune#DBSubnetQuotaExceededFault":
      throw await de_DBSubnetQuotaExceededFaultRes(parsedOutput, context);
    case "EventSubscriptionQuotaExceeded":
    case "com.amazonaws.neptune#EventSubscriptionQuotaExceededFault":
      throw await de_EventSubscriptionQuotaExceededFaultRes(parsedOutput, context);
    case "SNSInvalidTopic":
    case "com.amazonaws.neptune#SNSInvalidTopicFault":
      throw await de_SNSInvalidTopicFaultRes(parsedOutput, context);
    case "SNSNoAuthorization":
    case "com.amazonaws.neptune#SNSNoAuthorizationFault":
      throw await de_SNSNoAuthorizationFaultRes(parsedOutput, context);
    case "SNSTopicArnNotFound":
    case "com.amazonaws.neptune#SNSTopicArnNotFoundFault":
      throw await de_SNSTopicArnNotFoundFaultRes(parsedOutput, context);
    case "SubscriptionAlreadyExist":
    case "com.amazonaws.neptune#SubscriptionAlreadyExistFault":
      throw await de_SubscriptionAlreadyExistFaultRes(parsedOutput, context);
    case "SubscriptionCategoryNotFound":
    case "com.amazonaws.neptune#SubscriptionCategoryNotFoundFault":
      throw await de_SubscriptionCategoryNotFoundFaultRes(parsedOutput, context);
    case "GlobalClusterAlreadyExistsFault":
    case "com.amazonaws.neptune#GlobalClusterAlreadyExistsFault":
      throw await de_GlobalClusterAlreadyExistsFaultRes(parsedOutput, context);
    case "GlobalClusterQuotaExceededFault":
    case "com.amazonaws.neptune#GlobalClusterQuotaExceededFault":
      throw await de_GlobalClusterQuotaExceededFaultRes(parsedOutput, context);
    case "DBClusterEndpointNotFoundFault":
    case "com.amazonaws.neptune#DBClusterEndpointNotFoundFault":
      throw await de_DBClusterEndpointNotFoundFaultRes(parsedOutput, context);
    case "InvalidDBClusterEndpointStateFault":
    case "com.amazonaws.neptune#InvalidDBClusterEndpointStateFault":
      throw await de_InvalidDBClusterEndpointStateFaultRes(parsedOutput, context);
    case "InvalidDBParameterGroupState":
    case "com.amazonaws.neptune#InvalidDBParameterGroupStateFault":
      throw await de_InvalidDBParameterGroupStateFaultRes(parsedOutput, context);
    case "DBSnapshotAlreadyExists":
    case "com.amazonaws.neptune#DBSnapshotAlreadyExistsFault":
      throw await de_DBSnapshotAlreadyExistsFaultRes(parsedOutput, context);
    case "InvalidDBSubnetStateFault":
    case "com.amazonaws.neptune#InvalidDBSubnetStateFault":
      throw await de_InvalidDBSubnetStateFaultRes(parsedOutput, context);
    case "InvalidEventSubscriptionState":
    case "com.amazonaws.neptune#InvalidEventSubscriptionStateFault":
      throw await de_InvalidEventSubscriptionStateFaultRes(parsedOutput, context);
    case "InvalidDBSecurityGroupState":
    case "com.amazonaws.neptune#InvalidDBSecurityGroupStateFault":
      throw await de_InvalidDBSecurityGroupStateFaultRes(parsedOutput, context);
    case "SharedSnapshotQuotaExceeded":
    case "com.amazonaws.neptune#SharedSnapshotQuotaExceededFault":
      throw await de_SharedSnapshotQuotaExceededFaultRes(parsedOutput, context);
    case "CertificateNotFound":
    case "com.amazonaws.neptune#CertificateNotFoundFault":
      throw await de_CertificateNotFoundFaultRes(parsedOutput, context);
    case "DBUpgradeDependencyFailure":
    case "com.amazonaws.neptune#DBUpgradeDependencyFailureFault":
      throw await de_DBUpgradeDependencyFailureFaultRes(parsedOutput, context);
    case "SubnetAlreadyInUse":
    case "com.amazonaws.neptune#SubnetAlreadyInUse":
      throw await de_SubnetAlreadyInUseRes(parsedOutput, context);
    case "DBClusterRoleNotFound":
    case "com.amazonaws.neptune#DBClusterRoleNotFoundFault":
      throw await de_DBClusterRoleNotFoundFaultRes(parsedOutput, context);
    case "InsufficientDBClusterCapacityFault":
    case "com.amazonaws.neptune#InsufficientDBClusterCapacityFault":
      throw await de_InsufficientDBClusterCapacityFaultRes(parsedOutput, context);
    case "InvalidDBSnapshotState":
    case "com.amazonaws.neptune#InvalidDBSnapshotStateFault":
      throw await de_InvalidDBSnapshotStateFaultRes(parsedOutput, context);
    case "InvalidRestoreFault":
    case "com.amazonaws.neptune#InvalidRestoreFault":
      throw await de_InvalidRestoreFaultRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_CommandError");
var de_AuthorizationNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_AuthorizationNotFoundFault(body.Error, context);
  const exception = new AuthorizationNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_AuthorizationNotFoundFaultRes");
var de_CertificateNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CertificateNotFoundFault(body.Error, context);
  const exception = new CertificateNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CertificateNotFoundFaultRes");
var de_DBClusterAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterAlreadyExistsFault(body.Error, context);
  const exception = new DBClusterAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterAlreadyExistsFaultRes");
var de_DBClusterEndpointAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterEndpointAlreadyExistsFault(body.Error, context);
  const exception = new DBClusterEndpointAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterEndpointAlreadyExistsFaultRes");
var de_DBClusterEndpointNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterEndpointNotFoundFault(body.Error, context);
  const exception = new DBClusterEndpointNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterEndpointNotFoundFaultRes");
var de_DBClusterEndpointQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterEndpointQuotaExceededFault(body.Error, context);
  const exception = new DBClusterEndpointQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterEndpointQuotaExceededFaultRes");
var de_DBClusterNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterNotFoundFault(body.Error, context);
  const exception = new DBClusterNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterNotFoundFaultRes");
var de_DBClusterParameterGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterParameterGroupNotFoundFault(body.Error, context);
  const exception = new DBClusterParameterGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterParameterGroupNotFoundFaultRes");
var de_DBClusterQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterQuotaExceededFault(body.Error, context);
  const exception = new DBClusterQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterQuotaExceededFaultRes");
var de_DBClusterRoleAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterRoleAlreadyExistsFault(body.Error, context);
  const exception = new DBClusterRoleAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterRoleAlreadyExistsFaultRes");
var de_DBClusterRoleNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterRoleNotFoundFault(body.Error, context);
  const exception = new DBClusterRoleNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterRoleNotFoundFaultRes");
var de_DBClusterRoleQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterRoleQuotaExceededFault(body.Error, context);
  const exception = new DBClusterRoleQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterRoleQuotaExceededFaultRes");
var de_DBClusterSnapshotAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterSnapshotAlreadyExistsFault(body.Error, context);
  const exception = new DBClusterSnapshotAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterSnapshotAlreadyExistsFaultRes");
var de_DBClusterSnapshotNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBClusterSnapshotNotFoundFault(body.Error, context);
  const exception = new DBClusterSnapshotNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBClusterSnapshotNotFoundFaultRes");
var de_DBInstanceAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBInstanceAlreadyExistsFault(body.Error, context);
  const exception = new DBInstanceAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBInstanceAlreadyExistsFaultRes");
var de_DBInstanceNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBInstanceNotFoundFault(body.Error, context);
  const exception = new DBInstanceNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBInstanceNotFoundFaultRes");
var de_DBParameterGroupAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBParameterGroupAlreadyExistsFault(body.Error, context);
  const exception = new DBParameterGroupAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBParameterGroupAlreadyExistsFaultRes");
var de_DBParameterGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBParameterGroupNotFoundFault(body.Error, context);
  const exception = new DBParameterGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBParameterGroupNotFoundFaultRes");
var de_DBParameterGroupQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBParameterGroupQuotaExceededFault(body.Error, context);
  const exception = new DBParameterGroupQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBParameterGroupQuotaExceededFaultRes");
var de_DBSecurityGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBSecurityGroupNotFoundFault(body.Error, context);
  const exception = new DBSecurityGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBSecurityGroupNotFoundFaultRes");
var de_DBSnapshotAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBSnapshotAlreadyExistsFault(body.Error, context);
  const exception = new DBSnapshotAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBSnapshotAlreadyExistsFaultRes");
var de_DBSnapshotNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBSnapshotNotFoundFault(body.Error, context);
  const exception = new DBSnapshotNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBSnapshotNotFoundFaultRes");
var de_DBSubnetGroupAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBSubnetGroupAlreadyExistsFault(body.Error, context);
  const exception = new DBSubnetGroupAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBSubnetGroupAlreadyExistsFaultRes");
var de_DBSubnetGroupDoesNotCoverEnoughAZsRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBSubnetGroupDoesNotCoverEnoughAZs(body.Error, context);
  const exception = new DBSubnetGroupDoesNotCoverEnoughAZs({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBSubnetGroupDoesNotCoverEnoughAZsRes");
var de_DBSubnetGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBSubnetGroupNotFoundFault(body.Error, context);
  const exception = new DBSubnetGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBSubnetGroupNotFoundFaultRes");
var de_DBSubnetGroupQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBSubnetGroupQuotaExceededFault(body.Error, context);
  const exception = new DBSubnetGroupQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBSubnetGroupQuotaExceededFaultRes");
var de_DBSubnetQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBSubnetQuotaExceededFault(body.Error, context);
  const exception = new DBSubnetQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBSubnetQuotaExceededFaultRes");
var de_DBUpgradeDependencyFailureFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DBUpgradeDependencyFailureFault(body.Error, context);
  const exception = new DBUpgradeDependencyFailureFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DBUpgradeDependencyFailureFaultRes");
var de_DomainNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DomainNotFoundFault(body.Error, context);
  const exception = new DomainNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DomainNotFoundFaultRes");
var de_EventSubscriptionQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_EventSubscriptionQuotaExceededFault(body.Error, context);
  const exception = new EventSubscriptionQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_EventSubscriptionQuotaExceededFaultRes");
var de_GlobalClusterAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_GlobalClusterAlreadyExistsFault(body.Error, context);
  const exception = new GlobalClusterAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_GlobalClusterAlreadyExistsFaultRes");
var de_GlobalClusterNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_GlobalClusterNotFoundFault(body.Error, context);
  const exception = new GlobalClusterNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_GlobalClusterNotFoundFaultRes");
var de_GlobalClusterQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_GlobalClusterQuotaExceededFault(body.Error, context);
  const exception = new GlobalClusterQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_GlobalClusterQuotaExceededFaultRes");
var de_InstanceQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InstanceQuotaExceededFault(body.Error, context);
  const exception = new InstanceQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InstanceQuotaExceededFaultRes");
var de_InsufficientDBClusterCapacityFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InsufficientDBClusterCapacityFault(body.Error, context);
  const exception = new InsufficientDBClusterCapacityFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InsufficientDBClusterCapacityFaultRes");
var de_InsufficientDBInstanceCapacityFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InsufficientDBInstanceCapacityFault(body.Error, context);
  const exception = new InsufficientDBInstanceCapacityFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InsufficientDBInstanceCapacityFaultRes");
var de_InsufficientStorageClusterCapacityFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InsufficientStorageClusterCapacityFault(body.Error, context);
  const exception = new InsufficientStorageClusterCapacityFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InsufficientStorageClusterCapacityFaultRes");
var de_InvalidDBClusterEndpointStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidDBClusterEndpointStateFault(body.Error, context);
  const exception = new InvalidDBClusterEndpointStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidDBClusterEndpointStateFaultRes");
var de_InvalidDBClusterSnapshotStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidDBClusterSnapshotStateFault(body.Error, context);
  const exception = new InvalidDBClusterSnapshotStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidDBClusterSnapshotStateFaultRes");
var de_InvalidDBClusterStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidDBClusterStateFault(body.Error, context);
  const exception = new InvalidDBClusterStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidDBClusterStateFaultRes");
var de_InvalidDBInstanceStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidDBInstanceStateFault(body.Error, context);
  const exception = new InvalidDBInstanceStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidDBInstanceStateFaultRes");
var de_InvalidDBParameterGroupStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidDBParameterGroupStateFault(body.Error, context);
  const exception = new InvalidDBParameterGroupStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidDBParameterGroupStateFaultRes");
var de_InvalidDBSecurityGroupStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidDBSecurityGroupStateFault(body.Error, context);
  const exception = new InvalidDBSecurityGroupStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidDBSecurityGroupStateFaultRes");
var de_InvalidDBSnapshotStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidDBSnapshotStateFault(body.Error, context);
  const exception = new InvalidDBSnapshotStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidDBSnapshotStateFaultRes");
var de_InvalidDBSubnetGroupStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidDBSubnetGroupStateFault(body.Error, context);
  const exception = new InvalidDBSubnetGroupStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidDBSubnetGroupStateFaultRes");
var de_InvalidDBSubnetStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidDBSubnetStateFault(body.Error, context);
  const exception = new InvalidDBSubnetStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidDBSubnetStateFaultRes");
var de_InvalidEventSubscriptionStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidEventSubscriptionStateFault(body.Error, context);
  const exception = new InvalidEventSubscriptionStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidEventSubscriptionStateFaultRes");
var de_InvalidGlobalClusterStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidGlobalClusterStateFault(body.Error, context);
  const exception = new InvalidGlobalClusterStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidGlobalClusterStateFaultRes");
var de_InvalidRestoreFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidRestoreFault(body.Error, context);
  const exception = new InvalidRestoreFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidRestoreFaultRes");
var de_InvalidSubnetRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidSubnet(body.Error, context);
  const exception = new InvalidSubnet({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidSubnetRes");
var de_InvalidVPCNetworkStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidVPCNetworkStateFault(body.Error, context);
  const exception = new InvalidVPCNetworkStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidVPCNetworkStateFaultRes");
var de_KMSKeyNotAccessibleFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_KMSKeyNotAccessibleFault(body.Error, context);
  const exception = new KMSKeyNotAccessibleFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_KMSKeyNotAccessibleFaultRes");
var de_OptionGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_OptionGroupNotFoundFault(body.Error, context);
  const exception = new OptionGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_OptionGroupNotFoundFaultRes");
var de_ProvisionedIopsNotAvailableInAZFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ProvisionedIopsNotAvailableInAZFault(body.Error, context);
  const exception = new ProvisionedIopsNotAvailableInAZFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ProvisionedIopsNotAvailableInAZFaultRes");
var de_ResourceNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ResourceNotFoundFault(body.Error, context);
  const exception = new ResourceNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ResourceNotFoundFaultRes");
var de_SharedSnapshotQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SharedSnapshotQuotaExceededFault(body.Error, context);
  const exception = new SharedSnapshotQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SharedSnapshotQuotaExceededFaultRes");
var de_SnapshotQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SnapshotQuotaExceededFault(body.Error, context);
  const exception = new SnapshotQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SnapshotQuotaExceededFaultRes");
var de_SNSInvalidTopicFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SNSInvalidTopicFault(body.Error, context);
  const exception = new SNSInvalidTopicFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SNSInvalidTopicFaultRes");
var de_SNSNoAuthorizationFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SNSNoAuthorizationFault(body.Error, context);
  const exception = new SNSNoAuthorizationFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SNSNoAuthorizationFaultRes");
var de_SNSTopicArnNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SNSTopicArnNotFoundFault(body.Error, context);
  const exception = new SNSTopicArnNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SNSTopicArnNotFoundFaultRes");
var de_SourceNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SourceNotFoundFault(body.Error, context);
  const exception = new SourceNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SourceNotFoundFaultRes");
var de_StorageQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_StorageQuotaExceededFault(body.Error, context);
  const exception = new StorageQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_StorageQuotaExceededFaultRes");
var de_StorageTypeNotSupportedFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_StorageTypeNotSupportedFault(body.Error, context);
  const exception = new StorageTypeNotSupportedFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_StorageTypeNotSupportedFaultRes");
var de_SubnetAlreadyInUseRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SubnetAlreadyInUse(body.Error, context);
  const exception = new SubnetAlreadyInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SubnetAlreadyInUseRes");
var de_SubscriptionAlreadyExistFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SubscriptionAlreadyExistFault(body.Error, context);
  const exception = new SubscriptionAlreadyExistFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SubscriptionAlreadyExistFaultRes");
var de_SubscriptionCategoryNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SubscriptionCategoryNotFoundFault(body.Error, context);
  const exception = new SubscriptionCategoryNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SubscriptionCategoryNotFoundFaultRes");
var de_SubscriptionNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SubscriptionNotFoundFault(body.Error, context);
  const exception = new SubscriptionNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SubscriptionNotFoundFaultRes");
var se_AddRoleToDBClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_RA] != null) {
    entries[_RA] = input[_RA];
  }
  if (input[_FN] != null) {
    entries[_FN] = input[_FN];
  }
  return entries;
}, "se_AddRoleToDBClusterMessage");
var se_AddSourceIdentifierToSubscriptionMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_SI] != null) {
    entries[_SI] = input[_SI];
  }
  return entries;
}, "se_AddSourceIdentifierToSubscriptionMessage");
var se_AddTagsToResourceMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_AddTagsToResourceMessage");
var se_ApplyPendingMaintenanceActionMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RI] != null) {
    entries[_RI] = input[_RI];
  }
  if (input[_AA] != null) {
    entries[_AA] = input[_AA];
  }
  if (input[_OIT] != null) {
    entries[_OIT] = input[_OIT];
  }
  return entries;
}, "se_ApplyPendingMaintenanceActionMessage");
var se_AttributeValueList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AttributeValue.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AttributeValueList");
var se_AvailabilityZones = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AvailabilityZone.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AvailabilityZones");
var se_CloudwatchLogsExportConfiguration = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_ELT] != null) {
    const memberEntries = se_LogTypeList(input[_ELT], context);
    if (input[_ELT]?.length === 0) {
      entries.EnableLogTypes = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableLogTypes.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DLT] != null) {
    const memberEntries = se_LogTypeList(input[_DLT], context);
    if (input[_DLT]?.length === 0) {
      entries.DisableLogTypes = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisableLogTypes.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CloudwatchLogsExportConfiguration");
var se_CopyDBClusterParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SDBCPGI] != null) {
    entries[_SDBCPGI] = input[_SDBCPGI];
  }
  if (input[_TDBCPGI] != null) {
    entries[_TDBCPGI] = input[_TDBCPGI];
  }
  if (input[_TDBCPGD] != null) {
    entries[_TDBCPGD] = input[_TDBCPGD];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CopyDBClusterParameterGroupMessage");
var se_CopyDBClusterSnapshotMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SDBCSI] != null) {
    entries[_SDBCSI] = input[_SDBCSI];
  }
  if (input[_TDBCSI] != null) {
    entries[_TDBCSI] = input[_TDBCSI];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_PSU] != null) {
    entries[_PSU] = input[_PSU];
  }
  if (input[_CT] != null) {
    entries[_CT] = input[_CT];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CopyDBClusterSnapshotMessage");
var se_CopyDBParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SDBPGI] != null) {
    entries[_SDBPGI] = input[_SDBPGI];
  }
  if (input[_TDBPGI] != null) {
    entries[_TDBPGI] = input[_TDBPGI];
  }
  if (input[_TDBPGD] != null) {
    entries[_TDBPGD] = input[_TDBPGD];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CopyDBParameterGroupMessage");
var se_CreateDBClusterEndpointMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_DBCEI] != null) {
    entries[_DBCEI] = input[_DBCEI];
  }
  if (input[_ET] != null) {
    entries[_ET] = input[_ET];
  }
  if (input[_SM] != null) {
    const memberEntries = se_StringList(input[_SM], context);
    if (input[_SM]?.length === 0) {
      entries.StaticMembers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `StaticMembers.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EM] != null) {
    const memberEntries = se_StringList(input[_EM], context);
    if (input[_EM]?.length === 0) {
      entries.ExcludedMembers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludedMembers.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateDBClusterEndpointMessage");
var se_CreateDBClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_AZ] != null) {
    const memberEntries = se_AvailabilityZones(input[_AZ], context);
    if (input[_AZ]?.length === 0) {
      entries.AvailabilityZones = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZones.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_BRP] != null) {
    entries[_BRP] = input[_BRP];
  }
  if (input[_CSN] != null) {
    entries[_CSN] = input[_CSN];
  }
  if (input[_CTTS] != null) {
    entries[_CTTS] = input[_CTTS];
  }
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_DBCPGN] != null) {
    entries[_DBCPGN] = input[_DBCPGN];
  }
  if (input[_VSGI] != null) {
    const memberEntries = se_VpcSecurityGroupIdList(input[_VSGI], context);
    if (input[_VSGI]?.length === 0) {
      entries.VpcSecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcSecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DBSGN] != null) {
    entries[_DBSGN] = input[_DBSGN];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_MU] != null) {
    entries[_MU] = input[_MU];
  }
  if (input[_MUP] != null) {
    entries[_MUP] = input[_MUP];
  }
  if (input[_OGN] != null) {
    entries[_OGN] = input[_OGN];
  }
  if (input[_PBW] != null) {
    entries[_PBW] = input[_PBW];
  }
  if (input[_PMW] != null) {
    entries[_PMW] = input[_PMW];
  }
  if (input[_RSI] != null) {
    entries[_RSI] = input[_RSI];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SE] != null) {
    entries[_SE] = input[_SE];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_PSU] != null) {
    entries[_PSU] = input[_PSU];
  }
  if (input[_EIAMDA] != null) {
    entries[_EIAMDA] = input[_EIAMDA];
  }
  if (input[_ECLE] != null) {
    const memberEntries = se_LogTypeList(input[_ECLE], context);
    if (input[_ECLE]?.length === 0) {
      entries.EnableCloudwatchLogsExports = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableCloudwatchLogsExports.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DP] != null) {
    entries[_DP] = input[_DP];
  }
  if (input[_SVSC] != null) {
    const memberEntries = se_ServerlessV2ScalingConfiguration(input[_SVSC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServerlessV2ScalingConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_GCI] != null) {
    entries[_GCI] = input[_GCI];
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  return entries;
}, "se_CreateDBClusterMessage");
var se_CreateDBClusterParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCPGN] != null) {
    entries[_DBCPGN] = input[_DBCPGN];
  }
  if (input[_DBPGF] != null) {
    entries[_DBPGF] = input[_DBPGF];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateDBClusterParameterGroupMessage");
var se_CreateDBClusterSnapshotMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCSI] != null) {
    entries[_DBCSI] = input[_DBCSI];
  }
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateDBClusterSnapshotMessage");
var se_CreateDBInstanceMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBN] != null) {
    entries[_DBN] = input[_DBN];
  }
  if (input[_DBII] != null) {
    entries[_DBII] = input[_DBII];
  }
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_DBIC] != null) {
    entries[_DBIC] = input[_DBIC];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_MU] != null) {
    entries[_MU] = input[_MU];
  }
  if (input[_MUP] != null) {
    entries[_MUP] = input[_MUP];
  }
  if (input[_DBSG] != null) {
    const memberEntries = se_DBSecurityGroupNameList(input[_DBSG], context);
    if (input[_DBSG]?.length === 0) {
      entries.DBSecurityGroups = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DBSecurityGroups.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VSGI] != null) {
    const memberEntries = se_VpcSecurityGroupIdList(input[_VSGI], context);
    if (input[_VSGI]?.length === 0) {
      entries.VpcSecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcSecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AZv] != null) {
    entries[_AZv] = input[_AZv];
  }
  if (input[_DBSGN] != null) {
    entries[_DBSGN] = input[_DBSGN];
  }
  if (input[_PMW] != null) {
    entries[_PMW] = input[_PMW];
  }
  if (input[_DBPGN] != null) {
    entries[_DBPGN] = input[_DBPGN];
  }
  if (input[_BRP] != null) {
    entries[_BRP] = input[_BRP];
  }
  if (input[_PBW] != null) {
    entries[_PBW] = input[_PBW];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_MAZ] != null) {
    entries[_MAZ] = input[_MAZ];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_AMVU] != null) {
    entries[_AMVU] = input[_AMVU];
  }
  if (input[_LM] != null) {
    entries[_LM] = input[_LM];
  }
  if (input[_I] != null) {
    entries[_I] = input[_I];
  }
  if (input[_OGN] != null) {
    entries[_OGN] = input[_OGN];
  }
  if (input[_CSN] != null) {
    entries[_CSN] = input[_CSN];
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  if (input[_TCA] != null) {
    entries[_TCA] = input[_TCA];
  }
  if (input[_TCP] != null) {
    entries[_TCP] = input[_TCP];
  }
  if (input[_SE] != null) {
    entries[_SE] = input[_SE];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_Do] != null) {
    entries[_Do] = input[_Do];
  }
  if (input[_CTTS] != null) {
    entries[_CTTS] = input[_CTTS];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  if (input[_MRA] != null) {
    entries[_MRA] = input[_MRA];
  }
  if (input[_DIAMRN] != null) {
    entries[_DIAMRN] = input[_DIAMRN];
  }
  if (input[_PT] != null) {
    entries[_PT] = input[_PT];
  }
  if (input[_Ti] != null) {
    entries[_Ti] = input[_Ti];
  }
  if (input[_EIAMDA] != null) {
    entries[_EIAMDA] = input[_EIAMDA];
  }
  if (input[_EPI] != null) {
    entries[_EPI] = input[_EPI];
  }
  if (input[_PIKMSKI] != null) {
    entries[_PIKMSKI] = input[_PIKMSKI];
  }
  if (input[_ECLE] != null) {
    const memberEntries = se_LogTypeList(input[_ECLE], context);
    if (input[_ECLE]?.length === 0) {
      entries.EnableCloudwatchLogsExports = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableCloudwatchLogsExports.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DP] != null) {
    entries[_DP] = input[_DP];
  }
  return entries;
}, "se_CreateDBInstanceMessage");
var se_CreateDBParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBPGN] != null) {
    entries[_DBPGN] = input[_DBPGN];
  }
  if (input[_DBPGF] != null) {
    entries[_DBPGF] = input[_DBPGF];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateDBParameterGroupMessage");
var se_CreateDBSubnetGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBSGN] != null) {
    entries[_DBSGN] = input[_DBSGN];
  }
  if (input[_DBSGD] != null) {
    entries[_DBSGD] = input[_DBSGD];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_SubnetIdentifierList(input[_SIu], context);
    if (input[_SIu]?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateDBSubnetGroupMessage");
var se_CreateEventSubscriptionMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_STA] != null) {
    entries[_STA] = input[_STA];
  }
  if (input[_STo] != null) {
    entries[_STo] = input[_STo];
  }
  if (input[_EC] != null) {
    const memberEntries = se_EventCategoriesList(input[_EC], context);
    if (input[_EC]?.length === 0) {
      entries.EventCategories = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EventCategories.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SIo] != null) {
    const memberEntries = se_SourceIdsList(input[_SIo], context);
    if (input[_SIo]?.length === 0) {
      entries.SourceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateEventSubscriptionMessage");
var se_CreateGlobalClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GCI] != null) {
    entries[_GCI] = input[_GCI];
  }
  if (input[_SDBCI] != null) {
    entries[_SDBCI] = input[_SDBCI];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_DP] != null) {
    entries[_DP] = input[_DP];
  }
  if (input[_SE] != null) {
    entries[_SE] = input[_SE];
  }
  return entries;
}, "se_CreateGlobalClusterMessage");
var se_DBSecurityGroupNameList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`DBSecurityGroupName.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_DBSecurityGroupNameList");
var se_DeleteDBClusterEndpointMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCEI] != null) {
    entries[_DBCEI] = input[_DBCEI];
  }
  return entries;
}, "se_DeleteDBClusterEndpointMessage");
var se_DeleteDBClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_SFS] != null) {
    entries[_SFS] = input[_SFS];
  }
  if (input[_FDBSI] != null) {
    entries[_FDBSI] = input[_FDBSI];
  }
  return entries;
}, "se_DeleteDBClusterMessage");
var se_DeleteDBClusterParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCPGN] != null) {
    entries[_DBCPGN] = input[_DBCPGN];
  }
  return entries;
}, "se_DeleteDBClusterParameterGroupMessage");
var se_DeleteDBClusterSnapshotMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCSI] != null) {
    entries[_DBCSI] = input[_DBCSI];
  }
  return entries;
}, "se_DeleteDBClusterSnapshotMessage");
var se_DeleteDBInstanceMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBII] != null) {
    entries[_DBII] = input[_DBII];
  }
  if (input[_SFS] != null) {
    entries[_SFS] = input[_SFS];
  }
  if (input[_FDBSI] != null) {
    entries[_FDBSI] = input[_FDBSI];
  }
  return entries;
}, "se_DeleteDBInstanceMessage");
var se_DeleteDBParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBPGN] != null) {
    entries[_DBPGN] = input[_DBPGN];
  }
  return entries;
}, "se_DeleteDBParameterGroupMessage");
var se_DeleteDBSubnetGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBSGN] != null) {
    entries[_DBSGN] = input[_DBSGN];
  }
  return entries;
}, "se_DeleteDBSubnetGroupMessage");
var se_DeleteEventSubscriptionMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  return entries;
}, "se_DeleteEventSubscriptionMessage");
var se_DeleteGlobalClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GCI] != null) {
    entries[_GCI] = input[_GCI];
  }
  return entries;
}, "se_DeleteGlobalClusterMessage");
var se_DescribeDBClusterEndpointsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_DBCEI] != null) {
    entries[_DBCEI] = input[_DBCEI];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeDBClusterEndpointsMessage");
var se_DescribeDBClusterParameterGroupsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCPGN] != null) {
    entries[_DBCPGN] = input[_DBCPGN];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeDBClusterParameterGroupsMessage");
var se_DescribeDBClusterParametersMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCPGN] != null) {
    entries[_DBCPGN] = input[_DBCPGN];
  }
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeDBClusterParametersMessage");
var se_DescribeDBClustersMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeDBClustersMessage");
var se_DescribeDBClusterSnapshotAttributesMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCSI] != null) {
    entries[_DBCSI] = input[_DBCSI];
  }
  return entries;
}, "se_DescribeDBClusterSnapshotAttributesMessage");
var se_DescribeDBClusterSnapshotsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_DBCSI] != null) {
    entries[_DBCSI] = input[_DBCSI];
  }
  if (input[_STn] != null) {
    entries[_STn] = input[_STn];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_IS] != null) {
    entries[_IS] = input[_IS];
  }
  if (input[_IP] != null) {
    entries[_IP] = input[_IP];
  }
  return entries;
}, "se_DescribeDBClusterSnapshotsMessage");
var se_DescribeDBEngineVersionsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_DBPGF] != null) {
    entries[_DBPGF] = input[_DBPGF];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_DO] != null) {
    entries[_DO] = input[_DO];
  }
  if (input[_LSCS] != null) {
    entries[_LSCS] = input[_LSCS];
  }
  if (input[_LST] != null) {
    entries[_LST] = input[_LST];
  }
  return entries;
}, "se_DescribeDBEngineVersionsMessage");
var se_DescribeDBInstancesMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBII] != null) {
    entries[_DBII] = input[_DBII];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeDBInstancesMessage");
var se_DescribeDBParameterGroupsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBPGN] != null) {
    entries[_DBPGN] = input[_DBPGN];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeDBParameterGroupsMessage");
var se_DescribeDBParametersMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBPGN] != null) {
    entries[_DBPGN] = input[_DBPGN];
  }
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeDBParametersMessage");
var se_DescribeDBSubnetGroupsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBSGN] != null) {
    entries[_DBSGN] = input[_DBSGN];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeDBSubnetGroupsMessage");
var se_DescribeEngineDefaultClusterParametersMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBPGF] != null) {
    entries[_DBPGF] = input[_DBPGF];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeEngineDefaultClusterParametersMessage");
var se_DescribeEngineDefaultParametersMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBPGF] != null) {
    entries[_DBPGF] = input[_DBPGF];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeEngineDefaultParametersMessage");
var se_DescribeEventCategoriesMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_STo] != null) {
    entries[_STo] = input[_STo];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DescribeEventCategoriesMessage");
var se_DescribeEventsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SI] != null) {
    entries[_SI] = input[_SI];
  }
  if (input[_STo] != null) {
    entries[_STo] = input[_STo];
  }
  if (input[_STt] != null) {
    entries[_STt] = (0, import_smithy_client.serializeDateTime)(input[_STt]);
  }
  if (input[_ETn] != null) {
    entries[_ETn] = (0, import_smithy_client.serializeDateTime)(input[_ETn]);
  }
  if (input[_Du] != null) {
    entries[_Du] = input[_Du];
  }
  if (input[_EC] != null) {
    const memberEntries = se_EventCategoriesList(input[_EC], context);
    if (input[_EC]?.length === 0) {
      entries.EventCategories = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EventCategories.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeEventsMessage");
var se_DescribeEventSubscriptionsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeEventSubscriptionsMessage");
var se_DescribeGlobalClustersMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GCI] != null) {
    entries[_GCI] = input[_GCI];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeGlobalClustersMessage");
var se_DescribeOrderableDBInstanceOptionsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_DBIC] != null) {
    entries[_DBIC] = input[_DBIC];
  }
  if (input[_LM] != null) {
    entries[_LM] = input[_LM];
  }
  if (input[_Vp] != null) {
    entries[_Vp] = input[_Vp];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
}, "se_DescribeOrderableDBInstanceOptionsMessage");
var se_DescribePendingMaintenanceActionsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RI] != null) {
    entries[_RI] = input[_RI];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
}, "se_DescribePendingMaintenanceActionsMessage");
var se_DescribeValidDBInstanceModificationsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBII] != null) {
    entries[_DBII] = input[_DBII];
  }
  return entries;
}, "se_DescribeValidDBInstanceModificationsMessage");
var se_EventCategoriesList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`EventCategory.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_EventCategoriesList");
var se_FailoverDBClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_TDBII] != null) {
    entries[_TDBII] = input[_TDBII];
  }
  return entries;
}, "se_FailoverDBClusterMessage");
var se_FailoverGlobalClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GCI] != null) {
    entries[_GCI] = input[_GCI];
  }
  if (input[_TDCI] != null) {
    entries[_TDCI] = input[_TDCI];
  }
  if (input[_ADL] != null) {
    entries[_ADL] = input[_ADL];
  }
  if (input[_Sw] != null) {
    entries[_Sw] = input[_Sw];
  }
  return entries;
}, "se_FailoverGlobalClusterMessage");
var se_Filter = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_Va] != null) {
    const memberEntries = se_FilterValueList(input[_Va], context);
    if (input[_Va]?.length === 0) {
      entries.Values = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Values.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_Filter");
var se_FilterList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Filter(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Filter.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_FilterList");
var se_FilterValueList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Value.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_FilterValueList");
var se_KeyList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_KeyList");
var se_ListTagsForResourceMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_F] != null) {
    const memberEntries = se_FilterList(input[_F], context);
    if (input[_F]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ListTagsForResourceMessage");
var se_LogTypeList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_LogTypeList");
var se_ModifyDBClusterEndpointMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCEI] != null) {
    entries[_DBCEI] = input[_DBCEI];
  }
  if (input[_ET] != null) {
    entries[_ET] = input[_ET];
  }
  if (input[_SM] != null) {
    const memberEntries = se_StringList(input[_SM], context);
    if (input[_SM]?.length === 0) {
      entries.StaticMembers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `StaticMembers.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EM] != null) {
    const memberEntries = se_StringList(input[_EM], context);
    if (input[_EM]?.length === 0) {
      entries.ExcludedMembers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludedMembers.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyDBClusterEndpointMessage");
var se_ModifyDBClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_NDBCI] != null) {
    entries[_NDBCI] = input[_NDBCI];
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  if (input[_BRP] != null) {
    entries[_BRP] = input[_BRP];
  }
  if (input[_DBCPGN] != null) {
    entries[_DBCPGN] = input[_DBCPGN];
  }
  if (input[_VSGI] != null) {
    const memberEntries = se_VpcSecurityGroupIdList(input[_VSGI], context);
    if (input[_VSGI]?.length === 0) {
      entries.VpcSecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcSecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_MUP] != null) {
    entries[_MUP] = input[_MUP];
  }
  if (input[_OGN] != null) {
    entries[_OGN] = input[_OGN];
  }
  if (input[_PBW] != null) {
    entries[_PBW] = input[_PBW];
  }
  if (input[_PMW] != null) {
    entries[_PMW] = input[_PMW];
  }
  if (input[_EIAMDA] != null) {
    entries[_EIAMDA] = input[_EIAMDA];
  }
  if (input[_CLEC] != null) {
    const memberEntries = se_CloudwatchLogsExportConfiguration(input[_CLEC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CloudwatchLogsExportConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_AMVUl] != null) {
    entries[_AMVUl] = input[_AMVUl];
  }
  if (input[_DBIPGN] != null) {
    entries[_DBIPGN] = input[_DBIPGN];
  }
  if (input[_DP] != null) {
    entries[_DP] = input[_DP];
  }
  if (input[_CTTS] != null) {
    entries[_CTTS] = input[_CTTS];
  }
  if (input[_SVSC] != null) {
    const memberEntries = se_ServerlessV2ScalingConfiguration(input[_SVSC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServerlessV2ScalingConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  return entries;
}, "se_ModifyDBClusterMessage");
var se_ModifyDBClusterParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCPGN] != null) {
    entries[_DBCPGN] = input[_DBCPGN];
  }
  if (input[_Pa] != null) {
    const memberEntries = se_ParametersList(input[_Pa], context);
    if (input[_Pa]?.length === 0) {
      entries.Parameters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Parameters.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyDBClusterParameterGroupMessage");
var se_ModifyDBClusterSnapshotAttributeMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCSI] != null) {
    entries[_DBCSI] = input[_DBCSI];
  }
  if (input[_AN] != null) {
    entries[_AN] = input[_AN];
  }
  if (input[_VTA] != null) {
    const memberEntries = se_AttributeValueList(input[_VTA], context);
    if (input[_VTA]?.length === 0) {
      entries.ValuesToAdd = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ValuesToAdd.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VTR] != null) {
    const memberEntries = se_AttributeValueList(input[_VTR], context);
    if (input[_VTR]?.length === 0) {
      entries.ValuesToRemove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ValuesToRemove.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyDBClusterSnapshotAttributeMessage");
var se_ModifyDBInstanceMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBII] != null) {
    entries[_DBII] = input[_DBII];
  }
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_DBIC] != null) {
    entries[_DBIC] = input[_DBIC];
  }
  if (input[_DBSGN] != null) {
    entries[_DBSGN] = input[_DBSGN];
  }
  if (input[_DBSG] != null) {
    const memberEntries = se_DBSecurityGroupNameList(input[_DBSG], context);
    if (input[_DBSG]?.length === 0) {
      entries.DBSecurityGroups = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DBSecurityGroups.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VSGI] != null) {
    const memberEntries = se_VpcSecurityGroupIdList(input[_VSGI], context);
    if (input[_VSGI]?.length === 0) {
      entries.VpcSecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcSecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  if (input[_MUP] != null) {
    entries[_MUP] = input[_MUP];
  }
  if (input[_DBPGN] != null) {
    entries[_DBPGN] = input[_DBPGN];
  }
  if (input[_BRP] != null) {
    entries[_BRP] = input[_BRP];
  }
  if (input[_PBW] != null) {
    entries[_PBW] = input[_PBW];
  }
  if (input[_PMW] != null) {
    entries[_PMW] = input[_PMW];
  }
  if (input[_MAZ] != null) {
    entries[_MAZ] = input[_MAZ];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_AMVUl] != null) {
    entries[_AMVUl] = input[_AMVUl];
  }
  if (input[_AMVU] != null) {
    entries[_AMVU] = input[_AMVU];
  }
  if (input[_LM] != null) {
    entries[_LM] = input[_LM];
  }
  if (input[_I] != null) {
    entries[_I] = input[_I];
  }
  if (input[_OGN] != null) {
    entries[_OGN] = input[_OGN];
  }
  if (input[_NDBII] != null) {
    entries[_NDBII] = input[_NDBII];
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  if (input[_TCA] != null) {
    entries[_TCA] = input[_TCA];
  }
  if (input[_TCP] != null) {
    entries[_TCP] = input[_TCP];
  }
  if (input[_CACI] != null) {
    entries[_CACI] = input[_CACI];
  }
  if (input[_Do] != null) {
    entries[_Do] = input[_Do];
  }
  if (input[_CTTS] != null) {
    entries[_CTTS] = input[_CTTS];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  if (input[_DBPN] != null) {
    entries[_DBPN] = input[_DBPN];
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_MRA] != null) {
    entries[_MRA] = input[_MRA];
  }
  if (input[_DIAMRN] != null) {
    entries[_DIAMRN] = input[_DIAMRN];
  }
  if (input[_PT] != null) {
    entries[_PT] = input[_PT];
  }
  if (input[_EIAMDA] != null) {
    entries[_EIAMDA] = input[_EIAMDA];
  }
  if (input[_EPI] != null) {
    entries[_EPI] = input[_EPI];
  }
  if (input[_PIKMSKI] != null) {
    entries[_PIKMSKI] = input[_PIKMSKI];
  }
  if (input[_CLEC] != null) {
    const memberEntries = se_CloudwatchLogsExportConfiguration(input[_CLEC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CloudwatchLogsExportConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DP] != null) {
    entries[_DP] = input[_DP];
  }
  return entries;
}, "se_ModifyDBInstanceMessage");
var se_ModifyDBParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBPGN] != null) {
    entries[_DBPGN] = input[_DBPGN];
  }
  if (input[_Pa] != null) {
    const memberEntries = se_ParametersList(input[_Pa], context);
    if (input[_Pa]?.length === 0) {
      entries.Parameters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Parameters.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyDBParameterGroupMessage");
var se_ModifyDBSubnetGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBSGN] != null) {
    entries[_DBSGN] = input[_DBSGN];
  }
  if (input[_DBSGD] != null) {
    entries[_DBSGD] = input[_DBSGD];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_SubnetIdentifierList(input[_SIu], context);
    if (input[_SIu]?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyDBSubnetGroupMessage");
var se_ModifyEventSubscriptionMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_STA] != null) {
    entries[_STA] = input[_STA];
  }
  if (input[_STo] != null) {
    entries[_STo] = input[_STo];
  }
  if (input[_EC] != null) {
    const memberEntries = se_EventCategoriesList(input[_EC], context);
    if (input[_EC]?.length === 0) {
      entries.EventCategories = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EventCategories.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
}, "se_ModifyEventSubscriptionMessage");
var se_ModifyGlobalClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GCI] != null) {
    entries[_GCI] = input[_GCI];
  }
  if (input[_NGCI] != null) {
    entries[_NGCI] = input[_NGCI];
  }
  if (input[_DP] != null) {
    entries[_DP] = input[_DP];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_AMVUl] != null) {
    entries[_AMVUl] = input[_AMVUl];
  }
  return entries;
}, "se_ModifyGlobalClusterMessage");
var se_Parameter = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_PV] != null) {
    entries[_PV] = input[_PV];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_AT] != null) {
    entries[_AT] = input[_AT];
  }
  if (input[_DT] != null) {
    entries[_DT] = input[_DT];
  }
  if (input[_AV] != null) {
    entries[_AV] = input[_AV];
  }
  if (input[_IM] != null) {
    entries[_IM] = input[_IM];
  }
  if (input[_MEV] != null) {
    entries[_MEV] = input[_MEV];
  }
  if (input[_AM] != null) {
    entries[_AM] = input[_AM];
  }
  return entries;
}, "se_Parameter");
var se_ParametersList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Parameter(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Parameter.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_ParametersList");
var se_PromoteReadReplicaDBClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  return entries;
}, "se_PromoteReadReplicaDBClusterMessage");
var se_RebootDBInstanceMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBII] != null) {
    entries[_DBII] = input[_DBII];
  }
  if (input[_FF] != null) {
    entries[_FF] = input[_FF];
  }
  return entries;
}, "se_RebootDBInstanceMessage");
var se_RemoveFromGlobalClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GCI] != null) {
    entries[_GCI] = input[_GCI];
  }
  if (input[_DCI] != null) {
    entries[_DCI] = input[_DCI];
  }
  return entries;
}, "se_RemoveFromGlobalClusterMessage");
var se_RemoveRoleFromDBClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_RA] != null) {
    entries[_RA] = input[_RA];
  }
  if (input[_FN] != null) {
    entries[_FN] = input[_FN];
  }
  return entries;
}, "se_RemoveRoleFromDBClusterMessage");
var se_RemoveSourceIdentifierFromSubscriptionMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_SI] != null) {
    entries[_SI] = input[_SI];
  }
  return entries;
}, "se_RemoveSourceIdentifierFromSubscriptionMessage");
var se_RemoveTagsFromResourceMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_TK] != null) {
    const memberEntries = se_KeyList(input[_TK], context);
    if (input[_TK]?.length === 0) {
      entries.TagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagKeys.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_RemoveTagsFromResourceMessage");
var se_ResetDBClusterParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCPGN] != null) {
    entries[_DBCPGN] = input[_DBCPGN];
  }
  if (input[_RAP] != null) {
    entries[_RAP] = input[_RAP];
  }
  if (input[_Pa] != null) {
    const memberEntries = se_ParametersList(input[_Pa], context);
    if (input[_Pa]?.length === 0) {
      entries.Parameters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Parameters.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ResetDBClusterParameterGroupMessage");
var se_ResetDBParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBPGN] != null) {
    entries[_DBPGN] = input[_DBPGN];
  }
  if (input[_RAP] != null) {
    entries[_RAP] = input[_RAP];
  }
  if (input[_Pa] != null) {
    const memberEntries = se_ParametersList(input[_Pa], context);
    if (input[_Pa]?.length === 0) {
      entries.Parameters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Parameters.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ResetDBParameterGroupMessage");
var se_RestoreDBClusterFromSnapshotMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_AZ] != null) {
    const memberEntries = se_AvailabilityZones(input[_AZ], context);
    if (input[_AZ]?.length === 0) {
      entries.AvailabilityZones = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZones.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_DBSGN] != null) {
    entries[_DBSGN] = input[_DBSGN];
  }
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_OGN] != null) {
    entries[_OGN] = input[_OGN];
  }
  if (input[_VSGI] != null) {
    const memberEntries = se_VpcSecurityGroupIdList(input[_VSGI], context);
    if (input[_VSGI]?.length === 0) {
      entries.VpcSecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcSecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_EIAMDA] != null) {
    entries[_EIAMDA] = input[_EIAMDA];
  }
  if (input[_ECLE] != null) {
    const memberEntries = se_LogTypeList(input[_ECLE], context);
    if (input[_ECLE]?.length === 0) {
      entries.EnableCloudwatchLogsExports = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableCloudwatchLogsExports.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DBCPGN] != null) {
    entries[_DBCPGN] = input[_DBCPGN];
  }
  if (input[_DP] != null) {
    entries[_DP] = input[_DP];
  }
  if (input[_CTTS] != null) {
    entries[_CTTS] = input[_CTTS];
  }
  if (input[_SVSC] != null) {
    const memberEntries = se_ServerlessV2ScalingConfiguration(input[_SVSC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServerlessV2ScalingConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  return entries;
}, "se_RestoreDBClusterFromSnapshotMessage");
var se_RestoreDBClusterToPointInTimeMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_SDBCI] != null) {
    entries[_SDBCI] = input[_SDBCI];
  }
  if (input[_RTT] != null) {
    entries[_RTT] = (0, import_smithy_client.serializeDateTime)(input[_RTT]);
  }
  if (input[_ULRT] != null) {
    entries[_ULRT] = input[_ULRT];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_DBSGN] != null) {
    entries[_DBSGN] = input[_DBSGN];
  }
  if (input[_OGN] != null) {
    entries[_OGN] = input[_OGN];
  }
  if (input[_VSGI] != null) {
    const memberEntries = se_VpcSecurityGroupIdList(input[_VSGI], context);
    if (input[_VSGI]?.length === 0) {
      entries.VpcSecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcSecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_EIAMDA] != null) {
    entries[_EIAMDA] = input[_EIAMDA];
  }
  if (input[_ECLE] != null) {
    const memberEntries = se_LogTypeList(input[_ECLE], context);
    if (input[_ECLE]?.length === 0) {
      entries.EnableCloudwatchLogsExports = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableCloudwatchLogsExports.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DBCPGN] != null) {
    entries[_DBCPGN] = input[_DBCPGN];
  }
  if (input[_DP] != null) {
    entries[_DP] = input[_DP];
  }
  if (input[_SVSC] != null) {
    const memberEntries = se_ServerlessV2ScalingConfiguration(input[_SVSC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServerlessV2ScalingConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  return entries;
}, "se_RestoreDBClusterToPointInTimeMessage");
var se_ServerlessV2ScalingConfiguration = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_MC] != null) {
    entries[_MC] = (0, import_smithy_client.serializeFloat)(input[_MC]);
  }
  if (input[_MCa] != null) {
    entries[_MCa] = (0, import_smithy_client.serializeFloat)(input[_MCa]);
  }
  return entries;
}, "se_ServerlessV2ScalingConfiguration");
var se_SourceIdsList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SourceId.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_SourceIdsList");
var se_StartDBClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  return entries;
}, "se_StartDBClusterMessage");
var se_StopDBClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DBCI] != null) {
    entries[_DBCI] = input[_DBCI];
  }
  return entries;
}, "se_StopDBClusterMessage");
var se_StringList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_StringList");
var se_SubnetIdentifierList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SubnetIdentifier.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_SubnetIdentifierList");
var se_SwitchoverGlobalClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GCI] != null) {
    entries[_GCI] = input[_GCI];
  }
  if (input[_TDCI] != null) {
    entries[_TDCI] = input[_TDCI];
  }
  return entries;
}, "se_SwitchoverGlobalClusterMessage");
var se_Tag = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_K] != null) {
    entries[_K] = input[_K];
  }
  if (input[_Val] != null) {
    entries[_Val] = input[_Val];
  }
  return entries;
}, "se_Tag");
var se_TagList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Tag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Tag.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_TagList");
var se_VpcSecurityGroupIdList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpcSecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_VpcSecurityGroupIdList");
var de_AddSourceIdentifierToSubscriptionResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ES] != null) {
    contents[_ES] = de_EventSubscription(output[_ES], context);
  }
  return contents;
}, "de_AddSourceIdentifierToSubscriptionResult");
var de_ApplyPendingMaintenanceActionResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RPMA] != null) {
    contents[_RPMA] = de_ResourcePendingMaintenanceActions(output[_RPMA], context);
  }
  return contents;
}, "de_ApplyPendingMaintenanceActionResult");
var de_AttributeValueList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_AttributeValueList");
var de_AuthorizationNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_AuthorizationNotFoundFault");
var de_AvailabilityZone = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  return contents;
}, "de_AvailabilityZone");
var de_AvailabilityZoneList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_AvailabilityZone(entry, context);
  });
}, "de_AvailabilityZoneList");
var de_AvailabilityZones = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_AvailabilityZones");
var de_CertificateNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_CertificateNotFoundFault");
var de_CharacterSet = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CSN] != null) {
    contents[_CSN] = (0, import_smithy_client.expectString)(output[_CSN]);
  }
  if (output[_CSD] != null) {
    contents[_CSD] = (0, import_smithy_client.expectString)(output[_CSD]);
  }
  return contents;
}, "de_CharacterSet");
var de_ClusterPendingModifiedValues = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PCLE] != null) {
    contents[_PCLE] = de_PendingCloudwatchLogsExports(output[_PCLE], context);
  }
  if (output[_DBCI] != null) {
    contents[_DBCI] = (0, import_smithy_client.expectString)(output[_DBCI]);
  }
  if (output[_IAMDAE] != null) {
    contents[_IAMDAE] = (0, import_smithy_client.parseBoolean)(output[_IAMDAE]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_BRP] != null) {
    contents[_BRP] = (0, import_smithy_client.strictParseInt32)(output[_BRP]);
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);
  }
  if (output[_AS] != null) {
    contents[_AS] = (0, import_smithy_client.strictParseInt32)(output[_AS]);
  }
  if (output[_I] != null) {
    contents[_I] = (0, import_smithy_client.strictParseInt32)(output[_I]);
  }
  return contents;
}, "de_ClusterPendingModifiedValues");
var de_CopyDBClusterParameterGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCPG] != null) {
    contents[_DBCPG] = de_DBClusterParameterGroup(output[_DBCPG], context);
  }
  return contents;
}, "de_CopyDBClusterParameterGroupResult");
var de_CopyDBClusterSnapshotResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCS] != null) {
    contents[_DBCS] = de_DBClusterSnapshot(output[_DBCS], context);
  }
  return contents;
}, "de_CopyDBClusterSnapshotResult");
var de_CopyDBParameterGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBPG] != null) {
    contents[_DBPG] = de_DBParameterGroup(output[_DBPG], context);
  }
  return contents;
}, "de_CopyDBParameterGroupResult");
var de_CreateDBClusterEndpointOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCEI] != null) {
    contents[_DBCEI] = (0, import_smithy_client.expectString)(output[_DBCEI]);
  }
  if (output[_DBCI] != null) {
    contents[_DBCI] = (0, import_smithy_client.expectString)(output[_DBCI]);
  }
  if (output[_DBCERI] != null) {
    contents[_DBCERI] = (0, import_smithy_client.expectString)(output[_DBCERI]);
  }
  if (output[_End] != null) {
    contents[_End] = (0, import_smithy_client.expectString)(output[_End]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_ET] != null) {
    contents[_ET] = (0, import_smithy_client.expectString)(output[_ET]);
  }
  if (output[_CET] != null) {
    contents[_CET] = (0, import_smithy_client.expectString)(output[_CET]);
  }
  if (output.StaticMembers === "") {
    contents[_SM] = [];
  } else if (output[_SM] != null && output[_SM][_me] != null) {
    contents[_SM] = de_StringList((0, import_smithy_client.getArrayIfSingleItem)(output[_SM][_me]), context);
  }
  if (output.ExcludedMembers === "") {
    contents[_EM] = [];
  } else if (output[_EM] != null && output[_EM][_me] != null) {
    contents[_EM] = de_StringList((0, import_smithy_client.getArrayIfSingleItem)(output[_EM][_me]), context);
  }
  if (output[_DBCEA] != null) {
    contents[_DBCEA] = (0, import_smithy_client.expectString)(output[_DBCEA]);
  }
  return contents;
}, "de_CreateDBClusterEndpointOutput");
var de_CreateDBClusterParameterGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCPG] != null) {
    contents[_DBCPG] = de_DBClusterParameterGroup(output[_DBCPG], context);
  }
  return contents;
}, "de_CreateDBClusterParameterGroupResult");
var de_CreateDBClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBC] != null) {
    contents[_DBC] = de_DBCluster(output[_DBC], context);
  }
  return contents;
}, "de_CreateDBClusterResult");
var de_CreateDBClusterSnapshotResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCS] != null) {
    contents[_DBCS] = de_DBClusterSnapshot(output[_DBCS], context);
  }
  return contents;
}, "de_CreateDBClusterSnapshotResult");
var de_CreateDBInstanceResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBI] != null) {
    contents[_DBI] = de_DBInstance(output[_DBI], context);
  }
  return contents;
}, "de_CreateDBInstanceResult");
var de_CreateDBParameterGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBPG] != null) {
    contents[_DBPG] = de_DBParameterGroup(output[_DBPG], context);
  }
  return contents;
}, "de_CreateDBParameterGroupResult");
var de_CreateDBSubnetGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBSGu] != null) {
    contents[_DBSGu] = de_DBSubnetGroup(output[_DBSGu], context);
  }
  return contents;
}, "de_CreateDBSubnetGroupResult");
var de_CreateEventSubscriptionResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ES] != null) {
    contents[_ES] = de_EventSubscription(output[_ES], context);
  }
  return contents;
}, "de_CreateEventSubscriptionResult");
var de_CreateGlobalClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GC] != null) {
    contents[_GC] = de_GlobalCluster(output[_GC], context);
  }
  return contents;
}, "de_CreateGlobalClusterResult");
var de_DBCluster = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_AS] != null) {
    contents[_AS] = (0, import_smithy_client.strictParseInt32)(output[_AS]);
  }
  if (output.AvailabilityZones === "") {
    contents[_AZ] = [];
  } else if (output[_AZ] != null && output[_AZ][_AZv] != null) {
    contents[_AZ] = de_AvailabilityZones((0, import_smithy_client.getArrayIfSingleItem)(output[_AZ][_AZv]), context);
  }
  if (output[_BRP] != null) {
    contents[_BRP] = (0, import_smithy_client.strictParseInt32)(output[_BRP]);
  }
  if (output[_CSN] != null) {
    contents[_CSN] = (0, import_smithy_client.expectString)(output[_CSN]);
  }
  if (output[_DN] != null) {
    contents[_DN] = (0, import_smithy_client.expectString)(output[_DN]);
  }
  if (output[_DBCI] != null) {
    contents[_DBCI] = (0, import_smithy_client.expectString)(output[_DBCI]);
  }
  if (output[_DBCPG] != null) {
    contents[_DBCPG] = (0, import_smithy_client.expectString)(output[_DBCPG]);
  }
  if (output[_DBSGu] != null) {
    contents[_DBSGu] = (0, import_smithy_client.expectString)(output[_DBSGu]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_PP] != null) {
    contents[_PP] = (0, import_smithy_client.expectString)(output[_PP]);
  }
  if (output[_ERT] != null) {
    contents[_ERT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ERT]));
  }
  if (output[_End] != null) {
    contents[_End] = (0, import_smithy_client.expectString)(output[_End]);
  }
  if (output[_RE] != null) {
    contents[_RE] = (0, import_smithy_client.expectString)(output[_RE]);
  }
  if (output[_MAZ] != null) {
    contents[_MAZ] = (0, import_smithy_client.parseBoolean)(output[_MAZ]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_LRT] != null) {
    contents[_LRT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LRT]));
  }
  if (output[_P] != null) {
    contents[_P] = (0, import_smithy_client.strictParseInt32)(output[_P]);
  }
  if (output[_MU] != null) {
    contents[_MU] = (0, import_smithy_client.expectString)(output[_MU]);
  }
  if (output.DBClusterOptionGroupMemberships === "") {
    contents[_DBCOGM] = [];
  } else if (output[_DBCOGM] != null && output[_DBCOGM][_DBCOG] != null) {
    contents[_DBCOGM] = de_DBClusterOptionGroupMemberships((0, import_smithy_client.getArrayIfSingleItem)(output[_DBCOGM][_DBCOG]), context);
  }
  if (output[_PBW] != null) {
    contents[_PBW] = (0, import_smithy_client.expectString)(output[_PBW]);
  }
  if (output[_PMW] != null) {
    contents[_PMW] = (0, import_smithy_client.expectString)(output[_PMW]);
  }
  if (output[_RSI] != null) {
    contents[_RSI] = (0, import_smithy_client.expectString)(output[_RSI]);
  }
  if (output.ReadReplicaIdentifiers === "") {
    contents[_RRI] = [];
  } else if (output[_RRI] != null && output[_RRI][_RRIe] != null) {
    contents[_RRI] = de_ReadReplicaIdentifierList((0, import_smithy_client.getArrayIfSingleItem)(output[_RRI][_RRIe]), context);
  }
  if (output.DBClusterMembers === "") {
    contents[_DBCM] = [];
  } else if (output[_DBCM] != null && output[_DBCM][_DBCMl] != null) {
    contents[_DBCM] = de_DBClusterMemberList((0, import_smithy_client.getArrayIfSingleItem)(output[_DBCM][_DBCMl]), context);
  }
  if (output.VpcSecurityGroups === "") {
    contents[_VSG] = [];
  } else if (output[_VSG] != null && output[_VSG][_VSGM] != null) {
    contents[_VSG] = de_VpcSecurityGroupMembershipList((0, import_smithy_client.getArrayIfSingleItem)(output[_VSG][_VSGM]), context);
  }
  if (output[_HZI] != null) {
    contents[_HZI] = (0, import_smithy_client.expectString)(output[_HZI]);
  }
  if (output[_SE] != null) {
    contents[_SE] = (0, import_smithy_client.parseBoolean)(output[_SE]);
  }
  if (output[_KKI] != null) {
    contents[_KKI] = (0, import_smithy_client.expectString)(output[_KKI]);
  }
  if (output[_DCRI] != null) {
    contents[_DCRI] = (0, import_smithy_client.expectString)(output[_DCRI]);
  }
  if (output[_DBCA] != null) {
    contents[_DBCA] = (0, import_smithy_client.expectString)(output[_DBCA]);
  }
  if (output.AssociatedRoles === "") {
    contents[_AR] = [];
  } else if (output[_AR] != null && output[_AR][_DBCR] != null) {
    contents[_AR] = de_DBClusterRoles((0, import_smithy_client.getArrayIfSingleItem)(output[_AR][_DBCR]), context);
  }
  if (output[_IAMDAE] != null) {
    contents[_IAMDAE] = (0, import_smithy_client.parseBoolean)(output[_IAMDAE]);
  }
  if (output[_CGI] != null) {
    contents[_CGI] = (0, import_smithy_client.expectString)(output[_CGI]);
  }
  if (output[_CCT] != null) {
    contents[_CCT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CCT]));
  }
  if (output[_CTTS] != null) {
    contents[_CTTS] = (0, import_smithy_client.parseBoolean)(output[_CTTS]);
  }
  if (output.EnabledCloudwatchLogsExports === "") {
    contents[_ECLEn] = [];
  } else if (output[_ECLEn] != null && output[_ECLEn][_me] != null) {
    contents[_ECLEn] = de_LogTypeList((0, import_smithy_client.getArrayIfSingleItem)(output[_ECLEn][_me]), context);
  }
  if (output[_PMV] != null) {
    contents[_PMV] = de_ClusterPendingModifiedValues(output[_PMV], context);
  }
  if (output[_DP] != null) {
    contents[_DP] = (0, import_smithy_client.parseBoolean)(output[_DP]);
  }
  if (output[_CAC] != null) {
    contents[_CAC] = (0, import_smithy_client.parseBoolean)(output[_CAC]);
  }
  if (output[_ART] != null) {
    contents[_ART] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ART]));
  }
  if (output[_SVSC] != null) {
    contents[_SVSC] = de_ServerlessV2ScalingConfigurationInfo(output[_SVSC], context);
  }
  if (output[_GCI] != null) {
    contents[_GCI] = (0, import_smithy_client.expectString)(output[_GCI]);
  }
  if (output[_IOONAMT] != null) {
    contents[_IOONAMT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_IOONAMT]));
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);
  }
  return contents;
}, "de_DBCluster");
var de_DBClusterAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterAlreadyExistsFault");
var de_DBClusterEndpoint = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCEI] != null) {
    contents[_DBCEI] = (0, import_smithy_client.expectString)(output[_DBCEI]);
  }
  if (output[_DBCI] != null) {
    contents[_DBCI] = (0, import_smithy_client.expectString)(output[_DBCI]);
  }
  if (output[_DBCERI] != null) {
    contents[_DBCERI] = (0, import_smithy_client.expectString)(output[_DBCERI]);
  }
  if (output[_End] != null) {
    contents[_End] = (0, import_smithy_client.expectString)(output[_End]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_ET] != null) {
    contents[_ET] = (0, import_smithy_client.expectString)(output[_ET]);
  }
  if (output[_CET] != null) {
    contents[_CET] = (0, import_smithy_client.expectString)(output[_CET]);
  }
  if (output.StaticMembers === "") {
    contents[_SM] = [];
  } else if (output[_SM] != null && output[_SM][_me] != null) {
    contents[_SM] = de_StringList((0, import_smithy_client.getArrayIfSingleItem)(output[_SM][_me]), context);
  }
  if (output.ExcludedMembers === "") {
    contents[_EM] = [];
  } else if (output[_EM] != null && output[_EM][_me] != null) {
    contents[_EM] = de_StringList((0, import_smithy_client.getArrayIfSingleItem)(output[_EM][_me]), context);
  }
  if (output[_DBCEA] != null) {
    contents[_DBCEA] = (0, import_smithy_client.expectString)(output[_DBCEA]);
  }
  return contents;
}, "de_DBClusterEndpoint");
var de_DBClusterEndpointAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterEndpointAlreadyExistsFault");
var de_DBClusterEndpointList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBClusterEndpoint(entry, context);
  });
}, "de_DBClusterEndpointList");
var de_DBClusterEndpointMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.DBClusterEndpoints === "") {
    contents[_DBCE] = [];
  } else if (output[_DBCE] != null && output[_DBCE][_DBCEL] != null) {
    contents[_DBCE] = de_DBClusterEndpointList((0, import_smithy_client.getArrayIfSingleItem)(output[_DBCE][_DBCEL]), context);
  }
  return contents;
}, "de_DBClusterEndpointMessage");
var de_DBClusterEndpointNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterEndpointNotFoundFault");
var de_DBClusterEndpointQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterEndpointQuotaExceededFault");
var de_DBClusterList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBCluster(entry, context);
  });
}, "de_DBClusterList");
var de_DBClusterMember = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBII] != null) {
    contents[_DBII] = (0, import_smithy_client.expectString)(output[_DBII]);
  }
  if (output[_ICW] != null) {
    contents[_ICW] = (0, import_smithy_client.parseBoolean)(output[_ICW]);
  }
  if (output[_DBCPGS] != null) {
    contents[_DBCPGS] = (0, import_smithy_client.expectString)(output[_DBCPGS]);
  }
  if (output[_PT] != null) {
    contents[_PT] = (0, import_smithy_client.strictParseInt32)(output[_PT]);
  }
  return contents;
}, "de_DBClusterMember");
var de_DBClusterMemberList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBClusterMember(entry, context);
  });
}, "de_DBClusterMemberList");
var de_DBClusterMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.DBClusters === "") {
    contents[_DBCl] = [];
  } else if (output[_DBCl] != null && output[_DBCl][_DBC] != null) {
    contents[_DBCl] = de_DBClusterList((0, import_smithy_client.getArrayIfSingleItem)(output[_DBCl][_DBC]), context);
  }
  return contents;
}, "de_DBClusterMessage");
var de_DBClusterNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterNotFoundFault");
var de_DBClusterOptionGroupMemberships = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBClusterOptionGroupStatus(entry, context);
  });
}, "de_DBClusterOptionGroupMemberships");
var de_DBClusterOptionGroupStatus = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCOGN] != null) {
    contents[_DBCOGN] = (0, import_smithy_client.expectString)(output[_DBCOGN]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  return contents;
}, "de_DBClusterOptionGroupStatus");
var de_DBClusterParameterGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCPGN] != null) {
    contents[_DBCPGN] = (0, import_smithy_client.expectString)(output[_DBCPGN]);
  }
  if (output[_DBPGF] != null) {
    contents[_DBPGF] = (0, import_smithy_client.expectString)(output[_DBPGF]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (output[_DBCPGA] != null) {
    contents[_DBCPGA] = (0, import_smithy_client.expectString)(output[_DBCPGA]);
  }
  return contents;
}, "de_DBClusterParameterGroup");
var de_DBClusterParameterGroupDetails = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Parameters === "") {
    contents[_Pa] = [];
  } else if (output[_Pa] != null && output[_Pa][_Par] != null) {
    contents[_Pa] = de_ParametersList((0, import_smithy_client.getArrayIfSingleItem)(output[_Pa][_Par]), context);
  }
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  return contents;
}, "de_DBClusterParameterGroupDetails");
var de_DBClusterParameterGroupList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBClusterParameterGroup(entry, context);
  });
}, "de_DBClusterParameterGroupList");
var de_DBClusterParameterGroupNameMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCPGN] != null) {
    contents[_DBCPGN] = (0, import_smithy_client.expectString)(output[_DBCPGN]);
  }
  return contents;
}, "de_DBClusterParameterGroupNameMessage");
var de_DBClusterParameterGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterParameterGroupNotFoundFault");
var de_DBClusterParameterGroupsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.DBClusterParameterGroups === "") {
    contents[_DBCPGl] = [];
  } else if (output[_DBCPGl] != null && output[_DBCPGl][_DBCPG] != null) {
    contents[_DBCPGl] = de_DBClusterParameterGroupList((0, import_smithy_client.getArrayIfSingleItem)(output[_DBCPGl][_DBCPG]), context);
  }
  return contents;
}, "de_DBClusterParameterGroupsMessage");
var de_DBClusterQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterQuotaExceededFault");
var de_DBClusterRole = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RA] != null) {
    contents[_RA] = (0, import_smithy_client.expectString)(output[_RA]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_FN] != null) {
    contents[_FN] = (0, import_smithy_client.expectString)(output[_FN]);
  }
  return contents;
}, "de_DBClusterRole");
var de_DBClusterRoleAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterRoleAlreadyExistsFault");
var de_DBClusterRoleNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterRoleNotFoundFault");
var de_DBClusterRoleQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterRoleQuotaExceededFault");
var de_DBClusterRoles = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBClusterRole(entry, context);
  });
}, "de_DBClusterRoles");
var de_DBClusterSnapshot = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.AvailabilityZones === "") {
    contents[_AZ] = [];
  } else if (output[_AZ] != null && output[_AZ][_AZv] != null) {
    contents[_AZ] = de_AvailabilityZones((0, import_smithy_client.getArrayIfSingleItem)(output[_AZ][_AZv]), context);
  }
  if (output[_DBCSI] != null) {
    contents[_DBCSI] = (0, import_smithy_client.expectString)(output[_DBCSI]);
  }
  if (output[_DBCI] != null) {
    contents[_DBCI] = (0, import_smithy_client.expectString)(output[_DBCI]);
  }
  if (output[_SCT] != null) {
    contents[_SCT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_SCT]));
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_AS] != null) {
    contents[_AS] = (0, import_smithy_client.strictParseInt32)(output[_AS]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_P] != null) {
    contents[_P] = (0, import_smithy_client.strictParseInt32)(output[_P]);
  }
  if (output[_VI] != null) {
    contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
  }
  if (output[_CCT] != null) {
    contents[_CCT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CCT]));
  }
  if (output[_MU] != null) {
    contents[_MU] = (0, import_smithy_client.expectString)(output[_MU]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_LM] != null) {
    contents[_LM] = (0, import_smithy_client.expectString)(output[_LM]);
  }
  if (output[_STn] != null) {
    contents[_STn] = (0, import_smithy_client.expectString)(output[_STn]);
  }
  if (output[_PP] != null) {
    contents[_PP] = (0, import_smithy_client.strictParseInt32)(output[_PP]);
  }
  if (output[_SE] != null) {
    contents[_SE] = (0, import_smithy_client.parseBoolean)(output[_SE]);
  }
  if (output[_KKI] != null) {
    contents[_KKI] = (0, import_smithy_client.expectString)(output[_KKI]);
  }
  if (output[_DBCSA] != null) {
    contents[_DBCSA] = (0, import_smithy_client.expectString)(output[_DBCSA]);
  }
  if (output[_SDBCSA] != null) {
    contents[_SDBCSA] = (0, import_smithy_client.expectString)(output[_SDBCSA]);
  }
  if (output[_IAMDAE] != null) {
    contents[_IAMDAE] = (0, import_smithy_client.parseBoolean)(output[_IAMDAE]);
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);
  }
  return contents;
}, "de_DBClusterSnapshot");
var de_DBClusterSnapshotAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterSnapshotAlreadyExistsFault");
var de_DBClusterSnapshotAttribute = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_AN] != null) {
    contents[_AN] = (0, import_smithy_client.expectString)(output[_AN]);
  }
  if (output.AttributeValues === "") {
    contents[_AVt] = [];
  } else if (output[_AVt] != null && output[_AVt][_AVtt] != null) {
    contents[_AVt] = de_AttributeValueList((0, import_smithy_client.getArrayIfSingleItem)(output[_AVt][_AVtt]), context);
  }
  return contents;
}, "de_DBClusterSnapshotAttribute");
var de_DBClusterSnapshotAttributeList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBClusterSnapshotAttribute(entry, context);
  });
}, "de_DBClusterSnapshotAttributeList");
var de_DBClusterSnapshotAttributesResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCSI] != null) {
    contents[_DBCSI] = (0, import_smithy_client.expectString)(output[_DBCSI]);
  }
  if (output.DBClusterSnapshotAttributes === "") {
    contents[_DBCSAl] = [];
  } else if (output[_DBCSAl] != null && output[_DBCSAl][_DBCSAlu] != null) {
    contents[_DBCSAl] = de_DBClusterSnapshotAttributeList((0, import_smithy_client.getArrayIfSingleItem)(output[_DBCSAl][_DBCSAlu]), context);
  }
  return contents;
}, "de_DBClusterSnapshotAttributesResult");
var de_DBClusterSnapshotList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBClusterSnapshot(entry, context);
  });
}, "de_DBClusterSnapshotList");
var de_DBClusterSnapshotMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.DBClusterSnapshots === "") {
    contents[_DBCSl] = [];
  } else if (output[_DBCSl] != null && output[_DBCSl][_DBCS] != null) {
    contents[_DBCSl] = de_DBClusterSnapshotList((0, import_smithy_client.getArrayIfSingleItem)(output[_DBCSl][_DBCS]), context);
  }
  return contents;
}, "de_DBClusterSnapshotMessage");
var de_DBClusterSnapshotNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBClusterSnapshotNotFoundFault");
var de_DBEngineVersion = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_DBPGF] != null) {
    contents[_DBPGF] = (0, import_smithy_client.expectString)(output[_DBPGF]);
  }
  if (output[_DBED] != null) {
    contents[_DBED] = (0, import_smithy_client.expectString)(output[_DBED]);
  }
  if (output[_DBEVD] != null) {
    contents[_DBEVD] = (0, import_smithy_client.expectString)(output[_DBEVD]);
  }
  if (output[_DCS] != null) {
    contents[_DCS] = de_CharacterSet(output[_DCS], context);
  }
  if (output.SupportedCharacterSets === "") {
    contents[_SCS] = [];
  } else if (output[_SCS] != null && output[_SCS][_CS] != null) {
    contents[_SCS] = de_SupportedCharacterSetsList((0, import_smithy_client.getArrayIfSingleItem)(output[_SCS][_CS]), context);
  }
  if (output.ValidUpgradeTarget === "") {
    contents[_VUT] = [];
  } else if (output[_VUT] != null && output[_VUT][_UT] != null) {
    contents[_VUT] = de_ValidUpgradeTargetList((0, import_smithy_client.getArrayIfSingleItem)(output[_VUT][_UT]), context);
  }
  if (output.SupportedTimezones === "") {
    contents[_STu] = [];
  } else if (output[_STu] != null && output[_STu][_Ti] != null) {
    contents[_STu] = de_SupportedTimezonesList((0, import_smithy_client.getArrayIfSingleItem)(output[_STu][_Ti]), context);
  }
  if (output.ExportableLogTypes === "") {
    contents[_ELTx] = [];
  } else if (output[_ELTx] != null && output[_ELTx][_me] != null) {
    contents[_ELTx] = de_LogTypeList((0, import_smithy_client.getArrayIfSingleItem)(output[_ELTx][_me]), context);
  }
  if (output[_SLETCL] != null) {
    contents[_SLETCL] = (0, import_smithy_client.parseBoolean)(output[_SLETCL]);
  }
  if (output[_SRR] != null) {
    contents[_SRR] = (0, import_smithy_client.parseBoolean)(output[_SRR]);
  }
  if (output[_SGD] != null) {
    contents[_SGD] = (0, import_smithy_client.parseBoolean)(output[_SGD]);
  }
  return contents;
}, "de_DBEngineVersion");
var de_DBEngineVersionList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBEngineVersion(entry, context);
  });
}, "de_DBEngineVersionList");
var de_DBEngineVersionMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.DBEngineVersions === "") {
    contents[_DBEV] = [];
  } else if (output[_DBEV] != null && output[_DBEV][_DBEVn] != null) {
    contents[_DBEV] = de_DBEngineVersionList((0, import_smithy_client.getArrayIfSingleItem)(output[_DBEV][_DBEVn]), context);
  }
  return contents;
}, "de_DBEngineVersionMessage");
var de_DBInstance = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBII] != null) {
    contents[_DBII] = (0, import_smithy_client.expectString)(output[_DBII]);
  }
  if (output[_DBIC] != null) {
    contents[_DBIC] = (0, import_smithy_client.expectString)(output[_DBIC]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_DBIS] != null) {
    contents[_DBIS] = (0, import_smithy_client.expectString)(output[_DBIS]);
  }
  if (output[_MU] != null) {
    contents[_MU] = (0, import_smithy_client.expectString)(output[_MU]);
  }
  if (output[_DBN] != null) {
    contents[_DBN] = (0, import_smithy_client.expectString)(output[_DBN]);
  }
  if (output[_End] != null) {
    contents[_End] = de_Endpoint(output[_End], context);
  }
  if (output[_AS] != null) {
    contents[_AS] = (0, import_smithy_client.strictParseInt32)(output[_AS]);
  }
  if (output[_ICT] != null) {
    contents[_ICT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ICT]));
  }
  if (output[_PBW] != null) {
    contents[_PBW] = (0, import_smithy_client.expectString)(output[_PBW]);
  }
  if (output[_BRP] != null) {
    contents[_BRP] = (0, import_smithy_client.strictParseInt32)(output[_BRP]);
  }
  if (output.DBSecurityGroups === "") {
    contents[_DBSG] = [];
  } else if (output[_DBSG] != null && output[_DBSG][_DBSGe] != null) {
    contents[_DBSG] = de_DBSecurityGroupMembershipList((0, import_smithy_client.getArrayIfSingleItem)(output[_DBSG][_DBSGe]), context);
  }
  if (output.VpcSecurityGroups === "") {
    contents[_VSG] = [];
  } else if (output[_VSG] != null && output[_VSG][_VSGM] != null) {
    contents[_VSG] = de_VpcSecurityGroupMembershipList((0, import_smithy_client.getArrayIfSingleItem)(output[_VSG][_VSGM]), context);
  }
  if (output.DBParameterGroups === "") {
    contents[_DBPGa] = [];
  } else if (output[_DBPGa] != null && output[_DBPGa][_DBPG] != null) {
    contents[_DBPGa] = de_DBParameterGroupStatusList((0, import_smithy_client.getArrayIfSingleItem)(output[_DBPGa][_DBPG]), context);
  }
  if (output[_AZv] != null) {
    contents[_AZv] = (0, import_smithy_client.expectString)(output[_AZv]);
  }
  if (output[_DBSGu] != null) {
    contents[_DBSGu] = de_DBSubnetGroup(output[_DBSGu], context);
  }
  if (output[_PMW] != null) {
    contents[_PMW] = (0, import_smithy_client.expectString)(output[_PMW]);
  }
  if (output[_PMV] != null) {
    contents[_PMV] = de_PendingModifiedValues(output[_PMV], context);
  }
  if (output[_LRT] != null) {
    contents[_LRT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LRT]));
  }
  if (output[_MAZ] != null) {
    contents[_MAZ] = (0, import_smithy_client.parseBoolean)(output[_MAZ]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_AMVU] != null) {
    contents[_AMVU] = (0, import_smithy_client.parseBoolean)(output[_AMVU]);
  }
  if (output[_RRSDBII] != null) {
    contents[_RRSDBII] = (0, import_smithy_client.expectString)(output[_RRSDBII]);
  }
  if (output.ReadReplicaDBInstanceIdentifiers === "") {
    contents[_RRDBII] = [];
  } else if (output[_RRDBII] != null && output[_RRDBII][_RRDBIIe] != null) {
    contents[_RRDBII] = de_ReadReplicaDBInstanceIdentifierList(
      (0, import_smithy_client.getArrayIfSingleItem)(output[_RRDBII][_RRDBIIe]),
      context
    );
  }
  if (output.ReadReplicaDBClusterIdentifiers === "") {
    contents[_RRDBCI] = [];
  } else if (output[_RRDBCI] != null && output[_RRDBCI][_RRDBCIe] != null) {
    contents[_RRDBCI] = de_ReadReplicaDBClusterIdentifierList(
      (0, import_smithy_client.getArrayIfSingleItem)(output[_RRDBCI][_RRDBCIe]),
      context
    );
  }
  if (output[_LM] != null) {
    contents[_LM] = (0, import_smithy_client.expectString)(output[_LM]);
  }
  if (output[_I] != null) {
    contents[_I] = (0, import_smithy_client.strictParseInt32)(output[_I]);
  }
  if (output.OptionGroupMemberships === "") {
    contents[_OGM] = [];
  } else if (output[_OGM] != null && output[_OGM][_OGMp] != null) {
    contents[_OGM] = de_OptionGroupMembershipList((0, import_smithy_client.getArrayIfSingleItem)(output[_OGM][_OGMp]), context);
  }
  if (output[_CSN] != null) {
    contents[_CSN] = (0, import_smithy_client.expectString)(output[_CSN]);
  }
  if (output[_SAZ] != null) {
    contents[_SAZ] = (0, import_smithy_client.expectString)(output[_SAZ]);
  }
  if (output[_PA] != null) {
    contents[_PA] = (0, import_smithy_client.parseBoolean)(output[_PA]);
  }
  if (output.StatusInfos === "") {
    contents[_SIt] = [];
  } else if (output[_SIt] != null && output[_SIt][_DBISI] != null) {
    contents[_SIt] = de_DBInstanceStatusInfoList((0, import_smithy_client.getArrayIfSingleItem)(output[_SIt][_DBISI]), context);
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);
  }
  if (output[_TCA] != null) {
    contents[_TCA] = (0, import_smithy_client.expectString)(output[_TCA]);
  }
  if (output[_DIP] != null) {
    contents[_DIP] = (0, import_smithy_client.strictParseInt32)(output[_DIP]);
  }
  if (output[_DBCI] != null) {
    contents[_DBCI] = (0, import_smithy_client.expectString)(output[_DBCI]);
  }
  if (output[_SE] != null) {
    contents[_SE] = (0, import_smithy_client.parseBoolean)(output[_SE]);
  }
  if (output[_KKI] != null) {
    contents[_KKI] = (0, import_smithy_client.expectString)(output[_KKI]);
  }
  if (output[_DRI] != null) {
    contents[_DRI] = (0, import_smithy_client.expectString)(output[_DRI]);
  }
  if (output[_CACI] != null) {
    contents[_CACI] = (0, import_smithy_client.expectString)(output[_CACI]);
  }
  if (output.DomainMemberships === "") {
    contents[_DM] = [];
  } else if (output[_DM] != null && output[_DM][_DMo] != null) {
    contents[_DM] = de_DomainMembershipList((0, import_smithy_client.getArrayIfSingleItem)(output[_DM][_DMo]), context);
  }
  if (output[_CTTS] != null) {
    contents[_CTTS] = (0, import_smithy_client.parseBoolean)(output[_CTTS]);
  }
  if (output[_MI] != null) {
    contents[_MI] = (0, import_smithy_client.strictParseInt32)(output[_MI]);
  }
  if (output[_EMRA] != null) {
    contents[_EMRA] = (0, import_smithy_client.expectString)(output[_EMRA]);
  }
  if (output[_MRA] != null) {
    contents[_MRA] = (0, import_smithy_client.expectString)(output[_MRA]);
  }
  if (output[_PT] != null) {
    contents[_PT] = (0, import_smithy_client.strictParseInt32)(output[_PT]);
  }
  if (output[_DBIA] != null) {
    contents[_DBIA] = (0, import_smithy_client.expectString)(output[_DBIA]);
  }
  if (output[_Ti] != null) {
    contents[_Ti] = (0, import_smithy_client.expectString)(output[_Ti]);
  }
  if (output[_IAMDAE] != null) {
    contents[_IAMDAE] = (0, import_smithy_client.parseBoolean)(output[_IAMDAE]);
  }
  if (output[_PIE] != null) {
    contents[_PIE] = (0, import_smithy_client.parseBoolean)(output[_PIE]);
  }
  if (output[_PIKMSKI] != null) {
    contents[_PIKMSKI] = (0, import_smithy_client.expectString)(output[_PIKMSKI]);
  }
  if (output.EnabledCloudwatchLogsExports === "") {
    contents[_ECLEn] = [];
  } else if (output[_ECLEn] != null && output[_ECLEn][_me] != null) {
    contents[_ECLEn] = de_LogTypeList((0, import_smithy_client.getArrayIfSingleItem)(output[_ECLEn][_me]), context);
  }
  if (output[_DP] != null) {
    contents[_DP] = (0, import_smithy_client.parseBoolean)(output[_DP]);
  }
  return contents;
}, "de_DBInstance");
var de_DBInstanceAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBInstanceAlreadyExistsFault");
var de_DBInstanceList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBInstance(entry, context);
  });
}, "de_DBInstanceList");
var de_DBInstanceMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.DBInstances === "") {
    contents[_DBIn] = [];
  } else if (output[_DBIn] != null && output[_DBIn][_DBI] != null) {
    contents[_DBIn] = de_DBInstanceList((0, import_smithy_client.getArrayIfSingleItem)(output[_DBIn][_DBI]), context);
  }
  return contents;
}, "de_DBInstanceMessage");
var de_DBInstanceNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBInstanceNotFoundFault");
var de_DBInstanceStatusInfo = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_STta] != null) {
    contents[_STta] = (0, import_smithy_client.expectString)(output[_STta]);
  }
  if (output[_No] != null) {
    contents[_No] = (0, import_smithy_client.parseBoolean)(output[_No]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_DBInstanceStatusInfo");
var de_DBInstanceStatusInfoList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBInstanceStatusInfo(entry, context);
  });
}, "de_DBInstanceStatusInfoList");
var de_DBParameterGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBPGN] != null) {
    contents[_DBPGN] = (0, import_smithy_client.expectString)(output[_DBPGN]);
  }
  if (output[_DBPGF] != null) {
    contents[_DBPGF] = (0, import_smithy_client.expectString)(output[_DBPGF]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (output[_DBPGA] != null) {
    contents[_DBPGA] = (0, import_smithy_client.expectString)(output[_DBPGA]);
  }
  return contents;
}, "de_DBParameterGroup");
var de_DBParameterGroupAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBParameterGroupAlreadyExistsFault");
var de_DBParameterGroupDetails = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Parameters === "") {
    contents[_Pa] = [];
  } else if (output[_Pa] != null && output[_Pa][_Par] != null) {
    contents[_Pa] = de_ParametersList((0, import_smithy_client.getArrayIfSingleItem)(output[_Pa][_Par]), context);
  }
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  return contents;
}, "de_DBParameterGroupDetails");
var de_DBParameterGroupList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBParameterGroup(entry, context);
  });
}, "de_DBParameterGroupList");
var de_DBParameterGroupNameMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBPGN] != null) {
    contents[_DBPGN] = (0, import_smithy_client.expectString)(output[_DBPGN]);
  }
  return contents;
}, "de_DBParameterGroupNameMessage");
var de_DBParameterGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBParameterGroupNotFoundFault");
var de_DBParameterGroupQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBParameterGroupQuotaExceededFault");
var de_DBParameterGroupsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.DBParameterGroups === "") {
    contents[_DBPGa] = [];
  } else if (output[_DBPGa] != null && output[_DBPGa][_DBPG] != null) {
    contents[_DBPGa] = de_DBParameterGroupList((0, import_smithy_client.getArrayIfSingleItem)(output[_DBPGa][_DBPG]), context);
  }
  return contents;
}, "de_DBParameterGroupsMessage");
var de_DBParameterGroupStatus = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBPGN] != null) {
    contents[_DBPGN] = (0, import_smithy_client.expectString)(output[_DBPGN]);
  }
  if (output[_PAS] != null) {
    contents[_PAS] = (0, import_smithy_client.expectString)(output[_PAS]);
  }
  return contents;
}, "de_DBParameterGroupStatus");
var de_DBParameterGroupStatusList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBParameterGroupStatus(entry, context);
  });
}, "de_DBParameterGroupStatusList");
var de_DBSecurityGroupMembership = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBSGNe] != null) {
    contents[_DBSGNe] = (0, import_smithy_client.expectString)(output[_DBSGNe]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  return contents;
}, "de_DBSecurityGroupMembership");
var de_DBSecurityGroupMembershipList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBSecurityGroupMembership(entry, context);
  });
}, "de_DBSecurityGroupMembershipList");
var de_DBSecurityGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBSecurityGroupNotFoundFault");
var de_DBSnapshotAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBSnapshotAlreadyExistsFault");
var de_DBSnapshotNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBSnapshotNotFoundFault");
var de_DBSubnetGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBSGN] != null) {
    contents[_DBSGN] = (0, import_smithy_client.expectString)(output[_DBSGN]);
  }
  if (output[_DBSGD] != null) {
    contents[_DBSGD] = (0, import_smithy_client.expectString)(output[_DBSGD]);
  }
  if (output[_VI] != null) {
    contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
  }
  if (output[_SGS] != null) {
    contents[_SGS] = (0, import_smithy_client.expectString)(output[_SGS]);
  }
  if (output.Subnets === "") {
    contents[_Su] = [];
  } else if (output[_Su] != null && output[_Su][_Sub] != null) {
    contents[_Su] = de_SubnetList((0, import_smithy_client.getArrayIfSingleItem)(output[_Su][_Sub]), context);
  }
  if (output[_DBSGA] != null) {
    contents[_DBSGA] = (0, import_smithy_client.expectString)(output[_DBSGA]);
  }
  return contents;
}, "de_DBSubnetGroup");
var de_DBSubnetGroupAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBSubnetGroupAlreadyExistsFault");
var de_DBSubnetGroupDoesNotCoverEnoughAZs = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBSubnetGroupDoesNotCoverEnoughAZs");
var de_DBSubnetGroupMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.DBSubnetGroups === "") {
    contents[_DBSGub] = [];
  } else if (output[_DBSGub] != null && output[_DBSGub][_DBSGu] != null) {
    contents[_DBSGub] = de_DBSubnetGroups((0, import_smithy_client.getArrayIfSingleItem)(output[_DBSGub][_DBSGu]), context);
  }
  return contents;
}, "de_DBSubnetGroupMessage");
var de_DBSubnetGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBSubnetGroupNotFoundFault");
var de_DBSubnetGroupQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBSubnetGroupQuotaExceededFault");
var de_DBSubnetGroups = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DBSubnetGroup(entry, context);
  });
}, "de_DBSubnetGroups");
var de_DBSubnetQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBSubnetQuotaExceededFault");
var de_DBUpgradeDependencyFailureFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DBUpgradeDependencyFailureFault");
var de_DeleteDBClusterEndpointOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCEI] != null) {
    contents[_DBCEI] = (0, import_smithy_client.expectString)(output[_DBCEI]);
  }
  if (output[_DBCI] != null) {
    contents[_DBCI] = (0, import_smithy_client.expectString)(output[_DBCI]);
  }
  if (output[_DBCERI] != null) {
    contents[_DBCERI] = (0, import_smithy_client.expectString)(output[_DBCERI]);
  }
  if (output[_End] != null) {
    contents[_End] = (0, import_smithy_client.expectString)(output[_End]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_ET] != null) {
    contents[_ET] = (0, import_smithy_client.expectString)(output[_ET]);
  }
  if (output[_CET] != null) {
    contents[_CET] = (0, import_smithy_client.expectString)(output[_CET]);
  }
  if (output.StaticMembers === "") {
    contents[_SM] = [];
  } else if (output[_SM] != null && output[_SM][_me] != null) {
    contents[_SM] = de_StringList((0, import_smithy_client.getArrayIfSingleItem)(output[_SM][_me]), context);
  }
  if (output.ExcludedMembers === "") {
    contents[_EM] = [];
  } else if (output[_EM] != null && output[_EM][_me] != null) {
    contents[_EM] = de_StringList((0, import_smithy_client.getArrayIfSingleItem)(output[_EM][_me]), context);
  }
  if (output[_DBCEA] != null) {
    contents[_DBCEA] = (0, import_smithy_client.expectString)(output[_DBCEA]);
  }
  return contents;
}, "de_DeleteDBClusterEndpointOutput");
var de_DeleteDBClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBC] != null) {
    contents[_DBC] = de_DBCluster(output[_DBC], context);
  }
  return contents;
}, "de_DeleteDBClusterResult");
var de_DeleteDBClusterSnapshotResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCS] != null) {
    contents[_DBCS] = de_DBClusterSnapshot(output[_DBCS], context);
  }
  return contents;
}, "de_DeleteDBClusterSnapshotResult");
var de_DeleteDBInstanceResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBI] != null) {
    contents[_DBI] = de_DBInstance(output[_DBI], context);
  }
  return contents;
}, "de_DeleteDBInstanceResult");
var de_DeleteEventSubscriptionResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ES] != null) {
    contents[_ES] = de_EventSubscription(output[_ES], context);
  }
  return contents;
}, "de_DeleteEventSubscriptionResult");
var de_DeleteGlobalClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GC] != null) {
    contents[_GC] = de_GlobalCluster(output[_GC], context);
  }
  return contents;
}, "de_DeleteGlobalClusterResult");
var de_DescribeDBClusterSnapshotAttributesResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCSAR] != null) {
    contents[_DBCSAR] = de_DBClusterSnapshotAttributesResult(output[_DBCSAR], context);
  }
  return contents;
}, "de_DescribeDBClusterSnapshotAttributesResult");
var de_DescribeEngineDefaultClusterParametersResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ED] != null) {
    contents[_ED] = de_EngineDefaults(output[_ED], context);
  }
  return contents;
}, "de_DescribeEngineDefaultClusterParametersResult");
var de_DescribeEngineDefaultParametersResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ED] != null) {
    contents[_ED] = de_EngineDefaults(output[_ED], context);
  }
  return contents;
}, "de_DescribeEngineDefaultParametersResult");
var de_DescribeValidDBInstanceModificationsResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_VDBIMM] != null) {
    contents[_VDBIMM] = de_ValidDBInstanceModificationsMessage(output[_VDBIMM], context);
  }
  return contents;
}, "de_DescribeValidDBInstanceModificationsResult");
var de_DomainMembership = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Do] != null) {
    contents[_Do] = (0, import_smithy_client.expectString)(output[_Do]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_FQDN] != null) {
    contents[_FQDN] = (0, import_smithy_client.expectString)(output[_FQDN]);
  }
  if (output[_IAMRN] != null) {
    contents[_IAMRN] = (0, import_smithy_client.expectString)(output[_IAMRN]);
  }
  return contents;
}, "de_DomainMembership");
var de_DomainMembershipList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DomainMembership(entry, context);
  });
}, "de_DomainMembershipList");
var de_DomainNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_DomainNotFoundFault");
var de_DoubleRange = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Fr] != null) {
    contents[_Fr] = (0, import_smithy_client.strictParseFloat)(output[_Fr]);
  }
  if (output[_To] != null) {
    contents[_To] = (0, import_smithy_client.strictParseFloat)(output[_To]);
  }
  return contents;
}, "de_DoubleRange");
var de_DoubleRangeList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DoubleRange(entry, context);
  });
}, "de_DoubleRangeList");
var de_Endpoint = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ad] != null) {
    contents[_Ad] = (0, import_smithy_client.expectString)(output[_Ad]);
  }
  if (output[_P] != null) {
    contents[_P] = (0, import_smithy_client.strictParseInt32)(output[_P]);
  }
  if (output[_HZI] != null) {
    contents[_HZI] = (0, import_smithy_client.expectString)(output[_HZI]);
  }
  return contents;
}, "de_Endpoint");
var de_EngineDefaults = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBPGF] != null) {
    contents[_DBPGF] = (0, import_smithy_client.expectString)(output[_DBPGF]);
  }
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.Parameters === "") {
    contents[_Pa] = [];
  } else if (output[_Pa] != null && output[_Pa][_Par] != null) {
    contents[_Pa] = de_ParametersList((0, import_smithy_client.getArrayIfSingleItem)(output[_Pa][_Par]), context);
  }
  return contents;
}, "de_EngineDefaults");
var de_Event = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SI] != null) {
    contents[_SI] = (0, import_smithy_client.expectString)(output[_SI]);
  }
  if (output[_STo] != null) {
    contents[_STo] = (0, import_smithy_client.expectString)(output[_STo]);
  }
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  if (output.EventCategories === "") {
    contents[_EC] = [];
  } else if (output[_EC] != null && output[_EC][_ECv] != null) {
    contents[_EC] = de_EventCategoriesList((0, import_smithy_client.getArrayIfSingleItem)(output[_EC][_ECv]), context);
  }
  if (output[_Da] != null) {
    contents[_Da] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Da]));
  }
  if (output[_SA] != null) {
    contents[_SA] = (0, import_smithy_client.expectString)(output[_SA]);
  }
  return contents;
}, "de_Event");
var de_EventCategoriesList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_EventCategoriesList");
var de_EventCategoriesMap = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_STo] != null) {
    contents[_STo] = (0, import_smithy_client.expectString)(output[_STo]);
  }
  if (output.EventCategories === "") {
    contents[_EC] = [];
  } else if (output[_EC] != null && output[_EC][_ECv] != null) {
    contents[_EC] = de_EventCategoriesList((0, import_smithy_client.getArrayIfSingleItem)(output[_EC][_ECv]), context);
  }
  return contents;
}, "de_EventCategoriesMap");
var de_EventCategoriesMapList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_EventCategoriesMap(entry, context);
  });
}, "de_EventCategoriesMapList");
var de_EventCategoriesMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.EventCategoriesMapList === "") {
    contents[_ECML] = [];
  } else if (output[_ECML] != null && output[_ECML][_ECM] != null) {
    contents[_ECML] = de_EventCategoriesMapList((0, import_smithy_client.getArrayIfSingleItem)(output[_ECML][_ECM]), context);
  }
  return contents;
}, "de_EventCategoriesMessage");
var de_EventList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Event(entry, context);
  });
}, "de_EventList");
var de_EventsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.Events === "") {
    contents[_Ev] = [];
  } else if (output[_Ev] != null && output[_Ev][_Eve] != null) {
    contents[_Ev] = de_EventList((0, import_smithy_client.getArrayIfSingleItem)(output[_Ev][_Eve]), context);
  }
  return contents;
}, "de_EventsMessage");
var de_EventSubscription = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CAI] != null) {
    contents[_CAI] = (0, import_smithy_client.expectString)(output[_CAI]);
  }
  if (output[_CSI] != null) {
    contents[_CSI] = (0, import_smithy_client.expectString)(output[_CSI]);
  }
  if (output[_STA] != null) {
    contents[_STA] = (0, import_smithy_client.expectString)(output[_STA]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_SCTu] != null) {
    contents[_SCTu] = (0, import_smithy_client.expectString)(output[_SCTu]);
  }
  if (output[_STo] != null) {
    contents[_STo] = (0, import_smithy_client.expectString)(output[_STo]);
  }
  if (output.SourceIdsList === "") {
    contents[_SIL] = [];
  } else if (output[_SIL] != null && output[_SIL][_SIou] != null) {
    contents[_SIL] = de_SourceIdsList((0, import_smithy_client.getArrayIfSingleItem)(output[_SIL][_SIou]), context);
  }
  if (output.EventCategoriesList === "") {
    contents[_ECL] = [];
  } else if (output[_ECL] != null && output[_ECL][_ECv] != null) {
    contents[_ECL] = de_EventCategoriesList((0, import_smithy_client.getArrayIfSingleItem)(output[_ECL][_ECv]), context);
  }
  if (output[_En] != null) {
    contents[_En] = (0, import_smithy_client.parseBoolean)(output[_En]);
  }
  if (output[_ESA] != null) {
    contents[_ESA] = (0, import_smithy_client.expectString)(output[_ESA]);
  }
  return contents;
}, "de_EventSubscription");
var de_EventSubscriptionQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_EventSubscriptionQuotaExceededFault");
var de_EventSubscriptionsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_EventSubscription(entry, context);
  });
}, "de_EventSubscriptionsList");
var de_EventSubscriptionsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.EventSubscriptionsList === "") {
    contents[_ESL] = [];
  } else if (output[_ESL] != null && output[_ESL][_ES] != null) {
    contents[_ESL] = de_EventSubscriptionsList((0, import_smithy_client.getArrayIfSingleItem)(output[_ESL][_ES]), context);
  }
  return contents;
}, "de_EventSubscriptionsMessage");
var de_FailoverDBClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBC] != null) {
    contents[_DBC] = de_DBCluster(output[_DBC], context);
  }
  return contents;
}, "de_FailoverDBClusterResult");
var de_FailoverGlobalClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GC] != null) {
    contents[_GC] = de_GlobalCluster(output[_GC], context);
  }
  return contents;
}, "de_FailoverGlobalClusterResult");
var de_FailoverState = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_FDCA] != null) {
    contents[_FDCA] = (0, import_smithy_client.expectString)(output[_FDCA]);
  }
  if (output[_TDCA] != null) {
    contents[_TDCA] = (0, import_smithy_client.expectString)(output[_TDCA]);
  }
  if (output[_IDLA] != null) {
    contents[_IDLA] = (0, import_smithy_client.parseBoolean)(output[_IDLA]);
  }
  return contents;
}, "de_FailoverState");
var de_GlobalCluster = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GCI] != null) {
    contents[_GCI] = (0, import_smithy_client.expectString)(output[_GCI]);
  }
  if (output[_GCRI] != null) {
    contents[_GCRI] = (0, import_smithy_client.expectString)(output[_GCRI]);
  }
  if (output[_GCA] != null) {
    contents[_GCA] = (0, import_smithy_client.expectString)(output[_GCA]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_SE] != null) {
    contents[_SE] = (0, import_smithy_client.parseBoolean)(output[_SE]);
  }
  if (output[_DP] != null) {
    contents[_DP] = (0, import_smithy_client.parseBoolean)(output[_DP]);
  }
  if (output.GlobalClusterMembers === "") {
    contents[_GCM] = [];
  } else if (output[_GCM] != null && output[_GCM][_GCMl] != null) {
    contents[_GCM] = de_GlobalClusterMemberList((0, import_smithy_client.getArrayIfSingleItem)(output[_GCM][_GCMl]), context);
  }
  if (output[_FS] != null) {
    contents[_FS] = de_FailoverState(output[_FS], context);
  }
  return contents;
}, "de_GlobalCluster");
var de_GlobalClusterAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_GlobalClusterAlreadyExistsFault");
var de_GlobalClusterList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_GlobalCluster(entry, context);
  });
}, "de_GlobalClusterList");
var de_GlobalClusterMember = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCA] != null) {
    contents[_DBCA] = (0, import_smithy_client.expectString)(output[_DBCA]);
  }
  if (output.Readers === "") {
    contents[_R] = [];
  } else if (output[_R] != null && output[_R][_me] != null) {
    contents[_R] = de_ReadersArnList((0, import_smithy_client.getArrayIfSingleItem)(output[_R][_me]), context);
  }
  if (output[_IW] != null) {
    contents[_IW] = (0, import_smithy_client.parseBoolean)(output[_IW]);
  }
  return contents;
}, "de_GlobalClusterMember");
var de_GlobalClusterMemberList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_GlobalClusterMember(entry, context);
  });
}, "de_GlobalClusterMemberList");
var de_GlobalClusterNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_GlobalClusterNotFoundFault");
var de_GlobalClusterQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_GlobalClusterQuotaExceededFault");
var de_GlobalClustersMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  if (output.GlobalClusters === "") {
    contents[_GCl] = [];
  } else if (output[_GCl] != null && output[_GCl][_GCMl] != null) {
    contents[_GCl] = de_GlobalClusterList((0, import_smithy_client.getArrayIfSingleItem)(output[_GCl][_GCMl]), context);
  }
  return contents;
}, "de_GlobalClustersMessage");
var de_InstanceQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InstanceQuotaExceededFault");
var de_InsufficientDBClusterCapacityFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InsufficientDBClusterCapacityFault");
var de_InsufficientDBInstanceCapacityFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InsufficientDBInstanceCapacityFault");
var de_InsufficientStorageClusterCapacityFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InsufficientStorageClusterCapacityFault");
var de_InvalidDBClusterEndpointStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidDBClusterEndpointStateFault");
var de_InvalidDBClusterSnapshotStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidDBClusterSnapshotStateFault");
var de_InvalidDBClusterStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidDBClusterStateFault");
var de_InvalidDBInstanceStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidDBInstanceStateFault");
var de_InvalidDBParameterGroupStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidDBParameterGroupStateFault");
var de_InvalidDBSecurityGroupStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidDBSecurityGroupStateFault");
var de_InvalidDBSnapshotStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidDBSnapshotStateFault");
var de_InvalidDBSubnetGroupStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidDBSubnetGroupStateFault");
var de_InvalidDBSubnetStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidDBSubnetStateFault");
var de_InvalidEventSubscriptionStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidEventSubscriptionStateFault");
var de_InvalidGlobalClusterStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidGlobalClusterStateFault");
var de_InvalidRestoreFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidRestoreFault");
var de_InvalidSubnet = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidSubnet");
var de_InvalidVPCNetworkStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_InvalidVPCNetworkStateFault");
var de_KMSKeyNotAccessibleFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_KMSKeyNotAccessibleFault");
var de_LogTypeList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_LogTypeList");
var de_ModifyDBClusterEndpointOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCEI] != null) {
    contents[_DBCEI] = (0, import_smithy_client.expectString)(output[_DBCEI]);
  }
  if (output[_DBCI] != null) {
    contents[_DBCI] = (0, import_smithy_client.expectString)(output[_DBCI]);
  }
  if (output[_DBCERI] != null) {
    contents[_DBCERI] = (0, import_smithy_client.expectString)(output[_DBCERI]);
  }
  if (output[_End] != null) {
    contents[_End] = (0, import_smithy_client.expectString)(output[_End]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_ET] != null) {
    contents[_ET] = (0, import_smithy_client.expectString)(output[_ET]);
  }
  if (output[_CET] != null) {
    contents[_CET] = (0, import_smithy_client.expectString)(output[_CET]);
  }
  if (output.StaticMembers === "") {
    contents[_SM] = [];
  } else if (output[_SM] != null && output[_SM][_me] != null) {
    contents[_SM] = de_StringList((0, import_smithy_client.getArrayIfSingleItem)(output[_SM][_me]), context);
  }
  if (output.ExcludedMembers === "") {
    contents[_EM] = [];
  } else if (output[_EM] != null && output[_EM][_me] != null) {
    contents[_EM] = de_StringList((0, import_smithy_client.getArrayIfSingleItem)(output[_EM][_me]), context);
  }
  if (output[_DBCEA] != null) {
    contents[_DBCEA] = (0, import_smithy_client.expectString)(output[_DBCEA]);
  }
  return contents;
}, "de_ModifyDBClusterEndpointOutput");
var de_ModifyDBClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBC] != null) {
    contents[_DBC] = de_DBCluster(output[_DBC], context);
  }
  return contents;
}, "de_ModifyDBClusterResult");
var de_ModifyDBClusterSnapshotAttributeResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBCSAR] != null) {
    contents[_DBCSAR] = de_DBClusterSnapshotAttributesResult(output[_DBCSAR], context);
  }
  return contents;
}, "de_ModifyDBClusterSnapshotAttributeResult");
var de_ModifyDBInstanceResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBI] != null) {
    contents[_DBI] = de_DBInstance(output[_DBI], context);
  }
  return contents;
}, "de_ModifyDBInstanceResult");
var de_ModifyDBSubnetGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBSGu] != null) {
    contents[_DBSGu] = de_DBSubnetGroup(output[_DBSGu], context);
  }
  return contents;
}, "de_ModifyDBSubnetGroupResult");
var de_ModifyEventSubscriptionResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ES] != null) {
    contents[_ES] = de_EventSubscription(output[_ES], context);
  }
  return contents;
}, "de_ModifyEventSubscriptionResult");
var de_ModifyGlobalClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GC] != null) {
    contents[_GC] = de_GlobalCluster(output[_GC], context);
  }
  return contents;
}, "de_ModifyGlobalClusterResult");
var de_OptionGroupMembership = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_OGN] != null) {
    contents[_OGN] = (0, import_smithy_client.expectString)(output[_OGN]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  return contents;
}, "de_OptionGroupMembership");
var de_OptionGroupMembershipList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_OptionGroupMembership(entry, context);
  });
}, "de_OptionGroupMembershipList");
var de_OptionGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_OptionGroupNotFoundFault");
var de_OrderableDBInstanceOption = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_DBIC] != null) {
    contents[_DBIC] = (0, import_smithy_client.expectString)(output[_DBIC]);
  }
  if (output[_LM] != null) {
    contents[_LM] = (0, import_smithy_client.expectString)(output[_LM]);
  }
  if (output.AvailabilityZones === "") {
    contents[_AZ] = [];
  } else if (output[_AZ] != null && output[_AZ][_AZv] != null) {
    contents[_AZ] = de_AvailabilityZoneList((0, import_smithy_client.getArrayIfSingleItem)(output[_AZ][_AZv]), context);
  }
  if (output[_MAZC] != null) {
    contents[_MAZC] = (0, import_smithy_client.parseBoolean)(output[_MAZC]);
  }
  if (output[_RRC] != null) {
    contents[_RRC] = (0, import_smithy_client.parseBoolean)(output[_RRC]);
  }
  if (output[_Vp] != null) {
    contents[_Vp] = (0, import_smithy_client.parseBoolean)(output[_Vp]);
  }
  if (output[_SSE] != null) {
    contents[_SSE] = (0, import_smithy_client.parseBoolean)(output[_SSE]);
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);
  }
  if (output[_SIup] != null) {
    contents[_SIup] = (0, import_smithy_client.parseBoolean)(output[_SIup]);
  }
  if (output[_SEM] != null) {
    contents[_SEM] = (0, import_smithy_client.parseBoolean)(output[_SEM]);
  }
  if (output[_SIAMDA] != null) {
    contents[_SIAMDA] = (0, import_smithy_client.parseBoolean)(output[_SIAMDA]);
  }
  if (output[_SPI] != null) {
    contents[_SPI] = (0, import_smithy_client.parseBoolean)(output[_SPI]);
  }
  if (output[_MSS] != null) {
    contents[_MSS] = (0, import_smithy_client.strictParseInt32)(output[_MSS]);
  }
  if (output[_MSSa] != null) {
    contents[_MSSa] = (0, import_smithy_client.strictParseInt32)(output[_MSSa]);
  }
  if (output[_MIPDI] != null) {
    contents[_MIPDI] = (0, import_smithy_client.strictParseInt32)(output[_MIPDI]);
  }
  if (output[_MIPDIa] != null) {
    contents[_MIPDIa] = (0, import_smithy_client.strictParseInt32)(output[_MIPDIa]);
  }
  if (output[_MIPG] != null) {
    contents[_MIPG] = (0, import_smithy_client.strictParseFloat)(output[_MIPG]);
  }
  if (output[_MIPGa] != null) {
    contents[_MIPGa] = (0, import_smithy_client.strictParseFloat)(output[_MIPGa]);
  }
  if (output[_SGD] != null) {
    contents[_SGD] = (0, import_smithy_client.parseBoolean)(output[_SGD]);
  }
  return contents;
}, "de_OrderableDBInstanceOption");
var de_OrderableDBInstanceOptionsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_OrderableDBInstanceOption(entry, context);
  });
}, "de_OrderableDBInstanceOptionsList");
var de_OrderableDBInstanceOptionsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.OrderableDBInstanceOptions === "") {
    contents[_ODBIO] = [];
  } else if (output[_ODBIO] != null && output[_ODBIO][_ODBIOr] != null) {
    contents[_ODBIO] = de_OrderableDBInstanceOptionsList((0, import_smithy_client.getArrayIfSingleItem)(output[_ODBIO][_ODBIOr]), context);
  }
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  return contents;
}, "de_OrderableDBInstanceOptionsMessage");
var de_Parameter = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PN] != null) {
    contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
  }
  if (output[_PV] != null) {
    contents[_PV] = (0, import_smithy_client.expectString)(output[_PV]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output[_AT] != null) {
    contents[_AT] = (0, import_smithy_client.expectString)(output[_AT]);
  }
  if (output[_DT] != null) {
    contents[_DT] = (0, import_smithy_client.expectString)(output[_DT]);
  }
  if (output[_AV] != null) {
    contents[_AV] = (0, import_smithy_client.expectString)(output[_AV]);
  }
  if (output[_IM] != null) {
    contents[_IM] = (0, import_smithy_client.parseBoolean)(output[_IM]);
  }
  if (output[_MEV] != null) {
    contents[_MEV] = (0, import_smithy_client.expectString)(output[_MEV]);
  }
  if (output[_AM] != null) {
    contents[_AM] = (0, import_smithy_client.expectString)(output[_AM]);
  }
  return contents;
}, "de_Parameter");
var de_ParametersList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Parameter(entry, context);
  });
}, "de_ParametersList");
var de_PendingCloudwatchLogsExports = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.LogTypesToEnable === "") {
    contents[_LTTE] = [];
  } else if (output[_LTTE] != null && output[_LTTE][_me] != null) {
    contents[_LTTE] = de_LogTypeList((0, import_smithy_client.getArrayIfSingleItem)(output[_LTTE][_me]), context);
  }
  if (output.LogTypesToDisable === "") {
    contents[_LTTD] = [];
  } else if (output[_LTTD] != null && output[_LTTD][_me] != null) {
    contents[_LTTD] = de_LogTypeList((0, import_smithy_client.getArrayIfSingleItem)(output[_LTTD][_me]), context);
  }
  return contents;
}, "de_PendingCloudwatchLogsExports");
var de_PendingMaintenanceAction = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_A] != null) {
    contents[_A] = (0, import_smithy_client.expectString)(output[_A]);
  }
  if (output[_AAAD] != null) {
    contents[_AAAD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_AAAD]));
  }
  if (output[_FAD] != null) {
    contents[_FAD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_FAD]));
  }
  if (output[_OIS] != null) {
    contents[_OIS] = (0, import_smithy_client.expectString)(output[_OIS]);
  }
  if (output[_CAD] != null) {
    contents[_CAD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CAD]));
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  return contents;
}, "de_PendingMaintenanceAction");
var de_PendingMaintenanceActionDetails = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_PendingMaintenanceAction(entry, context);
  });
}, "de_PendingMaintenanceActionDetails");
var de_PendingMaintenanceActions = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ResourcePendingMaintenanceActions(entry, context);
  });
}, "de_PendingMaintenanceActions");
var de_PendingMaintenanceActionsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.PendingMaintenanceActions === "") {
    contents[_PMA] = [];
  } else if (output[_PMA] != null && output[_PMA][_RPMA] != null) {
    contents[_PMA] = de_PendingMaintenanceActions((0, import_smithy_client.getArrayIfSingleItem)(output[_PMA][_RPMA]), context);
  }
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
  }
  return contents;
}, "de_PendingMaintenanceActionsMessage");
var de_PendingModifiedValues = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBIC] != null) {
    contents[_DBIC] = (0, import_smithy_client.expectString)(output[_DBIC]);
  }
  if (output[_AS] != null) {
    contents[_AS] = (0, import_smithy_client.strictParseInt32)(output[_AS]);
  }
  if (output[_MUP] != null) {
    contents[_MUP] = (0, import_smithy_client.expectString)(output[_MUP]);
  }
  if (output[_P] != null) {
    contents[_P] = (0, import_smithy_client.strictParseInt32)(output[_P]);
  }
  if (output[_BRP] != null) {
    contents[_BRP] = (0, import_smithy_client.strictParseInt32)(output[_BRP]);
  }
  if (output[_MAZ] != null) {
    contents[_MAZ] = (0, import_smithy_client.parseBoolean)(output[_MAZ]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_LM] != null) {
    contents[_LM] = (0, import_smithy_client.expectString)(output[_LM]);
  }
  if (output[_I] != null) {
    contents[_I] = (0, import_smithy_client.strictParseInt32)(output[_I]);
  }
  if (output[_DBII] != null) {
    contents[_DBII] = (0, import_smithy_client.expectString)(output[_DBII]);
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);
  }
  if (output[_CACI] != null) {
    contents[_CACI] = (0, import_smithy_client.expectString)(output[_CACI]);
  }
  if (output[_DBSGN] != null) {
    contents[_DBSGN] = (0, import_smithy_client.expectString)(output[_DBSGN]);
  }
  if (output[_PCLE] != null) {
    contents[_PCLE] = de_PendingCloudwatchLogsExports(output[_PCLE], context);
  }
  return contents;
}, "de_PendingModifiedValues");
var de_PromoteReadReplicaDBClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBC] != null) {
    contents[_DBC] = de_DBCluster(output[_DBC], context);
  }
  return contents;
}, "de_PromoteReadReplicaDBClusterResult");
var de_ProvisionedIopsNotAvailableInAZFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_ProvisionedIopsNotAvailableInAZFault");
var de_Range = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Fr] != null) {
    contents[_Fr] = (0, import_smithy_client.strictParseInt32)(output[_Fr]);
  }
  if (output[_To] != null) {
    contents[_To] = (0, import_smithy_client.strictParseInt32)(output[_To]);
  }
  if (output[_Ste] != null) {
    contents[_Ste] = (0, import_smithy_client.strictParseInt32)(output[_Ste]);
  }
  return contents;
}, "de_Range");
var de_RangeList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Range(entry, context);
  });
}, "de_RangeList");
var de_ReadersArnList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ReadersArnList");
var de_ReadReplicaDBClusterIdentifierList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ReadReplicaDBClusterIdentifierList");
var de_ReadReplicaDBInstanceIdentifierList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ReadReplicaDBInstanceIdentifierList");
var de_ReadReplicaIdentifierList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ReadReplicaIdentifierList");
var de_RebootDBInstanceResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBI] != null) {
    contents[_DBI] = de_DBInstance(output[_DBI], context);
  }
  return contents;
}, "de_RebootDBInstanceResult");
var de_RemoveFromGlobalClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GC] != null) {
    contents[_GC] = de_GlobalCluster(output[_GC], context);
  }
  return contents;
}, "de_RemoveFromGlobalClusterResult");
var de_RemoveSourceIdentifierFromSubscriptionResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ES] != null) {
    contents[_ES] = de_EventSubscription(output[_ES], context);
  }
  return contents;
}, "de_RemoveSourceIdentifierFromSubscriptionResult");
var de_ResourceNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_ResourceNotFoundFault");
var de_ResourcePendingMaintenanceActions = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RI] != null) {
    contents[_RI] = (0, import_smithy_client.expectString)(output[_RI]);
  }
  if (output.PendingMaintenanceActionDetails === "") {
    contents[_PMAD] = [];
  } else if (output[_PMAD] != null && output[_PMAD][_PMAe] != null) {
    contents[_PMAD] = de_PendingMaintenanceActionDetails((0, import_smithy_client.getArrayIfSingleItem)(output[_PMAD][_PMAe]), context);
  }
  return contents;
}, "de_ResourcePendingMaintenanceActions");
var de_RestoreDBClusterFromSnapshotResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBC] != null) {
    contents[_DBC] = de_DBCluster(output[_DBC], context);
  }
  return contents;
}, "de_RestoreDBClusterFromSnapshotResult");
var de_RestoreDBClusterToPointInTimeResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBC] != null) {
    contents[_DBC] = de_DBCluster(output[_DBC], context);
  }
  return contents;
}, "de_RestoreDBClusterToPointInTimeResult");
var de_ServerlessV2ScalingConfigurationInfo = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_MC] != null) {
    contents[_MC] = (0, import_smithy_client.strictParseFloat)(output[_MC]);
  }
  if (output[_MCa] != null) {
    contents[_MCa] = (0, import_smithy_client.strictParseFloat)(output[_MCa]);
  }
  return contents;
}, "de_ServerlessV2ScalingConfigurationInfo");
var de_SharedSnapshotQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_SharedSnapshotQuotaExceededFault");
var de_SnapshotQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_SnapshotQuotaExceededFault");
var de_SNSInvalidTopicFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_SNSInvalidTopicFault");
var de_SNSNoAuthorizationFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_SNSNoAuthorizationFault");
var de_SNSTopicArnNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_SNSTopicArnNotFoundFault");
var de_SourceIdsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_SourceIdsList");
var de_SourceNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_SourceNotFoundFault");
var de_StartDBClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBC] != null) {
    contents[_DBC] = de_DBCluster(output[_DBC], context);
  }
  return contents;
}, "de_StartDBClusterResult");
var de_StopDBClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DBC] != null) {
    contents[_DBC] = de_DBCluster(output[_DBC], context);
  }
  return contents;
}, "de_StopDBClusterResult");
var de_StorageQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_StorageQuotaExceededFault");
var de_StorageTypeNotSupportedFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_StorageTypeNotSupportedFault");
var de_StringList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_StringList");
var de_Subnet = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SIub] != null) {
    contents[_SIub] = (0, import_smithy_client.expectString)(output[_SIub]);
  }
  if (output[_SAZu] != null) {
    contents[_SAZu] = de_AvailabilityZone(output[_SAZu], context);
  }
  if (output[_SS] != null) {
    contents[_SS] = (0, import_smithy_client.expectString)(output[_SS]);
  }
  return contents;
}, "de_Subnet");
var de_SubnetAlreadyInUse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_SubnetAlreadyInUse");
var de_SubnetList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Subnet(entry, context);
  });
}, "de_SubnetList");
var de_SubscriptionAlreadyExistFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_SubscriptionAlreadyExistFault");
var de_SubscriptionCategoryNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_SubscriptionCategoryNotFoundFault");
var de_SubscriptionNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
  }
  return contents;
}, "de_SubscriptionNotFoundFault");
var de_SupportedCharacterSetsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_CharacterSet(entry, context);
  });
}, "de_SupportedCharacterSetsList");
var de_SupportedTimezonesList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Timezone(entry, context);
  });
}, "de_SupportedTimezonesList");
var de_SwitchoverGlobalClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GC] != null) {
    contents[_GC] = de_GlobalCluster(output[_GC], context);
  }
  return contents;
}, "de_SwitchoverGlobalClusterResult");
var de_Tag = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
  }
  if (output[_Val] != null) {
    contents[_Val] = (0, import_smithy_client.expectString)(output[_Val]);
  }
  return contents;
}, "de_Tag");
var de_TagList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Tag(entry, context);
  });
}, "de_TagList");
var de_TagListMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TagList === "") {
    contents[_TL] = [];
  } else if (output[_TL] != null && output[_TL][_Ta] != null) {
    contents[_TL] = de_TagList((0, import_smithy_client.getArrayIfSingleItem)(output[_TL][_Ta]), context);
  }
  return contents;
}, "de_TagListMessage");
var de_Timezone = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_TN] != null) {
    contents[_TN] = (0, import_smithy_client.expectString)(output[_TN]);
  }
  return contents;
}, "de_Timezone");
var de_UpgradeTarget = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (output[_AU] != null) {
    contents[_AU] = (0, import_smithy_client.parseBoolean)(output[_AU]);
  }
  if (output[_IMVU] != null) {
    contents[_IMVU] = (0, import_smithy_client.parseBoolean)(output[_IMVU]);
  }
  if (output[_SGD] != null) {
    contents[_SGD] = (0, import_smithy_client.parseBoolean)(output[_SGD]);
  }
  return contents;
}, "de_UpgradeTarget");
var de_ValidDBInstanceModificationsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Storage === "") {
    contents[_Sto] = [];
  } else if (output[_Sto] != null && output[_Sto][_VSO] != null) {
    contents[_Sto] = de_ValidStorageOptionsList((0, import_smithy_client.getArrayIfSingleItem)(output[_Sto][_VSO]), context);
  }
  return contents;
}, "de_ValidDBInstanceModificationsMessage");
var de_ValidStorageOptions = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);
  }
  if (output.StorageSize === "") {
    contents[_SSt] = [];
  } else if (output[_SSt] != null && output[_SSt][_Ra] != null) {
    contents[_SSt] = de_RangeList((0, import_smithy_client.getArrayIfSingleItem)(output[_SSt][_Ra]), context);
  }
  if (output.ProvisionedIops === "") {
    contents[_PI] = [];
  } else if (output[_PI] != null && output[_PI][_Ra] != null) {
    contents[_PI] = de_RangeList((0, import_smithy_client.getArrayIfSingleItem)(output[_PI][_Ra]), context);
  }
  if (output.IopsToStorageRatio === "") {
    contents[_ITSR] = [];
  } else if (output[_ITSR] != null && output[_ITSR][_DR] != null) {
    contents[_ITSR] = de_DoubleRangeList((0, import_smithy_client.getArrayIfSingleItem)(output[_ITSR][_DR]), context);
  }
  return contents;
}, "de_ValidStorageOptions");
var de_ValidStorageOptionsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ValidStorageOptions(entry, context);
  });
}, "de_ValidStorageOptionsList");
var de_ValidUpgradeTargetList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_UpgradeTarget(entry, context);
  });
}, "de_ValidUpgradeTargetList");
var de_VpcSecurityGroupMembership = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_VSGIp] != null) {
    contents[_VSGIp] = (0, import_smithy_client.expectString)(output[_VSGIp]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  return contents;
}, "de_VpcSecurityGroupMembership");
var de_VpcSecurityGroupMembershipList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_VpcSecurityGroupMembership(entry, context);
  });
}, "de_VpcSecurityGroupMembershipList");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var throwDefaultError = (0, import_smithy_client.withBaseException)(NeptuneServiceException);
var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new import_protocol_http.HttpRequest(contents);
}, "buildHttpRpcRequest");
var SHARED_HEADERS = {
  "content-type": "application/x-www-form-urlencoded"
};
var _ = "2014-10-31";
var _A = "Action";
var _AA = "ApplyAction";
var _AAAD = "AutoAppliedAfterDate";
var _ADL = "AllowDataLoss";
var _AI = "ApplyImmediately";
var _AM = "ApplyMethod";
var _AMVU = "AutoMinorVersionUpgrade";
var _AMVUl = "AllowMajorVersionUpgrade";
var _AN = "AttributeName";
var _APMA = "ApplyPendingMaintenanceAction";
var _AR = "AssociatedRoles";
var _ART = "AutomaticRestartTime";
var _ARTDBC = "AddRoleToDBCluster";
var _AS = "AllocatedStorage";
var _ASITS = "AddSourceIdentifierToSubscription";
var _AT = "ApplyType";
var _ATTR = "AddTagsToResource";
var _AU = "AutoUpgrade";
var _AV = "AllowedValues";
var _AVt = "AttributeValues";
var _AVtt = "AttributeValue";
var _AZ = "AvailabilityZones";
var _AZv = "AvailabilityZone";
var _Ad = "Address";
var _BRP = "BackupRetentionPeriod";
var _CAC = "CrossAccountClone";
var _CACI = "CACertificateIdentifier";
var _CAD = "CurrentApplyDate";
var _CAI = "CustomerAwsId";
var _CCT = "ClusterCreateTime";
var _CDBC = "CreateDBCluster";
var _CDBCE = "CreateDBClusterEndpoint";
var _CDBCPG = "CopyDBClusterParameterGroup";
var _CDBCPGr = "CreateDBClusterParameterGroup";
var _CDBCS = "CopyDBClusterSnapshot";
var _CDBCSr = "CreateDBClusterSnapshot";
var _CDBI = "CreateDBInstance";
var _CDBPG = "CopyDBParameterGroup";
var _CDBPGr = "CreateDBParameterGroup";
var _CDBSG = "CreateDBSubnetGroup";
var _CES = "CreateEventSubscription";
var _CET = "CustomEndpointType";
var _CGC = "CreateGlobalCluster";
var _CGI = "CloneGroupId";
var _CLEC = "CloudwatchLogsExportConfiguration";
var _CS = "CharacterSet";
var _CSD = "CharacterSetDescription";
var _CSI = "CustSubscriptionId";
var _CSN = "CharacterSetName";
var _CT = "CopyTags";
var _CTTS = "CopyTagsToSnapshot";
var _D = "Description";
var _DBC = "DBCluster";
var _DBCA = "DBClusterArn";
var _DBCE = "DBClusterEndpoints";
var _DBCEA = "DBClusterEndpointArn";
var _DBCEI = "DBClusterEndpointIdentifier";
var _DBCEL = "DBClusterEndpointList";
var _DBCERI = "DBClusterEndpointResourceIdentifier";
var _DBCI = "DBClusterIdentifier";
var _DBCM = "DBClusterMembers";
var _DBCMl = "DBClusterMember";
var _DBCOG = "DBClusterOptionGroup";
var _DBCOGM = "DBClusterOptionGroupMemberships";
var _DBCOGN = "DBClusterOptionGroupName";
var _DBCPG = "DBClusterParameterGroup";
var _DBCPGA = "DBClusterParameterGroupArn";
var _DBCPGN = "DBClusterParameterGroupName";
var _DBCPGS = "DBClusterParameterGroupStatus";
var _DBCPGl = "DBClusterParameterGroups";
var _DBCR = "DBClusterRole";
var _DBCS = "DBClusterSnapshot";
var _DBCSA = "DBClusterSnapshotArn";
var _DBCSAR = "DBClusterSnapshotAttributesResult";
var _DBCSAl = "DBClusterSnapshotAttributes";
var _DBCSAlu = "DBClusterSnapshotAttribute";
var _DBCSI = "DBClusterSnapshotIdentifier";
var _DBCSl = "DBClusterSnapshots";
var _DBCl = "DBClusters";
var _DBED = "DBEngineDescription";
var _DBEV = "DBEngineVersions";
var _DBEVD = "DBEngineVersionDescription";
var _DBEVn = "DBEngineVersion";
var _DBI = "DBInstance";
var _DBIA = "DBInstanceArn";
var _DBIC = "DBInstanceClass";
var _DBII = "DBInstanceIdentifier";
var _DBIPGN = "DBInstanceParameterGroupName";
var _DBIS = "DBInstanceStatus";
var _DBISI = "DBInstanceStatusInfo";
var _DBIn = "DBInstances";
var _DBN = "DBName";
var _DBPG = "DBParameterGroup";
var _DBPGA = "DBParameterGroupArn";
var _DBPGF = "DBParameterGroupFamily";
var _DBPGN = "DBParameterGroupName";
var _DBPGa = "DBParameterGroups";
var _DBPN = "DBPortNumber";
var _DBSG = "DBSecurityGroups";
var _DBSGA = "DBSubnetGroupArn";
var _DBSGD = "DBSubnetGroupDescription";
var _DBSGN = "DBSubnetGroupName";
var _DBSGNe = "DBSecurityGroupName";
var _DBSGe = "DBSecurityGroup";
var _DBSGu = "DBSubnetGroup";
var _DBSGub = "DBSubnetGroups";
var _DCI = "DbClusterIdentifier";
var _DCRI = "DbClusterResourceId";
var _DCS = "DefaultCharacterSet";
var _DDBC = "DeleteDBCluster";
var _DDBCE = "DeleteDBClusterEndpoint";
var _DDBCEe = "DescribeDBClusterEndpoints";
var _DDBCP = "DescribeDBClusterParameters";
var _DDBCPG = "DeleteDBClusterParameterGroup";
var _DDBCPGe = "DescribeDBClusterParameterGroups";
var _DDBCS = "DeleteDBClusterSnapshot";
var _DDBCSA = "DescribeDBClusterSnapshotAttributes";
var _DDBCSe = "DescribeDBClusterSnapshots";
var _DDBCe = "DescribeDBClusters";
var _DDBEV = "DescribeDBEngineVersions";
var _DDBI = "DeleteDBInstance";
var _DDBIe = "DescribeDBInstances";
var _DDBP = "DescribeDBParameters";
var _DDBPG = "DeleteDBParameterGroup";
var _DDBPGe = "DescribeDBParameterGroups";
var _DDBSG = "DeleteDBSubnetGroup";
var _DDBSGe = "DescribeDBSubnetGroups";
var _DE = "DescribeEvents";
var _DEC = "DescribeEventCategories";
var _DEDCP = "DescribeEngineDefaultClusterParameters";
var _DEDP = "DescribeEngineDefaultParameters";
var _DES = "DeleteEventSubscription";
var _DESe = "DescribeEventSubscriptions";
var _DGC = "DeleteGlobalCluster";
var _DGCe = "DescribeGlobalClusters";
var _DIAMRN = "DomainIAMRoleName";
var _DIP = "DbInstancePort";
var _DLT = "DisableLogTypes";
var _DM = "DomainMemberships";
var _DMo = "DomainMembership";
var _DN = "DatabaseName";
var _DO = "DefaultOnly";
var _DODBIO = "DescribeOrderableDBInstanceOptions";
var _DP = "DeletionProtection";
var _DPMA = "DescribePendingMaintenanceActions";
var _DR = "DoubleRange";
var _DRI = "DbiResourceId";
var _DT = "DataType";
var _DVDBIM = "DescribeValidDBInstanceModifications";
var _Da = "Date";
var _Do = "Domain";
var _Du = "Duration";
var _E = "Engine";
var _EC = "EventCategories";
var _ECL = "EventCategoriesList";
var _ECLE = "EnableCloudwatchLogsExports";
var _ECLEn = "EnabledCloudwatchLogsExports";
var _ECM = "EventCategoriesMap";
var _ECML = "EventCategoriesMapList";
var _ECv = "EventCategory";
var _ED = "EngineDefaults";
var _EIAMDA = "EnableIAMDatabaseAuthentication";
var _ELT = "EnableLogTypes";
var _ELTx = "ExportableLogTypes";
var _EM = "ExcludedMembers";
var _EMRA = "EnhancedMonitoringResourceArn";
var _EPI = "EnablePerformanceInsights";
var _ERT = "EarliestRestorableTime";
var _ES = "EventSubscription";
var _ESA = "EventSubscriptionArn";
var _ESL = "EventSubscriptionsList";
var _ET = "EndpointType";
var _ETn = "EndTime";
var _EV = "EngineVersion";
var _En = "Enabled";
var _End = "Endpoint";
var _Ev = "Events";
var _Eve = "Event";
var _F = "Filters";
var _FAD = "ForcedApplyDate";
var _FDBC = "FailoverDBCluster";
var _FDBSI = "FinalDBSnapshotIdentifier";
var _FDCA = "FromDbClusterArn";
var _FF = "ForceFailover";
var _FGC = "FailoverGlobalCluster";
var _FN = "FeatureName";
var _FQDN = "FQDN";
var _FS = "FailoverState";
var _Fr = "From";
var _GC = "GlobalCluster";
var _GCA = "GlobalClusterArn";
var _GCI = "GlobalClusterIdentifier";
var _GCM = "GlobalClusterMembers";
var _GCMl = "GlobalClusterMember";
var _GCRI = "GlobalClusterResourceId";
var _GCl = "GlobalClusters";
var _HZI = "HostedZoneId";
var _I = "Iops";
var _IAMDAE = "IAMDatabaseAuthenticationEnabled";
var _IAMRN = "IAMRoleName";
var _ICT = "InstanceCreateTime";
var _ICW = "IsClusterWriter";
var _IDLA = "IsDataLossAllowed";
var _IM = "IsModifiable";
var _IMVU = "IsMajorVersionUpgrade";
var _IOONAMT = "IOOptimizedNextAllowedModificationTime";
var _IP = "IncludePublic";
var _IS = "IncludeShared";
var _ITSR = "IopsToStorageRatio";
var _IW = "IsWriter";
var _K = "Key";
var _KKI = "KmsKeyId";
var _LM = "LicenseModel";
var _LRT = "LatestRestorableTime";
var _LSCS = "ListSupportedCharacterSets";
var _LST = "ListSupportedTimezones";
var _LTFR = "ListTagsForResource";
var _LTTD = "LogTypesToDisable";
var _LTTE = "LogTypesToEnable";
var _M = "Marker";
var _MAZ = "MultiAZ";
var _MAZC = "MultiAZCapable";
var _MC = "MinCapacity";
var _MCa = "MaxCapacity";
var _MDBC = "ModifyDBCluster";
var _MDBCE = "ModifyDBClusterEndpoint";
var _MDBCPG = "ModifyDBClusterParameterGroup";
var _MDBCSA = "ModifyDBClusterSnapshotAttribute";
var _MDBI = "ModifyDBInstance";
var _MDBPG = "ModifyDBParameterGroup";
var _MDBSG = "ModifyDBSubnetGroup";
var _MES = "ModifyEventSubscription";
var _MEV = "MinimumEngineVersion";
var _MGC = "ModifyGlobalCluster";
var _MI = "MonitoringInterval";
var _MIPDI = "MinIopsPerDbInstance";
var _MIPDIa = "MaxIopsPerDbInstance";
var _MIPG = "MinIopsPerGib";
var _MIPGa = "MaxIopsPerGib";
var _MR = "MaxRecords";
var _MRA = "MonitoringRoleArn";
var _MSS = "MinStorageSize";
var _MSSa = "MaxStorageSize";
var _MU = "MasterUsername";
var _MUP = "MasterUserPassword";
var _Me = "Message";
var _N = "Name";
var _NDBCI = "NewDBClusterIdentifier";
var _NDBII = "NewDBInstanceIdentifier";
var _NGCI = "NewGlobalClusterIdentifier";
var _No = "Normal";
var _ODBIO = "OrderableDBInstanceOptions";
var _ODBIOr = "OrderableDBInstanceOption";
var _OGM = "OptionGroupMemberships";
var _OGMp = "OptionGroupMembership";
var _OGN = "OptionGroupName";
var _OIS = "OptInStatus";
var _OIT = "OptInType";
var _P = "Port";
var _PA = "PubliclyAccessible";
var _PAS = "ParameterApplyStatus";
var _PBW = "PreferredBackupWindow";
var _PCLE = "PendingCloudwatchLogsExports";
var _PI = "ProvisionedIops";
var _PIE = "PerformanceInsightsEnabled";
var _PIKMSKI = "PerformanceInsightsKMSKeyId";
var _PMA = "PendingMaintenanceActions";
var _PMAD = "PendingMaintenanceActionDetails";
var _PMAe = "PendingMaintenanceAction";
var _PMV = "PendingModifiedValues";
var _PMW = "PreferredMaintenanceWindow";
var _PN = "ParameterName";
var _PP = "PercentProgress";
var _PRRDBC = "PromoteReadReplicaDBCluster";
var _PSU = "PreSignedUrl";
var _PT = "PromotionTier";
var _PV = "ParameterValue";
var _Pa = "Parameters";
var _Par = "Parameter";
var _R = "Readers";
var _RA = "RoleArn";
var _RAP = "ResetAllParameters";
var _RDBCFS = "RestoreDBClusterFromSnapshot";
var _RDBCPG = "ResetDBClusterParameterGroup";
var _RDBCTPIT = "RestoreDBClusterToPointInTime";
var _RDBI = "RebootDBInstance";
var _RDBPG = "ResetDBParameterGroup";
var _RE = "ReaderEndpoint";
var _RFGC = "RemoveFromGlobalCluster";
var _RI = "ResourceIdentifier";
var _RN = "ResourceName";
var _RPMA = "ResourcePendingMaintenanceActions";
var _RRC = "ReadReplicaCapable";
var _RRDBCI = "ReadReplicaDBClusterIdentifiers";
var _RRDBCIe = "ReadReplicaDBClusterIdentifier";
var _RRDBII = "ReadReplicaDBInstanceIdentifiers";
var _RRDBIIe = "ReadReplicaDBInstanceIdentifier";
var _RRFDBC = "RemoveRoleFromDBCluster";
var _RRI = "ReadReplicaIdentifiers";
var _RRIe = "ReadReplicaIdentifier";
var _RRSDBII = "ReadReplicaSourceDBInstanceIdentifier";
var _RSI = "ReplicationSourceIdentifier";
var _RSIFS = "RemoveSourceIdentifierFromSubscription";
var _RT = "RestoreType";
var _RTFR = "RemoveTagsFromResource";
var _RTT = "RestoreToTime";
var _Ra = "Range";
var _S = "Source";
var _SA = "SourceArn";
var _SAZ = "SecondaryAvailabilityZone";
var _SAZu = "SubnetAvailabilityZone";
var _SCS = "SupportedCharacterSets";
var _SCT = "SnapshotCreateTime";
var _SCTu = "SubscriptionCreationTime";
var _SDBC = "StartDBCluster";
var _SDBCI = "SourceDBClusterIdentifier";
var _SDBCPGI = "SourceDBClusterParameterGroupIdentifier";
var _SDBCSA = "SourceDBClusterSnapshotArn";
var _SDBCSI = "SourceDBClusterSnapshotIdentifier";
var _SDBCt = "StopDBCluster";
var _SDBPGI = "SourceDBParameterGroupIdentifier";
var _SE = "StorageEncrypted";
var _SEM = "SupportsEnhancedMonitoring";
var _SFS = "SkipFinalSnapshot";
var _SGC = "SwitchoverGlobalCluster";
var _SGD = "SupportsGlobalDatabases";
var _SGS = "SubnetGroupStatus";
var _SI = "SourceIdentifier";
var _SIAMDA = "SupportsIAMDatabaseAuthentication";
var _SIL = "SourceIdsList";
var _SIn = "SnapshotIdentifier";
var _SIo = "SourceIds";
var _SIou = "SourceId";
var _SIt = "StatusInfos";
var _SIu = "SubnetIds";
var _SIub = "SubnetIdentifier";
var _SIup = "SupportsIops";
var _SLETCL = "SupportsLogExportsToCloudwatchLogs";
var _SM = "StaticMembers";
var _SN = "SubscriptionName";
var _SPI = "SupportsPerformanceInsights";
var _SRR = "SupportsReadReplica";
var _SS = "SubnetStatus";
var _SSE = "SupportsStorageEncryption";
var _SSt = "StorageSize";
var _ST = "StorageType";
var _STA = "SnsTopicArn";
var _STn = "SnapshotType";
var _STo = "SourceType";
var _STt = "StartTime";
var _STta = "StatusType";
var _STu = "SupportedTimezones";
var _SVSC = "ServerlessV2ScalingConfiguration";
var _St = "Status";
var _Ste = "Step";
var _Sto = "Storage";
var _Su = "Subnets";
var _Sub = "Subnet";
var _Sw = "Switchover";
var _T = "Tags";
var _TCA = "TdeCredentialArn";
var _TCP = "TdeCredentialPassword";
var _TDBCPGD = "TargetDBClusterParameterGroupDescription";
var _TDBCPGI = "TargetDBClusterParameterGroupIdentifier";
var _TDBCSI = "TargetDBClusterSnapshotIdentifier";
var _TDBII = "TargetDBInstanceIdentifier";
var _TDBPGD = "TargetDBParameterGroupDescription";
var _TDBPGI = "TargetDBParameterGroupIdentifier";
var _TDCA = "ToDbClusterArn";
var _TDCI = "TargetDbClusterIdentifier";
var _TK = "TagKeys";
var _TL = "TagList";
var _TN = "TimezoneName";
var _Ta = "Tag";
var _Ti = "Timezone";
var _To = "To";
var _ULRT = "UseLatestRestorableTime";
var _UT = "UpgradeTarget";
var _V = "Version";
var _VDBIMM = "ValidDBInstanceModificationsMessage";
var _VI = "VpcId";
var _VSG = "VpcSecurityGroups";
var _VSGI = "VpcSecurityGroupIds";
var _VSGIp = "VpcSecurityGroupId";
var _VSGM = "VpcSecurityGroupMembership";
var _VSO = "ValidStorageOptions";
var _VTA = "ValuesToAdd";
var _VTR = "ValuesToRemove";
var _VUT = "ValidUpgradeTarget";
var _Va = "Values";
var _Val = "Value";
var _Vp = "Vpc";
var _m = "message";
var _me = "member";
var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
  if (data.Error?.Code !== void 0) {
    return data.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
}, "loadQueryErrorCode");

// src/commands/AddRoleToDBClusterCommand.ts
var AddRoleToDBClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "AddRoleToDBCluster", {}).n("NeptuneClient", "AddRoleToDBClusterCommand").f(void 0, void 0).ser(se_AddRoleToDBClusterCommand).de(de_AddRoleToDBClusterCommand).build() {
  static {
    __name(this, "AddRoleToDBClusterCommand");
  }
};

// src/commands/AddSourceIdentifierToSubscriptionCommand.ts



var AddSourceIdentifierToSubscriptionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "AddSourceIdentifierToSubscription", {}).n("NeptuneClient", "AddSourceIdentifierToSubscriptionCommand").f(void 0, void 0).ser(se_AddSourceIdentifierToSubscriptionCommand).de(de_AddSourceIdentifierToSubscriptionCommand).build() {
  static {
    __name(this, "AddSourceIdentifierToSubscriptionCommand");
  }
};

// src/commands/AddTagsToResourceCommand.ts



var AddTagsToResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "AddTagsToResource", {}).n("NeptuneClient", "AddTagsToResourceCommand").f(void 0, void 0).ser(se_AddTagsToResourceCommand).de(de_AddTagsToResourceCommand).build() {
  static {
    __name(this, "AddTagsToResourceCommand");
  }
};

// src/commands/ApplyPendingMaintenanceActionCommand.ts



var ApplyPendingMaintenanceActionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ApplyPendingMaintenanceAction", {}).n("NeptuneClient", "ApplyPendingMaintenanceActionCommand").f(void 0, void 0).ser(se_ApplyPendingMaintenanceActionCommand).de(de_ApplyPendingMaintenanceActionCommand).build() {
  static {
    __name(this, "ApplyPendingMaintenanceActionCommand");
  }
};

// src/commands/CopyDBClusterParameterGroupCommand.ts



var CopyDBClusterParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "CopyDBClusterParameterGroup", {}).n("NeptuneClient", "CopyDBClusterParameterGroupCommand").f(void 0, void 0).ser(se_CopyDBClusterParameterGroupCommand).de(de_CopyDBClusterParameterGroupCommand).build() {
  static {
    __name(this, "CopyDBClusterParameterGroupCommand");
  }
};

// src/commands/CopyDBClusterSnapshotCommand.ts
var import_middleware_sdk_rds = require("@aws-sdk/middleware-sdk-rds");



var CopyDBClusterSnapshotCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_rds.getCrossRegionPresignedUrlPlugin)(config)
  ];
}).s("AmazonRDSv19", "CopyDBClusterSnapshot", {}).n("NeptuneClient", "CopyDBClusterSnapshotCommand").f(void 0, void 0).ser(se_CopyDBClusterSnapshotCommand).de(de_CopyDBClusterSnapshotCommand).build() {
  static {
    __name(this, "CopyDBClusterSnapshotCommand");
  }
};

// src/commands/CopyDBParameterGroupCommand.ts



var CopyDBParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "CopyDBParameterGroup", {}).n("NeptuneClient", "CopyDBParameterGroupCommand").f(void 0, void 0).ser(se_CopyDBParameterGroupCommand).de(de_CopyDBParameterGroupCommand).build() {
  static {
    __name(this, "CopyDBParameterGroupCommand");
  }
};

// src/commands/CreateDBClusterCommand.ts




var CreateDBClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_rds.getCrossRegionPresignedUrlPlugin)(config)
  ];
}).s("AmazonRDSv19", "CreateDBCluster", {}).n("NeptuneClient", "CreateDBClusterCommand").f(void 0, void 0).ser(se_CreateDBClusterCommand).de(de_CreateDBClusterCommand).build() {
  static {
    __name(this, "CreateDBClusterCommand");
  }
};

// src/commands/CreateDBClusterEndpointCommand.ts



var CreateDBClusterEndpointCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "CreateDBClusterEndpoint", {}).n("NeptuneClient", "CreateDBClusterEndpointCommand").f(void 0, void 0).ser(se_CreateDBClusterEndpointCommand).de(de_CreateDBClusterEndpointCommand).build() {
  static {
    __name(this, "CreateDBClusterEndpointCommand");
  }
};

// src/commands/CreateDBClusterParameterGroupCommand.ts



var CreateDBClusterParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "CreateDBClusterParameterGroup", {}).n("NeptuneClient", "CreateDBClusterParameterGroupCommand").f(void 0, void 0).ser(se_CreateDBClusterParameterGroupCommand).de(de_CreateDBClusterParameterGroupCommand).build() {
  static {
    __name(this, "CreateDBClusterParameterGroupCommand");
  }
};

// src/commands/CreateDBClusterSnapshotCommand.ts



var CreateDBClusterSnapshotCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "CreateDBClusterSnapshot", {}).n("NeptuneClient", "CreateDBClusterSnapshotCommand").f(void 0, void 0).ser(se_CreateDBClusterSnapshotCommand).de(de_CreateDBClusterSnapshotCommand).build() {
  static {
    __name(this, "CreateDBClusterSnapshotCommand");
  }
};

// src/commands/CreateDBInstanceCommand.ts



var CreateDBInstanceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "CreateDBInstance", {}).n("NeptuneClient", "CreateDBInstanceCommand").f(CreateDBInstanceMessageFilterSensitiveLog, void 0).ser(se_CreateDBInstanceCommand).de(de_CreateDBInstanceCommand).build() {
  static {
    __name(this, "CreateDBInstanceCommand");
  }
};

// src/commands/CreateDBParameterGroupCommand.ts



var CreateDBParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "CreateDBParameterGroup", {}).n("NeptuneClient", "CreateDBParameterGroupCommand").f(void 0, void 0).ser(se_CreateDBParameterGroupCommand).de(de_CreateDBParameterGroupCommand).build() {
  static {
    __name(this, "CreateDBParameterGroupCommand");
  }
};

// src/commands/CreateDBSubnetGroupCommand.ts



var CreateDBSubnetGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "CreateDBSubnetGroup", {}).n("NeptuneClient", "CreateDBSubnetGroupCommand").f(void 0, void 0).ser(se_CreateDBSubnetGroupCommand).de(de_CreateDBSubnetGroupCommand).build() {
  static {
    __name(this, "CreateDBSubnetGroupCommand");
  }
};

// src/commands/CreateEventSubscriptionCommand.ts



var CreateEventSubscriptionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "CreateEventSubscription", {}).n("NeptuneClient", "CreateEventSubscriptionCommand").f(void 0, void 0).ser(se_CreateEventSubscriptionCommand).de(de_CreateEventSubscriptionCommand).build() {
  static {
    __name(this, "CreateEventSubscriptionCommand");
  }
};

// src/commands/CreateGlobalClusterCommand.ts



var CreateGlobalClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "CreateGlobalCluster", {}).n("NeptuneClient", "CreateGlobalClusterCommand").f(void 0, void 0).ser(se_CreateGlobalClusterCommand).de(de_CreateGlobalClusterCommand).build() {
  static {
    __name(this, "CreateGlobalClusterCommand");
  }
};

// src/commands/DeleteDBClusterCommand.ts



var DeleteDBClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DeleteDBCluster", {}).n("NeptuneClient", "DeleteDBClusterCommand").f(void 0, void 0).ser(se_DeleteDBClusterCommand).de(de_DeleteDBClusterCommand).build() {
  static {
    __name(this, "DeleteDBClusterCommand");
  }
};

// src/commands/DeleteDBClusterEndpointCommand.ts



var DeleteDBClusterEndpointCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DeleteDBClusterEndpoint", {}).n("NeptuneClient", "DeleteDBClusterEndpointCommand").f(void 0, void 0).ser(se_DeleteDBClusterEndpointCommand).de(de_DeleteDBClusterEndpointCommand).build() {
  static {
    __name(this, "DeleteDBClusterEndpointCommand");
  }
};

// src/commands/DeleteDBClusterParameterGroupCommand.ts



var DeleteDBClusterParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DeleteDBClusterParameterGroup", {}).n("NeptuneClient", "DeleteDBClusterParameterGroupCommand").f(void 0, void 0).ser(se_DeleteDBClusterParameterGroupCommand).de(de_DeleteDBClusterParameterGroupCommand).build() {
  static {
    __name(this, "DeleteDBClusterParameterGroupCommand");
  }
};

// src/commands/DeleteDBClusterSnapshotCommand.ts



var DeleteDBClusterSnapshotCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DeleteDBClusterSnapshot", {}).n("NeptuneClient", "DeleteDBClusterSnapshotCommand").f(void 0, void 0).ser(se_DeleteDBClusterSnapshotCommand).de(de_DeleteDBClusterSnapshotCommand).build() {
  static {
    __name(this, "DeleteDBClusterSnapshotCommand");
  }
};

// src/commands/DeleteDBInstanceCommand.ts



var DeleteDBInstanceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DeleteDBInstance", {}).n("NeptuneClient", "DeleteDBInstanceCommand").f(void 0, void 0).ser(se_DeleteDBInstanceCommand).de(de_DeleteDBInstanceCommand).build() {
  static {
    __name(this, "DeleteDBInstanceCommand");
  }
};

// src/commands/DeleteDBParameterGroupCommand.ts



var DeleteDBParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DeleteDBParameterGroup", {}).n("NeptuneClient", "DeleteDBParameterGroupCommand").f(void 0, void 0).ser(se_DeleteDBParameterGroupCommand).de(de_DeleteDBParameterGroupCommand).build() {
  static {
    __name(this, "DeleteDBParameterGroupCommand");
  }
};

// src/commands/DeleteDBSubnetGroupCommand.ts



var DeleteDBSubnetGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DeleteDBSubnetGroup", {}).n("NeptuneClient", "DeleteDBSubnetGroupCommand").f(void 0, void 0).ser(se_DeleteDBSubnetGroupCommand).de(de_DeleteDBSubnetGroupCommand).build() {
  static {
    __name(this, "DeleteDBSubnetGroupCommand");
  }
};

// src/commands/DeleteEventSubscriptionCommand.ts



var DeleteEventSubscriptionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DeleteEventSubscription", {}).n("NeptuneClient", "DeleteEventSubscriptionCommand").f(void 0, void 0).ser(se_DeleteEventSubscriptionCommand).de(de_DeleteEventSubscriptionCommand).build() {
  static {
    __name(this, "DeleteEventSubscriptionCommand");
  }
};

// src/commands/DeleteGlobalClusterCommand.ts



var DeleteGlobalClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DeleteGlobalCluster", {}).n("NeptuneClient", "DeleteGlobalClusterCommand").f(void 0, void 0).ser(se_DeleteGlobalClusterCommand).de(de_DeleteGlobalClusterCommand).build() {
  static {
    __name(this, "DeleteGlobalClusterCommand");
  }
};

// src/commands/DescribeDBClusterEndpointsCommand.ts



var DescribeDBClusterEndpointsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeDBClusterEndpoints", {}).n("NeptuneClient", "DescribeDBClusterEndpointsCommand").f(void 0, void 0).ser(se_DescribeDBClusterEndpointsCommand).de(de_DescribeDBClusterEndpointsCommand).build() {
  static {
    __name(this, "DescribeDBClusterEndpointsCommand");
  }
};

// src/commands/DescribeDBClusterParameterGroupsCommand.ts



var DescribeDBClusterParameterGroupsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeDBClusterParameterGroups", {}).n("NeptuneClient", "DescribeDBClusterParameterGroupsCommand").f(void 0, void 0).ser(se_DescribeDBClusterParameterGroupsCommand).de(de_DescribeDBClusterParameterGroupsCommand).build() {
  static {
    __name(this, "DescribeDBClusterParameterGroupsCommand");
  }
};

// src/commands/DescribeDBClusterParametersCommand.ts



var DescribeDBClusterParametersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeDBClusterParameters", {}).n("NeptuneClient", "DescribeDBClusterParametersCommand").f(void 0, void 0).ser(se_DescribeDBClusterParametersCommand).de(de_DescribeDBClusterParametersCommand).build() {
  static {
    __name(this, "DescribeDBClusterParametersCommand");
  }
};

// src/commands/DescribeDBClustersCommand.ts



var DescribeDBClustersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeDBClusters", {}).n("NeptuneClient", "DescribeDBClustersCommand").f(void 0, void 0).ser(se_DescribeDBClustersCommand).de(de_DescribeDBClustersCommand).build() {
  static {
    __name(this, "DescribeDBClustersCommand");
  }
};

// src/commands/DescribeDBClusterSnapshotAttributesCommand.ts



var DescribeDBClusterSnapshotAttributesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeDBClusterSnapshotAttributes", {}).n("NeptuneClient", "DescribeDBClusterSnapshotAttributesCommand").f(void 0, void 0).ser(se_DescribeDBClusterSnapshotAttributesCommand).de(de_DescribeDBClusterSnapshotAttributesCommand).build() {
  static {
    __name(this, "DescribeDBClusterSnapshotAttributesCommand");
  }
};

// src/commands/DescribeDBClusterSnapshotsCommand.ts



var DescribeDBClusterSnapshotsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeDBClusterSnapshots", {}).n("NeptuneClient", "DescribeDBClusterSnapshotsCommand").f(void 0, void 0).ser(se_DescribeDBClusterSnapshotsCommand).de(de_DescribeDBClusterSnapshotsCommand).build() {
  static {
    __name(this, "DescribeDBClusterSnapshotsCommand");
  }
};

// src/commands/DescribeDBEngineVersionsCommand.ts



var DescribeDBEngineVersionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeDBEngineVersions", {}).n("NeptuneClient", "DescribeDBEngineVersionsCommand").f(void 0, void 0).ser(se_DescribeDBEngineVersionsCommand).de(de_DescribeDBEngineVersionsCommand).build() {
  static {
    __name(this, "DescribeDBEngineVersionsCommand");
  }
};

// src/commands/DescribeDBInstancesCommand.ts



var DescribeDBInstancesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeDBInstances", {}).n("NeptuneClient", "DescribeDBInstancesCommand").f(void 0, void 0).ser(se_DescribeDBInstancesCommand).de(de_DescribeDBInstancesCommand).build() {
  static {
    __name(this, "DescribeDBInstancesCommand");
  }
};

// src/commands/DescribeDBParameterGroupsCommand.ts



var DescribeDBParameterGroupsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeDBParameterGroups", {}).n("NeptuneClient", "DescribeDBParameterGroupsCommand").f(void 0, void 0).ser(se_DescribeDBParameterGroupsCommand).de(de_DescribeDBParameterGroupsCommand).build() {
  static {
    __name(this, "DescribeDBParameterGroupsCommand");
  }
};

// src/commands/DescribeDBParametersCommand.ts



var DescribeDBParametersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeDBParameters", {}).n("NeptuneClient", "DescribeDBParametersCommand").f(void 0, void 0).ser(se_DescribeDBParametersCommand).de(de_DescribeDBParametersCommand).build() {
  static {
    __name(this, "DescribeDBParametersCommand");
  }
};

// src/commands/DescribeDBSubnetGroupsCommand.ts



var DescribeDBSubnetGroupsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeDBSubnetGroups", {}).n("NeptuneClient", "DescribeDBSubnetGroupsCommand").f(void 0, void 0).ser(se_DescribeDBSubnetGroupsCommand).de(de_DescribeDBSubnetGroupsCommand).build() {
  static {
    __name(this, "DescribeDBSubnetGroupsCommand");
  }
};

// src/commands/DescribeEngineDefaultClusterParametersCommand.ts



var DescribeEngineDefaultClusterParametersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeEngineDefaultClusterParameters", {}).n("NeptuneClient", "DescribeEngineDefaultClusterParametersCommand").f(void 0, void 0).ser(se_DescribeEngineDefaultClusterParametersCommand).de(de_DescribeEngineDefaultClusterParametersCommand).build() {
  static {
    __name(this, "DescribeEngineDefaultClusterParametersCommand");
  }
};

// src/commands/DescribeEngineDefaultParametersCommand.ts



var DescribeEngineDefaultParametersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeEngineDefaultParameters", {}).n("NeptuneClient", "DescribeEngineDefaultParametersCommand").f(void 0, void 0).ser(se_DescribeEngineDefaultParametersCommand).de(de_DescribeEngineDefaultParametersCommand).build() {
  static {
    __name(this, "DescribeEngineDefaultParametersCommand");
  }
};

// src/commands/DescribeEventCategoriesCommand.ts



var DescribeEventCategoriesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeEventCategories", {}).n("NeptuneClient", "DescribeEventCategoriesCommand").f(void 0, void 0).ser(se_DescribeEventCategoriesCommand).de(de_DescribeEventCategoriesCommand).build() {
  static {
    __name(this, "DescribeEventCategoriesCommand");
  }
};

// src/commands/DescribeEventsCommand.ts



var DescribeEventsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeEvents", {}).n("NeptuneClient", "DescribeEventsCommand").f(void 0, void 0).ser(se_DescribeEventsCommand).de(de_DescribeEventsCommand).build() {
  static {
    __name(this, "DescribeEventsCommand");
  }
};

// src/commands/DescribeEventSubscriptionsCommand.ts



var DescribeEventSubscriptionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeEventSubscriptions", {}).n("NeptuneClient", "DescribeEventSubscriptionsCommand").f(void 0, void 0).ser(se_DescribeEventSubscriptionsCommand).de(de_DescribeEventSubscriptionsCommand).build() {
  static {
    __name(this, "DescribeEventSubscriptionsCommand");
  }
};

// src/commands/DescribeGlobalClustersCommand.ts



var DescribeGlobalClustersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeGlobalClusters", {}).n("NeptuneClient", "DescribeGlobalClustersCommand").f(void 0, void 0).ser(se_DescribeGlobalClustersCommand).de(de_DescribeGlobalClustersCommand).build() {
  static {
    __name(this, "DescribeGlobalClustersCommand");
  }
};

// src/commands/DescribeOrderableDBInstanceOptionsCommand.ts



var DescribeOrderableDBInstanceOptionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeOrderableDBInstanceOptions", {}).n("NeptuneClient", "DescribeOrderableDBInstanceOptionsCommand").f(void 0, void 0).ser(se_DescribeOrderableDBInstanceOptionsCommand).de(de_DescribeOrderableDBInstanceOptionsCommand).build() {
  static {
    __name(this, "DescribeOrderableDBInstanceOptionsCommand");
  }
};

// src/commands/DescribePendingMaintenanceActionsCommand.ts



var DescribePendingMaintenanceActionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribePendingMaintenanceActions", {}).n("NeptuneClient", "DescribePendingMaintenanceActionsCommand").f(void 0, void 0).ser(se_DescribePendingMaintenanceActionsCommand).de(de_DescribePendingMaintenanceActionsCommand).build() {
  static {
    __name(this, "DescribePendingMaintenanceActionsCommand");
  }
};

// src/commands/DescribeValidDBInstanceModificationsCommand.ts



var DescribeValidDBInstanceModificationsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "DescribeValidDBInstanceModifications", {}).n("NeptuneClient", "DescribeValidDBInstanceModificationsCommand").f(void 0, void 0).ser(se_DescribeValidDBInstanceModificationsCommand).de(de_DescribeValidDBInstanceModificationsCommand).build() {
  static {
    __name(this, "DescribeValidDBInstanceModificationsCommand");
  }
};

// src/commands/FailoverDBClusterCommand.ts



var FailoverDBClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "FailoverDBCluster", {}).n("NeptuneClient", "FailoverDBClusterCommand").f(void 0, void 0).ser(se_FailoverDBClusterCommand).de(de_FailoverDBClusterCommand).build() {
  static {
    __name(this, "FailoverDBClusterCommand");
  }
};

// src/commands/FailoverGlobalClusterCommand.ts



var FailoverGlobalClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "FailoverGlobalCluster", {}).n("NeptuneClient", "FailoverGlobalClusterCommand").f(void 0, void 0).ser(se_FailoverGlobalClusterCommand).de(de_FailoverGlobalClusterCommand).build() {
  static {
    __name(this, "FailoverGlobalClusterCommand");
  }
};

// src/commands/ListTagsForResourceCommand.ts



var ListTagsForResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ListTagsForResource", {}).n("NeptuneClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
  static {
    __name(this, "ListTagsForResourceCommand");
  }
};

// src/commands/ModifyDBClusterCommand.ts



var ModifyDBClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ModifyDBCluster", {}).n("NeptuneClient", "ModifyDBClusterCommand").f(void 0, void 0).ser(se_ModifyDBClusterCommand).de(de_ModifyDBClusterCommand).build() {
  static {
    __name(this, "ModifyDBClusterCommand");
  }
};

// src/commands/ModifyDBClusterEndpointCommand.ts



var ModifyDBClusterEndpointCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ModifyDBClusterEndpoint", {}).n("NeptuneClient", "ModifyDBClusterEndpointCommand").f(void 0, void 0).ser(se_ModifyDBClusterEndpointCommand).de(de_ModifyDBClusterEndpointCommand).build() {
  static {
    __name(this, "ModifyDBClusterEndpointCommand");
  }
};

// src/commands/ModifyDBClusterParameterGroupCommand.ts



var ModifyDBClusterParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ModifyDBClusterParameterGroup", {}).n("NeptuneClient", "ModifyDBClusterParameterGroupCommand").f(void 0, void 0).ser(se_ModifyDBClusterParameterGroupCommand).de(de_ModifyDBClusterParameterGroupCommand).build() {
  static {
    __name(this, "ModifyDBClusterParameterGroupCommand");
  }
};

// src/commands/ModifyDBClusterSnapshotAttributeCommand.ts



var ModifyDBClusterSnapshotAttributeCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ModifyDBClusterSnapshotAttribute", {}).n("NeptuneClient", "ModifyDBClusterSnapshotAttributeCommand").f(void 0, void 0).ser(se_ModifyDBClusterSnapshotAttributeCommand).de(de_ModifyDBClusterSnapshotAttributeCommand).build() {
  static {
    __name(this, "ModifyDBClusterSnapshotAttributeCommand");
  }
};

// src/commands/ModifyDBInstanceCommand.ts



var ModifyDBInstanceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ModifyDBInstance", {}).n("NeptuneClient", "ModifyDBInstanceCommand").f(ModifyDBInstanceMessageFilterSensitiveLog, void 0).ser(se_ModifyDBInstanceCommand).de(de_ModifyDBInstanceCommand).build() {
  static {
    __name(this, "ModifyDBInstanceCommand");
  }
};

// src/commands/ModifyDBParameterGroupCommand.ts



var ModifyDBParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ModifyDBParameterGroup", {}).n("NeptuneClient", "ModifyDBParameterGroupCommand").f(void 0, void 0).ser(se_ModifyDBParameterGroupCommand).de(de_ModifyDBParameterGroupCommand).build() {
  static {
    __name(this, "ModifyDBParameterGroupCommand");
  }
};

// src/commands/ModifyDBSubnetGroupCommand.ts



var ModifyDBSubnetGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ModifyDBSubnetGroup", {}).n("NeptuneClient", "ModifyDBSubnetGroupCommand").f(void 0, void 0).ser(se_ModifyDBSubnetGroupCommand).de(de_ModifyDBSubnetGroupCommand).build() {
  static {
    __name(this, "ModifyDBSubnetGroupCommand");
  }
};

// src/commands/ModifyEventSubscriptionCommand.ts



var ModifyEventSubscriptionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ModifyEventSubscription", {}).n("NeptuneClient", "ModifyEventSubscriptionCommand").f(void 0, void 0).ser(se_ModifyEventSubscriptionCommand).de(de_ModifyEventSubscriptionCommand).build() {
  static {
    __name(this, "ModifyEventSubscriptionCommand");
  }
};

// src/commands/ModifyGlobalClusterCommand.ts



var ModifyGlobalClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ModifyGlobalCluster", {}).n("NeptuneClient", "ModifyGlobalClusterCommand").f(void 0, void 0).ser(se_ModifyGlobalClusterCommand).de(de_ModifyGlobalClusterCommand).build() {
  static {
    __name(this, "ModifyGlobalClusterCommand");
  }
};

// src/commands/PromoteReadReplicaDBClusterCommand.ts



var PromoteReadReplicaDBClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "PromoteReadReplicaDBCluster", {}).n("NeptuneClient", "PromoteReadReplicaDBClusterCommand").f(void 0, void 0).ser(se_PromoteReadReplicaDBClusterCommand).de(de_PromoteReadReplicaDBClusterCommand).build() {
  static {
    __name(this, "PromoteReadReplicaDBClusterCommand");
  }
};

// src/commands/RebootDBInstanceCommand.ts



var RebootDBInstanceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "RebootDBInstance", {}).n("NeptuneClient", "RebootDBInstanceCommand").f(void 0, void 0).ser(se_RebootDBInstanceCommand).de(de_RebootDBInstanceCommand).build() {
  static {
    __name(this, "RebootDBInstanceCommand");
  }
};

// src/commands/RemoveFromGlobalClusterCommand.ts



var RemoveFromGlobalClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "RemoveFromGlobalCluster", {}).n("NeptuneClient", "RemoveFromGlobalClusterCommand").f(void 0, void 0).ser(se_RemoveFromGlobalClusterCommand).de(de_RemoveFromGlobalClusterCommand).build() {
  static {
    __name(this, "RemoveFromGlobalClusterCommand");
  }
};

// src/commands/RemoveRoleFromDBClusterCommand.ts



var RemoveRoleFromDBClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "RemoveRoleFromDBCluster", {}).n("NeptuneClient", "RemoveRoleFromDBClusterCommand").f(void 0, void 0).ser(se_RemoveRoleFromDBClusterCommand).de(de_RemoveRoleFromDBClusterCommand).build() {
  static {
    __name(this, "RemoveRoleFromDBClusterCommand");
  }
};

// src/commands/RemoveSourceIdentifierFromSubscriptionCommand.ts



var RemoveSourceIdentifierFromSubscriptionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "RemoveSourceIdentifierFromSubscription", {}).n("NeptuneClient", "RemoveSourceIdentifierFromSubscriptionCommand").f(void 0, void 0).ser(se_RemoveSourceIdentifierFromSubscriptionCommand).de(de_RemoveSourceIdentifierFromSubscriptionCommand).build() {
  static {
    __name(this, "RemoveSourceIdentifierFromSubscriptionCommand");
  }
};

// src/commands/RemoveTagsFromResourceCommand.ts



var RemoveTagsFromResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "RemoveTagsFromResource", {}).n("NeptuneClient", "RemoveTagsFromResourceCommand").f(void 0, void 0).ser(se_RemoveTagsFromResourceCommand).de(de_RemoveTagsFromResourceCommand).build() {
  static {
    __name(this, "RemoveTagsFromResourceCommand");
  }
};

// src/commands/ResetDBClusterParameterGroupCommand.ts



var ResetDBClusterParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ResetDBClusterParameterGroup", {}).n("NeptuneClient", "ResetDBClusterParameterGroupCommand").f(void 0, void 0).ser(se_ResetDBClusterParameterGroupCommand).de(de_ResetDBClusterParameterGroupCommand).build() {
  static {
    __name(this, "ResetDBClusterParameterGroupCommand");
  }
};

// src/commands/ResetDBParameterGroupCommand.ts



var ResetDBParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "ResetDBParameterGroup", {}).n("NeptuneClient", "ResetDBParameterGroupCommand").f(void 0, void 0).ser(se_ResetDBParameterGroupCommand).de(de_ResetDBParameterGroupCommand).build() {
  static {
    __name(this, "ResetDBParameterGroupCommand");
  }
};

// src/commands/RestoreDBClusterFromSnapshotCommand.ts



var RestoreDBClusterFromSnapshotCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "RestoreDBClusterFromSnapshot", {}).n("NeptuneClient", "RestoreDBClusterFromSnapshotCommand").f(void 0, void 0).ser(se_RestoreDBClusterFromSnapshotCommand).de(de_RestoreDBClusterFromSnapshotCommand).build() {
  static {
    __name(this, "RestoreDBClusterFromSnapshotCommand");
  }
};

// src/commands/RestoreDBClusterToPointInTimeCommand.ts



var RestoreDBClusterToPointInTimeCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "RestoreDBClusterToPointInTime", {}).n("NeptuneClient", "RestoreDBClusterToPointInTimeCommand").f(void 0, void 0).ser(se_RestoreDBClusterToPointInTimeCommand).de(de_RestoreDBClusterToPointInTimeCommand).build() {
  static {
    __name(this, "RestoreDBClusterToPointInTimeCommand");
  }
};

// src/commands/StartDBClusterCommand.ts



var StartDBClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "StartDBCluster", {}).n("NeptuneClient", "StartDBClusterCommand").f(void 0, void 0).ser(se_StartDBClusterCommand).de(de_StartDBClusterCommand).build() {
  static {
    __name(this, "StartDBClusterCommand");
  }
};

// src/commands/StopDBClusterCommand.ts



var StopDBClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "StopDBCluster", {}).n("NeptuneClient", "StopDBClusterCommand").f(void 0, void 0).ser(se_StopDBClusterCommand).de(de_StopDBClusterCommand).build() {
  static {
    __name(this, "StopDBClusterCommand");
  }
};

// src/commands/SwitchoverGlobalClusterCommand.ts



var SwitchoverGlobalClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonRDSv19", "SwitchoverGlobalCluster", {}).n("NeptuneClient", "SwitchoverGlobalClusterCommand").f(void 0, void 0).ser(se_SwitchoverGlobalClusterCommand).de(de_SwitchoverGlobalClusterCommand).build() {
  static {
    __name(this, "SwitchoverGlobalClusterCommand");
  }
};

// src/Neptune.ts
var commands = {
  AddRoleToDBClusterCommand,
  AddSourceIdentifierToSubscriptionCommand,
  AddTagsToResourceCommand,
  ApplyPendingMaintenanceActionCommand,
  CopyDBClusterParameterGroupCommand,
  CopyDBClusterSnapshotCommand,
  CopyDBParameterGroupCommand,
  CreateDBClusterCommand,
  CreateDBClusterEndpointCommand,
  CreateDBClusterParameterGroupCommand,
  CreateDBClusterSnapshotCommand,
  CreateDBInstanceCommand,
  CreateDBParameterGroupCommand,
  CreateDBSubnetGroupCommand,
  CreateEventSubscriptionCommand,
  CreateGlobalClusterCommand,
  DeleteDBClusterCommand,
  DeleteDBClusterEndpointCommand,
  DeleteDBClusterParameterGroupCommand,
  DeleteDBClusterSnapshotCommand,
  DeleteDBInstanceCommand,
  DeleteDBParameterGroupCommand,
  DeleteDBSubnetGroupCommand,
  DeleteEventSubscriptionCommand,
  DeleteGlobalClusterCommand,
  DescribeDBClusterEndpointsCommand,
  DescribeDBClusterParameterGroupsCommand,
  DescribeDBClusterParametersCommand,
  DescribeDBClustersCommand,
  DescribeDBClusterSnapshotAttributesCommand,
  DescribeDBClusterSnapshotsCommand,
  DescribeDBEngineVersionsCommand,
  DescribeDBInstancesCommand,
  DescribeDBParameterGroupsCommand,
  DescribeDBParametersCommand,
  DescribeDBSubnetGroupsCommand,
  DescribeEngineDefaultClusterParametersCommand,
  DescribeEngineDefaultParametersCommand,
  DescribeEventCategoriesCommand,
  DescribeEventsCommand,
  DescribeEventSubscriptionsCommand,
  DescribeGlobalClustersCommand,
  DescribeOrderableDBInstanceOptionsCommand,
  DescribePendingMaintenanceActionsCommand,
  DescribeValidDBInstanceModificationsCommand,
  FailoverDBClusterCommand,
  FailoverGlobalClusterCommand,
  ListTagsForResourceCommand,
  ModifyDBClusterCommand,
  ModifyDBClusterEndpointCommand,
  ModifyDBClusterParameterGroupCommand,
  ModifyDBClusterSnapshotAttributeCommand,
  ModifyDBInstanceCommand,
  ModifyDBParameterGroupCommand,
  ModifyDBSubnetGroupCommand,
  ModifyEventSubscriptionCommand,
  ModifyGlobalClusterCommand,
  PromoteReadReplicaDBClusterCommand,
  RebootDBInstanceCommand,
  RemoveFromGlobalClusterCommand,
  RemoveRoleFromDBClusterCommand,
  RemoveSourceIdentifierFromSubscriptionCommand,
  RemoveTagsFromResourceCommand,
  ResetDBClusterParameterGroupCommand,
  ResetDBParameterGroupCommand,
  RestoreDBClusterFromSnapshotCommand,
  RestoreDBClusterToPointInTimeCommand,
  StartDBClusterCommand,
  StopDBClusterCommand,
  SwitchoverGlobalClusterCommand
};
var Neptune = class extends NeptuneClient {
  static {
    __name(this, "Neptune");
  }
};
(0, import_smithy_client.createAggregatedClient)(commands, Neptune);

// src/pagination/DescribeDBClusterEndpointsPaginator.ts

var paginateDescribeDBClusterEndpoints = (0, import_core.createPaginator)(NeptuneClient, DescribeDBClusterEndpointsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeDBClusterParameterGroupsPaginator.ts

var paginateDescribeDBClusterParameterGroups = (0, import_core.createPaginator)(NeptuneClient, DescribeDBClusterParameterGroupsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeDBClusterParametersPaginator.ts

var paginateDescribeDBClusterParameters = (0, import_core.createPaginator)(NeptuneClient, DescribeDBClusterParametersCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeDBClusterSnapshotsPaginator.ts

var paginateDescribeDBClusterSnapshots = (0, import_core.createPaginator)(NeptuneClient, DescribeDBClusterSnapshotsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeDBClustersPaginator.ts

var paginateDescribeDBClusters = (0, import_core.createPaginator)(NeptuneClient, DescribeDBClustersCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeDBEngineVersionsPaginator.ts

var paginateDescribeDBEngineVersions = (0, import_core.createPaginator)(NeptuneClient, DescribeDBEngineVersionsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeDBInstancesPaginator.ts

var paginateDescribeDBInstances = (0, import_core.createPaginator)(NeptuneClient, DescribeDBInstancesCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeDBParameterGroupsPaginator.ts

var paginateDescribeDBParameterGroups = (0, import_core.createPaginator)(NeptuneClient, DescribeDBParameterGroupsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeDBParametersPaginator.ts

var paginateDescribeDBParameters = (0, import_core.createPaginator)(NeptuneClient, DescribeDBParametersCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeDBSubnetGroupsPaginator.ts

var paginateDescribeDBSubnetGroups = (0, import_core.createPaginator)(NeptuneClient, DescribeDBSubnetGroupsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeEngineDefaultParametersPaginator.ts

var paginateDescribeEngineDefaultParameters = (0, import_core.createPaginator)(NeptuneClient, DescribeEngineDefaultParametersCommand, "Marker", "EngineDefaults.Marker", "MaxRecords");

// src/pagination/DescribeEventSubscriptionsPaginator.ts

var paginateDescribeEventSubscriptions = (0, import_core.createPaginator)(NeptuneClient, DescribeEventSubscriptionsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeEventsPaginator.ts

var paginateDescribeEvents = (0, import_core.createPaginator)(NeptuneClient, DescribeEventsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeGlobalClustersPaginator.ts

var paginateDescribeGlobalClusters = (0, import_core.createPaginator)(NeptuneClient, DescribeGlobalClustersCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeOrderableDBInstanceOptionsPaginator.ts

var paginateDescribeOrderableDBInstanceOptions = (0, import_core.createPaginator)(NeptuneClient, DescribeOrderableDBInstanceOptionsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribePendingMaintenanceActionsPaginator.ts

var paginateDescribePendingMaintenanceActions = (0, import_core.createPaginator)(NeptuneClient, DescribePendingMaintenanceActionsCommand, "Marker", "Marker", "MaxRecords");

// src/waiters/waitForDBInstanceAvailable.ts
var import_util_waiter = require("@smithy/util-waiter");
var checkState = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeDBInstancesCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.DBInstances);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.DBInstanceStatus;
        });
        return projection_3;
      }, "returnComparator");
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "available";
      }
      if (allStringEq_5) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.DBInstances);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.DBInstanceStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleted") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.DBInstances);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.DBInstanceStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleting") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.DBInstances);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.DBInstanceStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "failed") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.DBInstances);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.DBInstanceStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "incompatible-restore") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.DBInstances);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.DBInstanceStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "incompatible-parameters") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForDBInstanceAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 30, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
}, "waitForDBInstanceAvailable");
var waitUntilDBInstanceAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 30, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilDBInstanceAvailable");

// src/waiters/waitForDBInstanceDeleted.ts

var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeDBInstancesCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.DBInstances);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.DBInstanceStatus;
        });
        return projection_3;
      }, "returnComparator");
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "deleted";
      }
      if (allStringEq_5) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.DBInstances);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.DBInstanceStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "creating") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.DBInstances);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.DBInstanceStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "modifying") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.DBInstances);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.DBInstanceStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "rebooting") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.DBInstances);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.DBInstanceStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "resetting-master-credentials") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "DBInstanceNotFoundFault") {
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForDBInstanceDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 30, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
}, "waitForDBInstanceDeleted");
var waitUntilDBInstanceDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 30, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilDBInstanceDeleted");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  NeptuneServiceException,
  __Client,
  NeptuneClient,
  Neptune,
  $Command,
  AddRoleToDBClusterCommand,
  AddSourceIdentifierToSubscriptionCommand,
  AddTagsToResourceCommand,
  ApplyPendingMaintenanceActionCommand,
  CopyDBClusterParameterGroupCommand,
  CopyDBClusterSnapshotCommand,
  CopyDBParameterGroupCommand,
  CreateDBClusterCommand,
  CreateDBClusterEndpointCommand,
  CreateDBClusterParameterGroupCommand,
  CreateDBClusterSnapshotCommand,
  CreateDBInstanceCommand,
  CreateDBParameterGroupCommand,
  CreateDBSubnetGroupCommand,
  CreateEventSubscriptionCommand,
  CreateGlobalClusterCommand,
  DeleteDBClusterCommand,
  DeleteDBClusterEndpointCommand,
  DeleteDBClusterParameterGroupCommand,
  DeleteDBClusterSnapshotCommand,
  DeleteDBInstanceCommand,
  DeleteDBParameterGroupCommand,
  DeleteDBSubnetGroupCommand,
  DeleteEventSubscriptionCommand,
  DeleteGlobalClusterCommand,
  DescribeDBClusterEndpointsCommand,
  DescribeDBClusterParameterGroupsCommand,
  DescribeDBClusterParametersCommand,
  DescribeDBClusterSnapshotAttributesCommand,
  DescribeDBClusterSnapshotsCommand,
  DescribeDBClustersCommand,
  DescribeDBEngineVersionsCommand,
  DescribeDBInstancesCommand,
  DescribeDBParameterGroupsCommand,
  DescribeDBParametersCommand,
  DescribeDBSubnetGroupsCommand,
  DescribeEngineDefaultClusterParametersCommand,
  DescribeEngineDefaultParametersCommand,
  DescribeEventCategoriesCommand,
  DescribeEventSubscriptionsCommand,
  DescribeEventsCommand,
  DescribeGlobalClustersCommand,
  DescribeOrderableDBInstanceOptionsCommand,
  DescribePendingMaintenanceActionsCommand,
  DescribeValidDBInstanceModificationsCommand,
  FailoverDBClusterCommand,
  FailoverGlobalClusterCommand,
  ListTagsForResourceCommand,
  ModifyDBClusterCommand,
  ModifyDBClusterEndpointCommand,
  ModifyDBClusterParameterGroupCommand,
  ModifyDBClusterSnapshotAttributeCommand,
  ModifyDBInstanceCommand,
  ModifyDBParameterGroupCommand,
  ModifyDBSubnetGroupCommand,
  ModifyEventSubscriptionCommand,
  ModifyGlobalClusterCommand,
  PromoteReadReplicaDBClusterCommand,
  RebootDBInstanceCommand,
  RemoveFromGlobalClusterCommand,
  RemoveRoleFromDBClusterCommand,
  RemoveSourceIdentifierFromSubscriptionCommand,
  RemoveTagsFromResourceCommand,
  ResetDBClusterParameterGroupCommand,
  ResetDBParameterGroupCommand,
  RestoreDBClusterFromSnapshotCommand,
  RestoreDBClusterToPointInTimeCommand,
  StartDBClusterCommand,
  StopDBClusterCommand,
  SwitchoverGlobalClusterCommand,
  paginateDescribeDBClusterEndpoints,
  paginateDescribeDBClusterParameterGroups,
  paginateDescribeDBClusterParameters,
  paginateDescribeDBClusterSnapshots,
  paginateDescribeDBClusters,
  paginateDescribeDBEngineVersions,
  paginateDescribeDBInstances,
  paginateDescribeDBParameterGroups,
  paginateDescribeDBParameters,
  paginateDescribeDBSubnetGroups,
  paginateDescribeEngineDefaultParameters,
  paginateDescribeEventSubscriptions,
  paginateDescribeEvents,
  paginateDescribeGlobalClusters,
  paginateDescribeOrderableDBInstanceOptions,
  paginateDescribePendingMaintenanceActions,
  waitForDBInstanceAvailable,
  waitUntilDBInstanceAvailable,
  waitForDBInstanceDeleted,
  waitUntilDBInstanceDeleted,
  DBClusterNotFoundFault,
  DBClusterRoleAlreadyExistsFault,
  DBClusterRoleQuotaExceededFault,
  InvalidDBClusterStateFault,
  SourceNotFoundFault,
  SubscriptionNotFoundFault,
  DBInstanceNotFoundFault,
  DBSnapshotNotFoundFault,
  ResourceNotFoundFault,
  DBParameterGroupAlreadyExistsFault,
  DBParameterGroupNotFoundFault,
  DBParameterGroupQuotaExceededFault,
  DBClusterSnapshotAlreadyExistsFault,
  DBClusterSnapshotNotFoundFault,
  InvalidDBClusterSnapshotStateFault,
  KMSKeyNotAccessibleFault,
  SnapshotQuotaExceededFault,
  DBClusterAlreadyExistsFault,
  DBClusterParameterGroupNotFoundFault,
  DBClusterQuotaExceededFault,
  DBSubnetGroupDoesNotCoverEnoughAZs,
  DBSubnetGroupNotFoundFault,
  GlobalClusterNotFoundFault,
  InsufficientStorageClusterCapacityFault,
  InvalidDBInstanceStateFault,
  InvalidDBSubnetGroupStateFault,
  InvalidGlobalClusterStateFault,
  InvalidSubnet,
  InvalidVPCNetworkStateFault,
  StorageQuotaExceededFault,
  DBClusterEndpointAlreadyExistsFault,
  DBClusterEndpointQuotaExceededFault,
  AuthorizationNotFoundFault,
  DBInstanceAlreadyExistsFault,
  DBSecurityGroupNotFoundFault,
  DomainNotFoundFault,
  InstanceQuotaExceededFault,
  InsufficientDBInstanceCapacityFault,
  OptionGroupNotFoundFault,
  ProvisionedIopsNotAvailableInAZFault,
  StorageTypeNotSupportedFault,
  DBSubnetGroupAlreadyExistsFault,
  DBSubnetGroupQuotaExceededFault,
  DBSubnetQuotaExceededFault,
  EventSubscriptionQuotaExceededFault,
  SNSInvalidTopicFault,
  SNSNoAuthorizationFault,
  SNSTopicArnNotFoundFault,
  SubscriptionAlreadyExistFault,
  SubscriptionCategoryNotFoundFault,
  FailoverStatus,
  GlobalClusterAlreadyExistsFault,
  GlobalClusterQuotaExceededFault,
  DBClusterEndpointNotFoundFault,
  InvalidDBClusterEndpointStateFault,
  InvalidDBParameterGroupStateFault,
  DBSnapshotAlreadyExistsFault,
  InvalidDBSubnetStateFault,
  InvalidEventSubscriptionStateFault,
  ApplyMethod,
  SourceType,
  InvalidDBSecurityGroupStateFault,
  SharedSnapshotQuotaExceededFault,
  CertificateNotFoundFault,
  DBUpgradeDependencyFailureFault,
  SubnetAlreadyInUse,
  DBClusterRoleNotFoundFault,
  InsufficientDBClusterCapacityFault,
  InvalidDBSnapshotStateFault,
  InvalidRestoreFault,
  CreateDBInstanceMessageFilterSensitiveLog,
  ModifyDBInstanceMessageFilterSensitiveLog
});

