// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const {
  tmpdir,
  cpus,
} = require('node:os');
const {
  mkdtemp,
  rm,
} = require('node:fs/promises');
const {
  spawnSync,
} = require('node:child_process');
const {
  join,
} = require('node:path');
const {
  randomBytes,
} = require('node:crypto');

const FRAMECAPTURERATE = [1, 1];
const MAXRESOLUTION = [960, 540];
const FRAME_PREFIX = 'frames-v2';

const ShellOptions = {
  cwd: undefined,
  env: process.env,
  maxBuffer: 60 * 1024 * 1024,
};

async function createTempDir(str) {
  let prefix = str;
  if (!prefix) {
    prefix = randomBytes(16).toString('hex');
  }

  const directory = await mkdtemp(join(tmpdir(), prefix));
  return directory;
}

async function removeTempDir(dir) {
  if (dir) {
    try {
      await rm(dir, {
        force: true,
        recursive: true,
        maxRetries: 10,
        retryDelay: 100,
      });
    } catch (e) {
      console.error(e);
    }
  }
}

async function extractFrames(params) {
  const numCores = cpus().length;
  const cmdOpts = [
    '-y',
    '-threads',
    numCores,
    '-v',
    'quiet',
    ...params,
  ];

  console.log(`cmdOpts: ${cmdOpts.join(' ')}`)

  const response = spawnSync('ffmpeg', cmdOpts, ShellOptions);

  if (response.error !== undefined) {
    console.log(response.error);
    throw new Error(response.error);
  }

  if (response.status !== 0) {
    console.log(response);

    if (response.stdout instanceof Buffer) {
      console.log('stdout:', response.stdout.toString('utf8'));
    } else if (typeof response.stdout === 'string') {
      console.log('stdout:', response.stdout);
    }

    if (response.stderr instanceof Buffer) {
      console.log('stderr:', response.stderr.toString('utf8'));
    } else if (typeof response.stderr === 'string') {
      console.log('stderr:', response.stderr);
    }

    throw new Error(`exitcode not zero: ${response.status}`);
  }

  return response;
}

async function probeStream(url) {
  try {
    const cmdOpts = [
      '-v',
      'quiet',
      '-print_format',
      'json',
      '-show_format',
      '-show_streams',
      url
    ];
    console.log(`cmdOpts: ${cmdOpts.join(' ')}`)

    const response = spawnSync('ffprobe', cmdOpts, ShellOptions);

    const {
      status,
      error,
    } = response;
    const stdout = response.stdout.toString('utf8');
    const stderr = response.stderr.toString('utf8');

    if (error !== undefined) {
      console.log('error:', error, 'stdout:', stdout, 'stderr:', stderr);
      throw new Error(error);
    }

    if (status !== 0) {
      console.log(response);
      console.log('status:', status, 'stdout:', stdout, 'stderr:', stderr);
      throw new Error(`exitcode not zero: ${status}`);
    }

    const streamInfo = JSON.parse(stdout);

    return streamInfo;
  } catch (e) {
    console.error(e);
    throw e;
  }
}

module.exports = {
  FRAMECAPTURERATE,
  MAXRESOLUTION,
  FRAME_PREFIX,
  createTempDir,
  removeTempDir,
  probeStream,
  extractFrames,
};
