// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const {
  download,
} = require('../commonUtils');
const TitanMultimodalEmbeddings = require('./models/titanMultimodalEmbeddings');
const NovaPremier = require('./models/novaPremier');
const NovaPro = require('./models/novaPro');
const NovaLite = require('./models/novaLite');
const NovaMicro = require('./models/novaMicro');
const AnthropicClaudeSonnet = require('./models/anthropicClaudeSonnet');
const AnthropicClaudeHaiku = require('./models/anthropicClaudeHaiku');
const AnthropicClaudeHaiku35 = require('./models/antropicClaudeHaiku35');
const MetaLlama3290B = require('./models/metaLlama3290B');
const MetaLlama3370B = require('./models/metaLlama3370B');
const MistralAI = require('./models/mistral');

let ModelConfigs;

async function _loadModelConfigs(bucket, key) {
  if (ModelConfigs !== undefined) {
    return ModelConfigs;
  }

  if (!bucket || !key) {
    throw new Error('bucket and key not specified. Cannot load model config. ');
  }

  ModelConfigs = await download(bucket, key)
    .then((res) =>
      JSON.parse(res));

  return ModelConfigs;
}

async function _getModel(name = '') {
  if (name.length === 0) {
    throw new Error('name not specified');
  }

  const configs = await _loadModelConfigs();
  for (const config of configs) {
    const { modelId } = config;
    if (modelId.indexOf(name) >= 0) {
      return _createModel(config);
    }
  }

  throw new Error(`Fail to get model for ${name}`);
}

async function _getPreferredModel(stringOrArray = []) {
  let names = stringOrArray;
  if (typeof names === 'string') {
    if (names.length === 0) {
      throw new Error('names not specified');
    }
    names = [names];
  }

  if (names.length === 0) {
    throw new Error('names not specified');
  }

  for (const name of names) {
    try {
      const model = await _getModel(name);
      return model;
    } catch (e) {
      e;
    }
  }

  throw new Error(`No suitable model for ${names.join(', ')}`);
}

function _createModel(config) {
  const { modelId } = config;

  if (TitanMultimodalEmbeddings.canSupport(modelId)) {
    return new TitanMultimodalEmbeddings(config);
  }

  if (NovaPremier.canSupport(modelId)) {
    return new NovaPremier(config);
  }

  if (NovaPro.canSupport(modelId)) {
    return new NovaPro(config);
  }

  if (NovaLite.canSupport(modelId)) {
    return new NovaLite(config);
  }

  if (NovaMicro.canSupport(modelId)) {
    return new NovaMicro(config);
  }

  if (AnthropicClaudeSonnet.canSupport(modelId)) {
    return new AnthropicClaudeSonnet(config);
  }

  if (AnthropicClaudeHaiku35.canSupport(modelId)) {
    return new AnthropicClaudeHaiku35(config);
  }

  if (AnthropicClaudeHaiku.canSupport(modelId)) {
    return new AnthropicClaudeHaiku(config);
  }

  if (MetaLlama3290B.canSupport(modelId)) {
    return new MetaLlama3290B(config);
  }

  if (MetaLlama3370B.canSupport(modelId)) {
    return new MetaLlama3370B(config);
  }

  if (MistralAI.canSupport(modelId)) {
    return new MistralAI(config);
  }

  throw new Error(`Fail to create model with the configuration, ${JSON.stringify(config)}`);
}

//
// Export functions
//
async function loadModelConfigs(bucket, key) {
  return await _loadModelConfigs(bucket, key);
}

async function getModel(name) {
  return await _getModel(name);
}

async function getPreferredModel(names) {
  return await _getPreferredModel(names);
}

module.exports = {
  loadModelConfigs,
  getModel,
  getPreferredModel,
};
