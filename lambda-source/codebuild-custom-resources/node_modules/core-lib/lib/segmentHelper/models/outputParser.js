// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const {
  jsonrepair,
} = require('jsonrepair');
const {
  ModelErrorException,
} = require('@aws-sdk/client-bedrock-runtime');

function _parseModelOutputContent(text) {
  if (!text) {
    return undefined;
  }

  // trim the output before json parse
  let firstIdx = text.search(/[{|[]/);
  if (firstIdx < 0) {
    // this could happen when the generated response got blocked by bedrock guardrail such as PII information
    console.log(text);
    throw new ModelErrorException('Invalid JSON output. Fail to find opening bracket');
  }

  let closeBracket = '}';
  if (text[firstIdx] === '[') {
    closeBracket = ']';
  }

  const lastIdx = text.lastIndexOf(closeBracket);
  if (lastIdx < 0) {
    // this could happen when the generated response got blocked by bedrock guardrail such as PII information
    console.log(text);
    throw new ModelErrorException('Invalid JSON output. Fail to find closing bracket');
  }

  let jsonstring = text.substring(firstIdx, lastIdx + 1);
  let data;

  try {
    data = JSON.parse(jsonstring);
    return data;
  } catch (e) {
    console.log(e);
    console.log(jsonstring);
    console.log('Use jsonrepair to repair the json output');
  }

  // try to repair the json
  try {
    data = jsonrepair(jsonstring);
    data = JSON.parse(data);
    return data;
  } catch (e) {
    console.log(e);
    console.log('jsonrepair fails to repair the json output. Use exhaustive try and error method.');
    console.log(jsonstring);
  }

  // last try with exhaustive try and error
  console.log('Try exhaustiveRepair to repair the json output');
  data = _exhaustiveRepair(jsonstring);
  return data;
}

function _exhaustiveRepair(jsonstring) {
  let data = jsonstring;
  let tries = 10;

  while (tries > 0) {
    try {
      data = JSON.parse(data);
      return data;
    } catch (e) {
      console.log(e.message);
      // Expected ',' or '}' after property value in JSON at position 3697
      const matched = e.message.match(/position\s([0-9]+)/);
      if (!matched || matched[1] === undefined) {
        break;
      }

      // strip the problematic double quotation mark
      let idx = Number(matched[1]);
      idx = data.lastIndexOf('"', idx);
      data = data.substring(0, idx) + data.substring(idx + 1);
    }

    tries -= 1;
  }

  console.log(jsonstring);
  throw new ModelErrorException('Fail to repair the json string with exhaustive repair logic...');
}

function parseModelOutputContent(text) {
  return _parseModelOutputContent(text);
}

module.exports = {
  parseModelOutputContent,
};
