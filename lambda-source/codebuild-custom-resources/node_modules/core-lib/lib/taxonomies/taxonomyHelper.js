// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

const GARM = require('./garm');
const BBFC = require('./bbfc');
const USTV = require('./ustv');
const MPAA = require('./mpaa');
const IABTaxonomyV3 = require('./iabTaxonomyV3');

const TaxonomyTier4 = IABTaxonomyV3
  .filter((x) =>
    x.Tier4.length > 0);

const TaxonomyTier3 = IABTaxonomyV3
  .filter((x) =>
    x.Tier3.length > 0 && x.Tier4.length === 0);

const TaxonomyTier2 = IABTaxonomyV3
  .filter((x) =>
    x.Tier2.length > 0 && x.Tier3.length === 0);

const TaxonomyTier1 = IABTaxonomyV3
  .filter((x) =>
    x.Tier2.length === 0);

const SENTIMENTS = ['Positive', 'Neutral', 'Negative'];

class TaxonomyHelper {
  static get GARM() {
    return GARM;
  }

  static get BBFC() {
    return BBFC;
  }

  static get USTV() {
    return USTV;
  }

  static get MPAA() {
    return MPAA;
  }

  static get IAB() {
    return IABTaxonomyV3;
  }

  static get IABTier1() {
    return TaxonomyTier1;
  }

  static get IABTier2() {
    return TaxonomyTier2;
  }

  static get IABTier3() {
    return TaxonomyTier3;
  }

  static get IABTier4() {
    return TaxonomyTier4;
  }

  static get Sentiments() {
    return SENTIMENTS;
  }

  static getGARMTaxonomies(withDetails = true) {
    if (withDetails) {
      return GARM.map((x) => `${x.name} - ${x.desc}`)
    }
    return GARM.map((x) => x.name);
  }

  static getBBFCRatings(withDetails = true) {
    if (withDetails) {
      return BBFC.map((x) => `${x.name} - ${x.desc}`)
    }
    return BBFC.map((x) => x.name);
  }

  static getUSTVRatings(withDetails = true) {
    if (withDetails) {
      return USTV.map((x) => `${x.name} - ${x.desc}`)
    }
    return USTV.map((x) => x.name);
  }

  static getMPAARatings(withDetails = true) {
    if (withDetails) {
      return MPAA.map((x) => `${x.name} - ${x.desc}`)
    }
    return MPAA.map((x) => x.name);
  }

  static getSentiments() {
    return SENTIMENTS;
  }

  static getIABTier1Taxonomies() {
    return TaxonomyHelper.getIABTaxonomies('Tier1');
  }

  static getIABTaxonomies(tier = '') {
    let taxonomies = IABTaxonomyV3;

    const _tier = tier.toLowerCase();

    if (_tier === 'tier1') {
      taxonomies = TaxonomyTier1;
    } else if (_tier === 'tier2') {
      taxonomies = TaxonomyTier2;
    } else if (_tier === 'tier3') {
      taxonomies = TaxonomyTier3;
    } else if (_tier === 'tier4') {
      taxonomies = TaxonomyTier4;
    } else {
      // reverse order list
      taxonomies = [
        ...TaxonomyTier4,
        ...TaxonomyTier3,
        ...TaxonomyTier2,
        ...TaxonomyTier1,
      ];
    }

    return taxonomies.map((x) => x.Name);
  }

  static searchTaxonomyByName(name, tier = '') {
    const _tier = tier.toLowerCase();

    let taxonomies = IABTaxonomyV3;
    if (_tier === 'tier1') {
      taxonomies = TaxonomyTier1;
    } else if (_tier === 'tier2') {
      taxonomies = TaxonomyTier2;
    } else if (_tier === 'tier3') {
      taxonomies = TaxonomyTier3;
    } else if (_tier === 'tier4') {
      taxonomies = TaxonomyTier4;
    }

    return taxonomies
      .filter((x) => x.Name === name)[0];
  }

  static findAllTierTaxonomies(tier1) {
    let taxonomies = [];

    const tier2 = _findSubTierTaxonomiess(tier1, TaxonomyTier2);
    if (tier2.length > 0) {
      taxonomies = taxonomies.concat(tier2);
  
      const tier3 = _findSubTierTaxonomiess(
        tier2,
        TaxonomyTier3
      );
  
      if (tier3.length > 0) {
        taxonomies = taxonomies.concat(tier3);
  
        const tier4 = _findSubTierTaxonomiess(
          tier3,
          TaxonomyTier4
        );
  
        if (tier4.length > 0) {
          taxonomies = taxonomies.concat(tier4);
        }
      }
    }
  
    return taxonomies;
  }  
}

function _findSubTierTaxonomiess(parents, children) {
  const uniqueIds = parents
    .map((x) =>
      x.UniqueID);

  return children
    .filter((x) =>
      uniqueIds.includes(x.Parent));
}

module.exports = TaxonomyHelper;
