"use strict";
// Copyright (c) 2019-2019 The Authors.
// SPDX-License-Identifier: BSD-3-Clause
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var file_magic_1 = require("./file-magic");
var path = require("path");
var file_magic_2 = require("./file-magic");
// (node:23174) MaxListenersExceededWarning: Possible EventEmitter memory
// leak detected. 11 uncaughtException listeners added to [process]. Use
// emitter.setMaxListeners() to increase limit
// There is no bug here - Just too many test cases loading the binding module
// which installs the listener each time.
process.setMaxListeners(0);
describe('file magic unit tests', function () {
    var magic;
    beforeEach(function () {
        file_magic_1.FileMagic.magicFile = path.normalize(path.join(__dirname, '..', 'dist', 'magic.mgc'));
    });
    describe('normal behavior', function () {
        beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_magic_1.FileMagic.getInstance()];
                    case 1:
                        magic = _a.sent();
                        expect(magic).not.toBeNull();
                        return [2 /*return*/];
                }
            });
        }); });
        afterEach(function () {
            file_magic_1.FileMagic.close();
            magic = undefined;
        });
        it('loads the module and returns a working instance', function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/];
        }); }); });
        it('closing it multiple time is ok', function () { return __awaiter(void 0, void 0, void 0, function () {
            var magic;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_magic_1.FileMagic.getInstance()];
                    case 1:
                        magic = _a.sent();
                        expect(magic).not.toBeNull();
                        file_magic_1.FileMagic.close();
                        file_magic_1.FileMagic.close();
                        file_magic_1.FileMagic.close();
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns the version > 500', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(magic.version()).toBeGreaterThan(500);
                return [2 /*return*/];
            });
        }); });
        it('default flags are MAGIC_NONE', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(magic.flags).toEqual(file_magic_2.MagicFlags.MAGIC_NONE);
                return [2 /*return*/];
            });
        }); });
        it('detect returns full description of file by default', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                result = magic.detect(__filename);
                expect(result).toEqual('JavaScript source, ASCII text');
                return [2 /*return*/];
            });
        }); });
        it('detectMime returns full mime/encoding of file', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                result = magic.detectMime(__filename);
                expect(result).toEqual('application/javascript; charset=us-ascii');
                return [2 /*return*/];
            });
        }); });
        it('detectMimeType returns mime type of file', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                result = magic.detectMimeType(__filename);
                expect(result).toEqual('application/javascript');
                return [2 /*return*/];
            });
        }); });
        it('detectMimeEncoding return full description mime encoding of file', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                result = magic.detectMimeEncoding(__filename);
                expect(result).toEqual('us-ascii');
                return [2 /*return*/];
            });
        }); });
    });
    describe('error handling cases', function () {
        afterEach(function () {
            file_magic_1.FileMagic.close();
            magic = undefined;
        });
        it('rejects when initialization fails', function () {
            file_magic_1.FileMagic.magicFile = 'xxxxx-does-not-exist';
            return expect(file_magic_1.FileMagic.getInstance()).rejects.toMatch('failed');
        });
        it('throws when detection fails', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        file_magic_1.FileMagic.magicFile = path.normalize(path.join(__dirname, '..', 'dist', 'magic.mgc'));
                        return [4 /*yield*/, file_magic_1.FileMagic.getInstance()];
                    case 1:
                        magic = _a.sent();
                        expect(magic).not.toBeNull();
                        expect(function () { return magic.detect(__filename); }).not.toThrow();
                        expect(function () {
                            magic.detect('xxxxx');
                        }).toThrow();
                        file_magic_1.FileMagic.close();
                        magic = undefined;
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('it does not work after FileMagic is closed', function () {
        beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_magic_1.FileMagic.getInstance()];
                    case 1:
                        magic = _a.sent();
                        expect(magic).not.toBeNull();
                        expect(magic.version()).toBeGreaterThan(500);
                        file_magic_1.FileMagic.close();
                        return [2 /*return*/];
                }
            });
        }); });
        afterAll(function () {
            magic = undefined;
        });
        it('version', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(function () {
                    magic.version();
                }).toThrowError('FileMagic has not been initialized.');
                return [2 /*return*/];
            });
        }); });
        it('flags', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(function () {
                    magic.flags;
                }).toThrowError('FileMagic has not been initialized.');
                return [2 /*return*/];
            });
        }); });
        it('detect', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(function () {
                    magic.detect(__filename);
                }).toThrowError('FileMagic has not been initialized.');
                return [2 /*return*/];
            });
        }); });
        it('detectMimeType', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(function () {
                    magic.detectMimeType(__filename);
                }).toThrowError('FileMagic has not been initialized.');
                return [2 /*return*/];
            });
        }); });
        it('detectMimeEncoding', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(function () {
                    magic.detectMimeEncoding(__filename);
                }).toThrowError('FileMagic has not been initialized.');
                return [2 /*return*/];
            });
        }); });
        it('detectMime', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(function () {
                    magic.detectMime(__filename);
                }).toThrowError('FileMagic has not been initialized.');
                return [2 /*return*/];
            });
        }); });
    });
});
//# sourceMappingURL=file-magic.spec.js.map