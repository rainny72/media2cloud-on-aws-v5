{
  "Comment": "Update Face Indexer state machine to update indexed faces to search engine, db table, and metadata files generated by Media2Cloud",
  "StartAt": "Import, index, or update?",
  "States": {
    "Import, index, or update?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.input.action",
              "IsPresent": true
            },
            {
              "Variable": "$.input.action",
              "StringEquals": "import"
            }
          ],
          "Next": "Import collection"
        },
        {
          "And": [
            {
              "Variable": "$.input.action",
              "IsPresent": true
            },
            {
              "Variable": "$.input.action",
              "StringEquals": "index"
            }
          ],
          "Next": "Prepare face indexing iterators"
        }
      ],
      "Default": "Prepare iterators"
    },
    "Import collection": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-west-2:189427507247:function:so0050-0a48a6e54829-update-face-indexer",
        "Payload": {
          "operation": "StateImportCollection",
          "input.$": "$.input"
        }
      },
      "Next": "More items?",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 4,
          "BackoffRate": 1.2
        }
      ]
    },
    "More items?": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            {
              "Variable": "$.input.token",
              "IsPresent": false
            },
            {
              "Variable": "$.input.token",
              "IsNull": true
            }
          ],
          "Next": "Import collection completed"
        }
      ],
      "Default": "Import collection"
    },
    "Import collection completed": {
      "Type": "Succeed"
    },
    "Prepare face indexing iterators": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-west-2:189427507247:function:so0050-0a48a6e54829-update-face-indexer",
        "Payload": {
          "operation": "StatePrepareFaceIndexingIterators",
          "input.$": "$.input",
          "data.$": "$.data"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 2,
          "BackoffRate": 1.2
        }
      ],
      "Next": "Map face indexing processing"
    },
    "Map face indexing processing": {
      "Type": "Map",
      "MaxConcurrency": 5,
      "ItemsPath": "$.data.iterators",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Run FaceNet model",
        "States": {
          "Run FaceNet model": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "FunctionName": "arn:aws:lambda:us-west-2:189427507247:function:so0050-0a48a6e54829-run-facenet",
              "Payload.$": "$"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "CodeArtifactUserPendingException"
                ],
                "MaxAttempts": 4,
                "IntervalSeconds": 10,
                "BackoffRate": 1.2
              },
              {
                "ErrorEquals": [
                  "AccessDeniedException",
                  "ResourceNotFoundException",
                  "ValidationException"
                ],
                "MaxAttempts": 0
              },
              {
                "ErrorEquals": [
                  "InternalServerException",
                  "ModelErrorException",
                  "ModelNotReadyException",
                  "ModelTimeoutException",
                  "ServiceQuotaExceededException",
                  "ThrottlingException",
                  "ServiceUnavailableException"
                ],
                "IntervalSeconds": 60,
                "MaxAttempts": 10,
                "BackoffRate": 1.2
              },
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 2,
                "BackoffRate": 1.2
              }
            ],
            "Next": "More face images?"
          },
          "More face images?": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.modelStatus",
                "StringEquals": "COMPLETED",
                "Next": "Index faces to collection"
              }
            ],
            "Default": "Run FaceNet model"
          },
          "Index faces to collection": {
            "Type": "Task",
            "OutputPath": "$.Payload",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "arn:aws:lambda:us-west-2:189427507247:function:so0050-0a48a6e54829-update-face-indexer",
              "Payload.$": "$"
            },
            "Next": "More faces to index?",
            "Retry": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 4,
                "BackoffRate": 1.2
              }
            ]
          },
          "More faces to index?": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.indexStatus",
                "StringEquals": "COMPLETED",
                "Next": "Index faces completed"
              }
            ],
            "Default": "Index faces to collection"
          },
          "Index faces completed": {
            "Type": "Succeed"
          }
        }
      },
      "ResultPath": "$.data.iterators",
      "Next": "Indexing faces iterators completed"
    },
    "Indexing faces iterators completed": {
      "Type": "Task",
      "OutputPath": "$.Payload",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-west-2:189427507247:function:so0050-0a48a6e54829-update-face-indexer",
        "Payload": {
          "operation": "StateFaceIndexingIteratorsCompleted",
          "input.$": "$.input",
          "data.$": "$.data"
        }
      },
      "End": true,
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 4,
          "BackoffRate": 1.2
        }
      ]
    },
    "Prepare iterators": {
      "Type": "Task",
      "OutputPath": "$.Payload",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-west-2:189427507247:function:so0050-0a48a6e54829-update-face-indexer",
        "Payload": {
          "operation": "StatePrepareIterators",
          "input.$": "$.input"
        }
      },
      "Next": "Update record (iterations)",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 4,
          "BackoffRate": 1.2
        }
      ]
    },
    "Update record (iterations)": {
      "Type": "Map",
      "MaxConcurrency": 10,
      "ItemsPath": "$.iterators",
      "ItemSelector": {
        "operation": "StateUpdateRecord",
        "itemId.$": "$$.Map.Item.Index",
        "itemData.$": "$$.Map.Item.Value"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Update record (per content)",
        "States": {
          "Update record (per content)": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "FunctionName": "arn:aws:lambda:us-west-2:189427507247:function:so0050-0a48a6e54829-update-face-indexer",
              "Payload.$": "$"
            },
            "End": true,
            "Retry": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 4,
                "BackoffRate": 1.2
              }
            ]
          }
        }
      },
      "ResultPath": "$.iterators",
      "End": true
    }
  }
}